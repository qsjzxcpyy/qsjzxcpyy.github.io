<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023.11.16学习总结</title>
    <link href="/2023/11/16/2023-11-16%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/16/2023-11-16%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="Stack-笔记"><a href="#Stack-笔记" class="headerlink" title="Stack 笔记"></a>Stack 笔记</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>        Stack&lt;Integer&gt; s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>        Stack&lt;Integer&gt; s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();<br>        s1.push(x);<br>        s2.push(x);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> s1.peek();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> s2.peek();<br>        System.out.println(p1==p2);<br>        System.out.println(s1.peek() == s2.peek());<br>&#125;<br></code></pre></td></tr></table></figure><p>如果x在[-128, 127]，那么两次都会输出true；如果不是在这个范围，会输出true和false。</p><p>原因在于autobox，对于某些值，s1.push(x)会转化为s1.push(Integer.valueOf(x))，然后会利用cache的值，导致实例复用。翻译渣，请参考原解释： <a href="https://stackoverflow.com/questions/31156067/java-stack-peek-behavior">https://stackoverflow.com/questions/31156067/java-stack-peek-behavior</a></p><p>我的理解： 在[-128,127] 会缓存，不会直接构造对象，可能不对。</p><h4 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a>集合框架图</h4><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif"></p><h4 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h4><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/java-coll-2020-11-16.png"></p><h4 id="集合细节"><a href="#集合细节" class="headerlink" title="集合细节"></a>集合细节</h4><ul><li>任何对象加入集合类后，自动转变为Object类型，所以在取出的时候，需要进行强制类型转换。</li><li>集合框架的类和接口均在java.util包中。</li></ul><h4 id="ArrayList-和-LinkedList"><a href="#ArrayList-和-LinkedList" class="headerlink" title="ArrayList  和 LinkedList"></a>ArrayList  和 LinkedList</h4><ul><li><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><ul><li>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</li><li>ArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</li></ul></li><li><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><ul><li>LinkedList 继承了 AbstractSequentialList 类。</li><li>LinkedList 实现了 Queue 接口，可作为队列使用。</li><li>LinkedList 实现了 List 接口，可进行列表的相关操作。</li><li>LinkedList 实现了 Deque 接口，可作为队列使用。</li><li>LinkedList 实现了 Cloneable 接口，可实现克隆。</li><li>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</li><li>更多的情况下我们使用 ArrayList 访问列表中的随机元素更加高效，但以下几种情况 LinkedList 提供了更高效的方法。<ul><li>在列表开头添加元素：<code>addFirst</code></li><li>在列表结尾添加元素：<code>addLast</code></li><li>在列表开头移除元素：<code>removeFirst()</code></li><li>在列表结尾移除元素：<code>removeLast()</code></li><li>获取列表开头的元素：<code>getFirst()</code></li><li>获取列表结尾的元素：<code>getLast()</code></li></ul></li></ul></li><li><h5 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h5><ul><li><strong>以下情况使用 ArrayList :</strong><ul><li>频繁访问列表中的某一个元素。</li><li>只需要在列表末尾进行添加和删除元素操作。</li></ul></li><li><strong>以下情况使用 LinkedList :</strong><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul></li></ul></li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul><li>HashMap 是无序的，即不会记录插入的顺序。</li></ul><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><ul><li><p>使用迭代器遍历集合时，如果在遍历过程中对集合进行了修改（例如添加或删除元素），可能会导致 ConcurrentModificationException 异常，为了避免这个问题，可以使用迭代器自身的 <strong>remove()</strong> 方法进行删除操作。</p><ul><li><pre><code class="java">// 引入 ArrayList 和 Iterator 类import java.util.ArrayList;import java.util.Iterator;public class RunoobTest &#123;    public static void main(String[] args) &#123;        ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;Integer&gt;();        numbers.add(12);        numbers.add(8);        numbers.add(2);        numbers.add(23);        Iterator&lt;Integer&gt; it = numbers.iterator();        while(it.hasNext()) &#123;            Integer i = it.next();            if(i &lt; 10) &#123;                  it.remove();  // 删除小于 10 的元素            &#125;        &#125;        System.out.println(numbers);    &#125;&#125;<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><br>- Java 迭代器是一种单向遍历机制，即**只能从前往后遍历**集合中的元素，不能往回遍历。同时，在使用迭代器遍历集合时，**不能直接修改集合中的元素**，而是需要使用迭代器的 <span class="hljs-keyword">remove</span>() 方法来删除当前元素。<br><br>​     <br><br><span class="hljs-meta">#### 泛型</span><br><br>- **java 中泛型标记符：**<br><br>  - **E** - Element (在集合中使用，因为集合中存放的是元素)<br>  - **T** - Type（Java 类）<br>  - **K** - Key（键）<br>  - **V** - Value（值）<br>  - **N** - Number（数值类型）<br>  - **？** - 表示不确定的 java 类型<br><br>- 下面的例子演示了如何使用泛型方法打印不同类型的数组元素：<br><br>  - ```java<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GenericMethodTest</span><br>    &#123;<br>       <span class="hljs-comment">// 泛型方法 printArray                         </span><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt; E &gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printArray</span>(<span class="hljs-params"> E[] inputArray </span>)</span><br>       &#123;<br>          <span class="hljs-comment">// 输出数组元素            </span><br>             <span class="hljs-keyword">for</span> ( E element : inputArray )&#123;        <br>                System.<span class="hljs-keyword">out</span>.printf( <span class="hljs-string">&quot;%s &quot;</span>, element );<br>             &#125;<br>             System.<span class="hljs-keyword">out</span>.println();<br>        &#125;<br>     <br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params"> String args[] </span>)</span><br>        &#123;<br>            <span class="hljs-comment">// 创建不同类型数组： Integer, Double 和 Character</span><br>            Integer[] intArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>            Double[] doubleArray = &#123; <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span> &#125;;<br>            Character[] charArray = &#123; <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span> &#125;;<br>     <br>            System.<span class="hljs-keyword">out</span>.println( <span class="hljs-string">&quot;整型数组元素为:&quot;</span> );<br>            printArray( intArray  ); <span class="hljs-comment">// 传递一个整型数组</span><br>     <br>            System.<span class="hljs-keyword">out</span>.println( <span class="hljs-string">&quot;\n双精度型数组元素为:&quot;</span> );<br>            printArray( doubleArray ); <span class="hljs-comment">// 传递一个双精度型数组</span><br>     <br>            System.<span class="hljs-keyword">out</span>.println( <span class="hljs-string">&quot;\n字符型数组元素为:&quot;</span> );<br>            printArray( charArray ); <span class="hljs-comment">// 传递一个字符型数组</span><br>        &#125; <br>    &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>编译以上代码，运行结果如下所示：</p></li><li><pre><code class="java">整型数组元素为:1 2 3 4 5 双精度型数组元素为:1.1 2.2 3.3 4.4 字符型数组元素为:H E L L O <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### 泛型类以及通配符（？）<br><br>##### 链接：&lt;https:<span class="hljs-comment">//www.runoob.com/java/java-generics.html&gt;</span><br><br>#### 序列化<br><br> ##### 序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。<br><br>##### 链接：&lt;https:<span class="hljs-comment">//www.runoob.com/java/java-serialization.html&gt;</span><br><br>#### TCP——Socket<br><br>- 服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。<br>- 服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。<br>- 服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。<br>- Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。<br>- 在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。<br><br>#### 代码<br><br>##### 客户端<br><br>```java<br><span class="hljs-comment">// 文件名 GreetingClient.java</span><br> <span class="hljs-comment">// args[0] 是命令行输入传入的第一个参数</span><br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br> <br>public <span class="hljs-keyword">class</span> GreetingClient<br>&#123;<br>   public static void main(String [] args)<br>   &#123;<br>      String serverName = args[<span class="hljs-number">0</span>];<br>      int port = Integer.parseInt(args[<span class="hljs-number">1</span>]);<br>      try<br>      &#123;<br>         System.out.println(<span class="hljs-string">&quot;连接到主机：&quot;</span> + serverName + <span class="hljs-string">&quot; ，端口号：&quot;</span> + port);<br>         Socket client = new Socket(serverName, port);<br>         System.out.println(<span class="hljs-string">&quot;远程主机地址：&quot;</span> + client.getRemoteSocketAddress());<br>         OutputStream outToServer = client.getOutputStream();<br>         DataOutputStream out = new DataOutputStream(outToServer);<br> <br>         out.writeUTF(<span class="hljs-string">&quot;Hello from &quot;</span> + client.getLocalSocketAddress());<br>         InputStream inFromServer = client.getInputStream();<br>         DataInputStream <span class="hljs-keyword">in</span> = new DataInputStream(inFromServer);<br>         System.out.println(<span class="hljs-string">&quot;服务器响应： &quot;</span> + <span class="hljs-keyword">in</span>.readUTF());<br>         client.close();<br>      &#125;catch(IOException e)<br>      &#123;<br>         e.printStackTrace();<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 文件名 GreetingServer.java</span><br> <br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingServer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span><br>&#123;<br>   <span class="hljs-keyword">private</span> ServerSocket serverSocket;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-title function_">GreetingServer</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException<br>   &#123;<br>      serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(port);<br>      serverSocket.setSoTimeout(<span class="hljs-number">10000</span>);<br>   &#125;<br> <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span><br>   &#123;<br>      <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>      &#123;<br>         <span class="hljs-keyword">try</span><br>         &#123;<br>            System.out.println(<span class="hljs-string">&quot;等待远程连接，端口号为：&quot;</span> + serverSocket.getLocalPort() + <span class="hljs-string">&quot;...&quot;</span>);<br>            <span class="hljs-type">Socket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> serverSocket.accept();<br>            System.out.println(<span class="hljs-string">&quot;远程主机地址：&quot;</span> + server.getRemoteSocketAddress());<br>            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(server.getInputStream());<br>            System.out.println(in.readUTF());<br>            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(server.getOutputStream());<br>            out.writeUTF(<span class="hljs-string">&quot;谢谢连接我：&quot;</span> + server.getLocalSocketAddress() + <span class="hljs-string">&quot;\nGoodbye!&quot;</span>);<br>            server.close();<br>         &#125;<span class="hljs-keyword">catch</span>(SocketTimeoutException s)<br>         &#123;<br>            System.out.println(<span class="hljs-string">&quot;Socket timed out!&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         &#125;<span class="hljs-keyword">catch</span>(IOException e)<br>         &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">break</span>;<br>         &#125;<br>      &#125;<br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span><br>   &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">0</span>]);<br>      <span class="hljs-keyword">try</span><br>      &#123;<br>         <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreetingServer</span>(port);<br>         t.run();<br>      &#125;<span class="hljs-keyword">catch</span>(IOException e)<br>      &#123;<br>         e.printStackTrace();<br>      &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机英语单词</title>
    <link href="/2023/11/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    <url>/2023/11/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">instantiated </span>实例化      Arithmetic 算数 <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机英语单词积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机英语单词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.15学习总结--java基础</title>
    <link href="/2023/11/15/2023-11-15%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/15/2023-11-15%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="访问修饰符以及注意事项"><a href="#访问修饰符以及注意事项" class="headerlink" title="访问修饰符以及注意事项"></a>访问修饰符以及注意事项</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/access_modifier.png" alt="access_modifier"></p><h4 id="11-5日笔记——写工程细节"><a href="#11-5日笔记——写工程细节" class="headerlink" title="11.5日笔记——写工程细节"></a>11.5日笔记——写工程细节</h4><ul><li>写工程时 先实现基本功能，先把代码跑通，复杂功能，跑通后实现。</li><li>写接口函数的时候最好定义一个额外的变量，好习惯，很有用，info。</li><li>using namespace std;最好不要加，可能会导致其他人命名空间冲突。</li><li>写工程最好0 warning .size（) 是无符号整数，不会报warning int 会报warning</li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>构造器中可以写get ,set 方法，进行数据合法性判断。</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>在初始化子类的时候，必须先初始化父类，即在子类的构造器中默认调用父类的无参构造方法<ul><li>如果父类中没有默认的无参构造方法，则必须在子类中指定使用父类的哪种构造方法</li><li>必须在子类构造器的第一行代码初始化父类</li></ul></li></ul><h4 id="不懂概念汇总"><a href="#不懂概念汇总" class="headerlink" title="不懂概念汇总"></a>不懂概念汇总</h4><ul><li><p>类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常</p></li><li><p>最常用的继承接口是没有包含任何方法的接口。</p><ul><li><p>标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。</p></li><li><p>标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</p></li><li><pre><code class="hljs">package java.util;public interface EventListener&#123;&#125;</code></pre></li><li><p>没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：</p><ul><li>建立一个公共的父接口：</li></ul><p>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p><ul><li><p>向一个类添加数据类型：</p><p>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p></li></ul></li></ul></li></ul><h4 id="今日小结"><a href="#今日小结" class="headerlink" title="今日小结"></a>今日小结</h4><p>主要是复习了java一些概念 类，继承，接口，文件，封装，重写，重载等概念。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023_11_14当日笔记及总结——java基础知识</title>
    <link href="/2023/11/14/2023-11-14%E5%BD%93%E6%97%A5%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/14/2023-11-14%E5%BD%93%E6%97%A5%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java文档注释"><a href="#java文档注释" class="headerlink" title="java文档注释"></a>java文档注释</h4><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p>程序的说明文档，以一整套网页文件形式体现</p><h5 id="基本格式："><a href="#基本格式：" class="headerlink" title="基本格式："></a>基本格式：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * author 小明</span><br><span class="hljs-comment">   *version 1.0</span><br><span class="hljs-comment">   * ...</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h5 id="生成文档命令："><a href="#生成文档命令：" class="headerlink" title="生成文档命令："></a>生成文档命令：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javadoc -d d:\\...(要生成文档所要存的目录) -author -version test.java<br></code></pre></td></tr></table></figure><p>[1]: <a href="https://c.biancheng.net/view/6262.html">https://c.biancheng.net/view/6262.html</a>“文档注释详解”</p><h4 id="API-中文文档以及其他资料"><a href="#API-中文文档以及其他资料" class="headerlink" title="API 中文文档以及其他资料"></a>API 中文文档以及其他资料</h4><p>[2]: <a href="https://www.matools.com/">https://www.matools.com/</a>“API中文文档”</p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/Operator_priority.png" alt="运算符优先级"></p><h4 id="标识符命名规则与规范"><a href="#标识符命名规则与规范" class="headerlink" title="标识符命名规则与规范"></a>标识符命名规则与规范</h4><ol><li><p>包名包含多个字母时 小写 （aaa.bbb.ccc），com.公司名.项目名.业务模块名。</p><p>1.1 例如（<code>com.sina.crm.user //用户模块</code>)</p></li><li><p>类名，接口名，所有单词首字母大写（AaaBbbCcc)</p></li><li><p>变量名，方法名，第一个单词首字母小写，从第二个开始，首字母大写 （aaaBbbCcc)</p></li><li><p>常量名，所有字母大写，多个单词时 ，用下划线连接（AAA_BBB_CCC)</p></li></ol><h4 id="break-指定跳出的标签层（不到迫不得已不要用）"><a href="#break-指定跳出的标签层（不到迫不得已不要用）" class="headerlink" title="break 指定跳出的标签层（不到迫不得已不要用）"></a>break 指定跳出的标签层（不到迫不得已不要用）</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br>lable1:<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;<br>lable2:<br>   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++)&#123;<br>   lable3:<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; cnt; k ++)&#123;<br>          <span class="hljs-keyword">break</span> lable1;<br>       &#125;<br>   &#125;<br>&#125;<br><span class="hljs-comment">//break 跳出指定的循环层;</span><br><span class="hljs-comment">//continue 与 break 类似</span><br></code></pre></td></tr></table></figure><h4 id="java零散知识点"><a href="#java零散知识点" class="headerlink" title="java零散知识点"></a>java零散知识点</h4><ol><li>局部变量不能加修饰符。</li><li>this指向对象本身， this 可以访问，属性，方法， 构造器。</li><li>this 只能在构造器中访问其他的构造器，并且代码必须写在第一行。</li></ol><h4 id="IDEA-快捷键设置"><a href="#IDEA-快捷键设置" class="headerlink" title="IDEA 快捷键设置"></a>IDEA 快捷键设置</h4><ul><li><p>删除当前行， Ctrl + d</p></li><li><p>复制当前行到下一行 ，alt + shift + 向下箭头</p></li><li><p>补全代码， alt + &#x2F;</p></li><li><p>导入该行需要的类，alt + enter</p></li><li><p>快速格式化代码，Ctrl + alt + L</p></li><li><p>快速运行程序，alt + R</p></li><li><p>生成构造器，alt + insert</p></li><li><p>查看类的层级关系 ，Ctrl + H</p></li><li><p>查看方法再哪个类中， Ctrl + B</p></li><li><p>自动分配变量名， 在new类的后边加<code>.var //例如：(new Scanner(System.in)).var</code></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
