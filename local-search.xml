<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Jstl和El表达式</title>
    <link href="/2023/12/09/2023-12-9%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/09/2023-12-9%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="初始化JavaBean"><a href="#初始化JavaBean" class="headerlink" title="初始化JavaBean"></a>初始化JavaBean</h4><ul><li>可以用BeanUtil工具类初始化</li><li>需要寻找jar包再查</li><li>常用方法，<strong>初始化某个属性</strong>setProperty(实体引用，参数名称，参数值)</li><li><strong>获得属性的值</strong>，getProperty(实体引用，参数名称),返回值是String</li><li><strong>一次性给多个属性赋值</strong>,populate(实体引用，Map&lt;String,extends object&gt; properties)</li></ul><h4 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h4><ul><li><p><strong>注意${}只能在域中寻找</strong></p></li><li><p><strong>简化代码</strong></p><div class="code-wrapper"><pre><code class="hljs jsp">在Servlet中：request.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>);request.setAttribute(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-number">1</span><span class="hljs-number">2</span>在JSP中使用Java脚本：用户名：&lt;%=request.getAttribute(<span class="hljs-string">&quot;username&quot;</span>)%&gt;&lt;br /&gt;密码：  &lt;%=request.getAttribute(<span class="hljs-string">&quot;password&quot;</span>)%&gt;<span class="hljs-number">1</span><span class="hljs-number">2</span>使用EL表达式用户名：$&#123;username&#125;&lt;br /&gt;密码：  $&#123;password&#125;<span class="hljs-number">1</span><span class="hljs-number">2</span>EL表达式不仅能获取Servlet中存储的数据，也能简化JSP中的代码量，使程序简单易维护，另外，当域对象里面的值不存在时，使用EL表达式获取域对象里面的值返回空字符串；而使用Java脚本方式获取，返回值是<span class="hljs-literal">null</span>，会报空指针异常。EL存取变量数据的方法很简单，例如：$&#123;username&#125;。它的意思是取出某一范围中名称为username的变量。因为我们并没有指定哪一个范围的username，所以它会依序从Page、Request、Session、Application范围查找。假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传<span class="hljs-literal">null</span></code></pre></div></li><li><p><strong>El表达式中的运算符</strong></p><ul><li>点运算符<code>&lt;!--  访问user对象的username属性--&gt; $&#123;user.username&#125;</code></li><li>方括号运算符<ul><li><code>&lt;!--不能使用$&#123;user.user_name&#125;--&gt; $&#123;user[&quot;user_name&quot;]&#125;</code></li><li>点运算符和方括号运算符在某种情况下可以互换，如${user.username}等价于${user[“username”]}</li><li>方括号运算符还可以访问List集合或数组中指定索引的某个元素，如表达式${users[0]}用于访问集合或数组中第一个元素。在这种情况下，只能使用方括号运算符，不能使用点运算符。</li><li>方括号运算符和点运算符可以相互结合使用，如${users[0].username}，表示访问集合或者数组中的第一个元素的username属性。</li></ul></li></ul></li><li><p><strong>算数运算符</strong></p><table><thead><tr><th>算数运算符</th><th>说明</th><th>算术表达式</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加</td><td><code>$&#123;1+1&#125;</code></td><td>2</td></tr><tr><td>-</td><td>减</td><td><code>$&#123;1-1&#125;</code></td><td>0</td></tr><tr><td>*</td><td>乘</td><td><code>$&#123;1*1&#125;</code></td><td>1</td></tr><tr><td>&#x2F; (或div)</td><td>除</td><td><code>$&#123;1/1&#125;或$&#123;1 div 1&#125;</code></td><td>1</td></tr><tr><td>% (或mod)</td><td>取余(取模)</td><td><code>$&#123;1%1&#125;或$&#123;1 mod 1&#125;</code></td><td><strong>0</strong></td></tr></tbody></table></li><li><p><strong>比较运算符</strong></p><table><thead><tr><th>比较运算符</th><th>说明</th><th>算术表达式</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;(或eq)</td><td>等于</td><td>${10&#x3D;&#x3D;2}或${10 eq 2}</td><td>false</td></tr><tr><td>!&#x3D;(或ne)</td><td>不等于</td><td>${10!&#x3D;2}或${10 ne 2}</td><td>true</td></tr><tr><td>&lt;(或lt)</td><td>小于</td><td>${10&lt;2}或${10 lt 2}</td><td>false</td></tr><tr><td>(或gt)</td><td>大于</td><td>${10&gt;2}或${10 gt 2}</td><td>true</td></tr><tr><td>&lt;&#x3D;(或le)</td><td>小于等于</td><td>${10&lt;&#x3D;2}或${10 le 2}</td><td>false</td></tr><tr><td>&#x3D;(或ge)</td><td>大于等于</td><td>${10&gt;&#x3D;2}或${10 ge 2}</td><td>true</td></tr></tbody></table></li><li><p><strong>逻辑运算符</strong></p><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>算术表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>&amp;&amp;(and)</code></td><td>逻辑与</td><td><code>$&#123;true&amp;&amp;false&#125;或$&#123;true and false&#125;</code></td><td>false</td></tr><tr><td>&#96;</td><td></td><td>(or)&#96;</td><td>逻辑或</td></tr><tr><td><code>!(not)</code></td><td>逻辑非</td><td><code>$&#123;!=true&#125; 或$&#123;not true&#125;</code></td><td>false</td></tr></tbody></table></li><li><p><strong>empty运算符</strong></p><div class="code-wrapper"><pre><code class="hljs jsp">EL表达式中的empty运算符用于判断某个对象是否为<span class="hljs-literal">null</span>或<span class="hljs-string">&quot;&quot;</span>，结果为布尔类型，其基本的语法格式如下：$&#123;empty <span class="hljs-keyword">var</span>&#125;<span class="hljs-number">1</span><span class="hljs-keyword">var</span>变量不存在(没有定义)，结果返回<span class="hljs-literal">true</span><span class="hljs-keyword">var</span>变量的值为<span class="hljs-literal">null</span>，结果返回<span class="hljs-literal">true</span><span class="hljs-keyword">var</span>变量引用集合(Set、Map、List)类型对象，并且在集合对象中不包含任何元素时，结果返回<span class="hljs-literal">true</span></code></pre></div></li><li><p><strong>条件表达式</strong><br>EL表达式中条件运算符用于执行某种条件判断，类似于Java中的if-else语句，其语法格式如下：</p><p>${A?B:C}<br>1<br>表达式A的计算结果为布尔类型：</p><p>如果表达式A的计算结果为true，就执行表达式B，并返回B的值<br>如果表达式A的计算结果为false，就执行表达式C，并返回C的值</p></li><li><p><strong>“()”运算符</strong><br>EL表达式中的圆括号用于改变其他运算符的优先级。</p></li><li><p><strong>EL隐式对象</strong><br>不需要new就能使用的对象，自带的对象</p><ul><li><p>作用域访问对象(EL隐式对象)：</p><div class="code-wrapper"><pre><code class="hljs jsp">pageScope、requestScope、sessionScope、applicationScope</code></pre></div></li><li><p>参数访问对象</p></li><li><p>JSP隐式对象</p></li></ul><div class="code-wrapper"><pre><code class="hljs jsp">隐含对象名称描述pageContext对应于JSP页面中的pageContext对象pageScope代表page域中用于保存属性的Map对象requestScope代表request域中用于保存属性的Map对象sessionScope代表session域中用于保存属性的Map对象applicationScope代表application域中用于保存属性的Map对象param表示一个保存了所有请求参数的Map对象paramValues表示一个保存了所有请求参数的Map对象，它对于某个请求参数，返回的是String类型数组header表示一个保存了所有HTTP请求头字段的Map对象headerValues表示一个保存了所有HTTP请求头字段的Map对象，返回的是String类型数组cookie用来取得使用者的cookie值，cookie的类型是MapinitParam表示一个保存了所有Web应用初始化参数的Map对象</code></pre></div></li></ul><h4 id="param和requestScope区别"><a href="#param和requestScope区别" class="headerlink" title="param和requestScope区别"></a>param和requestScope区别</h4><ul><li>${param.name} 等价于 request.getParamter(“name”)，这两种方法一般用于服务器从<strong>页面或者客户端</strong>获取的内容。</li><li>${requestScope.name} 等价于 request.getAttribute(“name”)，一般是从<strong>服务器传递结果</strong>到页面，在页面中取出服务器保存的值。</li></ul><h4 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h4><ul><li><p>第一步：引入JSTL标签库对应的jar包。</p><p>​      tomcat10之后引入的jar包是（jar包可以去Maven仓库找）：<br>​      jakarta.servlet.jsp.jstl-2.0.0.jar<br>​      jakarta.servlet.jsp.jstl-api-2.0.0.jar</p></li><li><p>在IDEA当中怎么引入？<br>在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”<br>一定是要和mysql的数据库驱动一样，都是放在WEB-INF&#x2F;lib目录下的。<br>什么时候需要将jar包放到WEB-INF&#x2F;lib目录下？如果这个jar是tomcat服务器没有的。</p></li><li><p>第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）</p></li></ul><p>​       JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</code></pre></div><p>​这个就是核心标签库。<br>​prefix&#x3D;”这里随便起一个名字就行了，核心标签库，大家默认的叫做c，随意。”</p><ul><li><p>JSTL标签的原理</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;以上uri后面的路径实际上指向了一个xxx.tld文件。tld文件实际上是一个xml配置文件。在tld文件中描述了“标签”和“java类”之间的关系。以上核心标签库对应的tld文件是：c.tld文件。它在哪里。在jakarta.servlet.jsp.jstl-<span class="hljs-number">2.0</span><span class="hljs-number">.0</span>.jar里面META-INF目录下，有一个c.tld文件。</code></pre></div></li><li><p>源码解析：配置文件tld解析</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;tag&gt;    &lt;description&gt;对该标签的描述&lt;/description&gt;    &lt;name&gt;<span class="hljs-keyword">catch</span>&lt;/name&gt; 标签的名字    &lt;tag-class&gt;org.apache.taglibs.standard.tag.common.core.CatchTag&lt;/tag-class&gt; 标签对应的java类。    &lt;body-content&gt;JSP&lt;/body-content&gt; 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。    &lt;attribute&gt; 属性        &lt;description&gt;        对这个属性的描述        &lt;/description&gt;        &lt;name&gt;<span class="hljs-keyword">var</span>&lt;/name&gt; 属性名        &lt;required&gt;<span class="hljs-literal">false</span>&lt;/required&gt; <span class="hljs-literal">false</span>表示该属性不是必须的。<span class="hljs-literal">true</span>表示该属性是必须的。        &lt;rtexprvalue&gt;<span class="hljs-literal">false</span>&lt;/rtexprvalue&gt; 这个描述说明了该属性是否支持EL表达式。<span class="hljs-literal">false</span>表示不支持。<span class="hljs-literal">true</span>表示支持EL表达式。    &lt;/attribute&gt;  &lt;/tag&gt;&lt;c:<span class="hljs-keyword">catch</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;&quot;</span>&gt;JSP....&lt;/c:<span class="hljs-keyword">catch</span>&gt;</code></pre></div></li><li><p><strong>各种标签</strong></p></li><li><p><code>&lt;c:out&gt;</code> 标签</p><ul><li><p>功能向页面输出一段文本 信息</p></li><li><p>使用格式 1</p><div class="code-wrapper"><pre><code class="hljs jsp"> &lt;c:out value=<span class="hljs-string">&quot;value&quot;</span> [escapeXml=<span class="hljs-string">&quot;&#123;true|false&#125;&quot;</span>]&gt;  defaultValue  &lt;/c:out&gt;    如果value的值为<span class="hljs-literal">null</span>，输出默认值  在&lt;c:out&gt;标签中有一个escapeXml属性,其默认值为<span class="hljs-literal">true</span>,意思是是否过滤为xml文档。如果为escapeXml=<span class="hljs-string">&quot;false&quot;</span>，则将其中的html、xml解析出来。如value=<span class="hljs-string">&quot;&lt;font size=16&gt;java&lt;/font&gt;&quot;</span>,会显示为大小为<span class="hljs-number">16</span>的”java“如果为escapeXml=<span class="hljs-string">&quot;true&quot;</span>，则显示&lt;font size=<span class="hljs-number">16</span>&gt;java&lt;/font&gt;       value可以使用El表达式 例如：value=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span></code></pre></div></li><li><p>使用格式 2</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;c:out value=<span class="hljs-string">&quot;value&quot;</span> [<span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;defaultValue&quot;</span>] [escapeXml=<span class="hljs-string">&quot;&#123;true|false&#125;&quot;</span>]/&gt;</code></pre></div></li></ul></li><li><p><code>&lt;c:if&gt;</code>标签</p><ul><li><p>条件判断</p></li><li><p><code>&lt;c:if test=“boolean类型，支持EL表达式”&gt;&lt;/c: if&gt;</code></p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%--核心标签库中的<span class="hljs-keyword">if</span>标签--%&gt;&lt;%--test属性是必须的,支持EL表达式，test属性值必须是<span class="hljs-type">boolean</span>类型--%&gt;&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;empty param.username&#125;&quot;</span>&gt;    &lt;h1&gt;用户名不能为空&lt;/h1&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;&lt;%--没有<span class="hljs-keyword">else</span>标签--%&gt;&lt;%--<span class="hljs-keyword">if</span>标签还有<span class="hljs-keyword">var</span>属性，不是必须的--%&gt;&lt;%--<span class="hljs-keyword">if</span>标签还有scope属性，用来指定<span class="hljs-keyword">var</span>的存储域，不是必须的--%&gt;&lt;%--scope有四个值:page(pageContext域)、request、session、application--%&gt;&lt;%--将<span class="hljs-keyword">var</span>中的值存储到request域中--%&gt;&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty param.username&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;v&quot;</span> scope=<span class="hljs-string">&quot;request&quot;</span>&gt;    &lt;h1&gt;欢迎$&#123;param.username&#125;&lt;/h1&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;&lt;%--从request域中取v--%&gt;&lt;%--v变量中存储的是test属性的值--%&gt;$&#123;v&#125;&lt;%--<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span>--%&gt;</code></pre></div></li></ul></li><li><p><code>&lt;c:choose&gt;</code>标签</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%--注意：这个嵌套结构不能随便改，只能这样写--%&gt;&lt;c:choose&gt;    &lt;c:when test=<span class="hljs-string">&quot;$&#123;param.age &lt; 18&#125;&quot;</span>&gt;        青少年    &lt;/c:when&gt;    &lt;c:when test=<span class="hljs-string">&quot;$&#123;param.age &lt; 35&#125;&quot;</span>&gt;        青年    &lt;/c:when&gt;    &lt;c:when test=<span class="hljs-string">&quot;$&#123;param.age &lt; 55&#125;&quot;</span>&gt;        中年    &lt;/c:when&gt;    &lt;c:otherwise&gt;        老年    &lt;/c:otherwise&gt;&lt;/c:choose&gt;&lt;%--&lt;c:otherwise&gt;标签只能在最后--%&gt;</code></pre></div></li><li><p><code>&lt;c:forEach&gt;</code> 标签</p><ul><li><p>循环遍历</p></li><li><p>格式</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;c:forEach [<span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;varName&quot;</span>] items=<span class="hljs-string">&quot;collection&quot;</span> [varStatus=<span class="hljs-string">&quot;varStatusName&quot;</span>][begin=<span class="hljs-string">&quot;begin&quot;</span>] [end=<span class="hljs-string">&quot;end&quot;</span>] [step=<span class="hljs-string">&quot;step&quot;</span>]&gt;body content&lt;/c:forEach&gt;&lt;%--<span class="hljs-keyword">var</span>属性 将当前元素保存到page域中的名称--%&gt;&lt;%--varStatus属性包含了从集合中取出的元素的状态信息--%&gt;例如： count 元素在集合中的序列号      index 索引      first 是不是第一个元素      last 是不是最后一个元素</code></pre></div></li></ul></li><li><p><code>&lt;c:param&gt;</code>标签</p><ul><li><p>和<code>&lt;c:url&gt;</code>标签配合使用，为url添加参数</p></li><li><p>格式</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;c:param name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;value&quot;</span>&gt;</code></pre></div></li></ul></li><li><p><code>&lt;c:url&gt;</code>标签</p><ul><li><p>格式</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;c:url value=<span class="hljs-string">&quot;value&quot;</span> [<span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;varName&quot;</span>] [context=<span class="hljs-string">&quot;context&quot;</span>] [scope=<span class="hljs-string">&quot;&#123;page|request|session|application&#125;&quot;</span>]&gt;&lt;c:param&gt;标签&lt;/c:url&gt;scope 默认是page</code></pre></div></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb,Jstl,El表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.28学习总结</title>
    <link href="/2023/11/28/2023-11-28%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/28/2023-11-28%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.27学习总结</title>
    <link href="/2023/11/27/2023-11-27%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/27/2023-11-27%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="创建文件方式"><a href="#创建文件方式" class="headerlink" title="创建文件方式"></a>创建文件方式</h4><ul><li>根据路径创建文件File(String)</li><li>根据父文件目录+子路径创建文件File(File,String)</li><li>根据父目录+子路径创建文件File(String,String)</li></ul><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><ul><li>new FileOutputStream(filePath) 覆盖文件原来内容</li><li>new FileOutputStream(filePath,true) 追加内容</li></ul><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><ul><li>对应FileWriter , 一定要关闭流，或者flush才能真正的把数据写入到文件</li></ul><h4 id="BufferedReader-BufferedWriter"><a href="#BufferedReader-BufferedWriter" class="headerlink" title="BufferedReader&#x2F;BufferedWriter"></a>BufferedReader&#x2F;BufferedWriter</h4><ul><li><p>是处理流，里面封装了一个属性为Reader ,可以对不同的数据源进行操作，更加灵活。节点流只能对特定的数据源进行操作，其实就是封装了节点流。可以传入不同的节点流对象，实现不同数据源的操作。</p></li><li><p>BufferWriter同理</p></li><li><p>这两者都属于字符流，关闭处理流时，只需要关闭外层流，内层流底层会自动关闭即可。</p></li><li><p>readLine() 按行读取，效率更高。</p></li><li><p>bufferedWriter.newLine();&#x2F;&#x2F;插入一个和系统相关的换行</p></li><li><p>BufferedReader 和 BufferedWriter 是字符操作 </p></li><li><p>不要去操作 二进制文件[声音，视频，doc, pdf ], 可能造成文件损坏</p></li><li><p>增加缓冲的方式来提高输入输出的效率</p></li></ul><h4 id="BufferedInputStream-BufferedOutputStream"><a href="#BufferedInputStream-BufferedOutputStream" class="headerlink" title="BufferedInputStream&#x2F;BufferedOutputStream"></a>BufferedInputStream&#x2F;BufferedOutputStream</h4><ul><li>与字符流处理流类似，区别就是这是操作字节的。</li></ul><h4 id="对象流ObjectInputStream-ObjectOutputStream"><a href="#对象流ObjectInputStream-ObjectOutputStream" class="headerlink" title="对象流ObjectInputStream&#x2F;ObjectOutputStream"></a>对象流ObjectInputStream&#x2F;ObjectOutputStream</h4><ul><li>&#x2F;&#x2F;序列化后，保存的文件格式，不是存文本，而是按照他的格式来保存 String filePath &#x3D; “e:\data.dat”;</li></ul><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dxl1.png" alt="dxl1"  /><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dxl2.png" alt="dxl2"></p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dxl3.png" alt="dxl3"  /><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath));<span class="hljs-comment">//序列化数据到 e:\data.dat</span>oos.writeInt(<span class="hljs-number">100</span>);<span class="hljs-comment">// int -&gt; Integer (实现了 Serializable)</span>oos.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">// boolean -&gt; Boolean (实现了 Serializable)</span>oos.writeChar(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">// char -&gt; Character (实现了 Serializable)</span>oos.writeDouble(<span class="hljs-number">9.5</span>);<span class="hljs-comment">// double -&gt; Double (实现了 Serializable)</span>oos.writeUTF(<span class="hljs-string">&quot;韩顺平教育&quot;</span>);<span class="hljs-comment">//String</span><span class="hljs-comment">//保存一个 dog 对象</span>oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;日本&quot;</span>, <span class="hljs-string">&quot;白色&quot;</span>));oos.close();</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\data.dat&quot;</span>));<span class="hljs-comment">// 2.读取， 注意顺序</span>System.out.println(ois.readInt());System.out.println(ois.readBoolean());System.out.println(ois.readChar());System.out.println(ois.readDouble());System.out.println(ois.readUTF());System.out.println(ois.readObject());System.out.println(ois.readObject());System.out.println(ois.readObject());<span class="hljs-comment">// 3.关闭</span>ois.close();System.out.println(<span class="hljs-string">&quot;以反序列化的方式读取(恢复)ok~&quot;</span>);</code></pre></div><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/zhl.png" alt="zhl"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 看一个中文乱码问题</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeQuestion</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//读取 e:\\a.txt 文件到程序</span><span class="hljs-comment">//a.txt 不是utf-8,会出现乱码</span><span class="hljs-comment">//思路</span><span class="hljs-comment">//1. 创建字符输入流 BufferedReader [处理流]</span><span class="hljs-comment">//2. 使用 BufferedReader 对象读取 a.txt</span><span class="hljs-comment">//3. 默认情况下，读取文件是按照 utf-8 编码</span><span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.txt&quot;</span>;<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();System.out.println(<span class="hljs-string">&quot;读取到的内容: &quot;</span> + s);br.close();<span class="hljs-comment">//InputStreamReader</span><span class="hljs-comment">//OutputStreamWriter</span>&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.transformation;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 演示使用 InputStreamReader 转换流解决中文乱码问题</span><span class="hljs-comment">* 将字节流 FileInputStream 转成字符流 InputStreamReader, 指定编码 gbk/utf-8</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamReader_</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.txt&quot;</span>;<span class="hljs-comment">//解读</span><span class="hljs-comment">//1. 把 FileInputStream 转成 InputStreamReader</span><span class="hljs-comment">//2. 指定编码 gbk</span><span class="hljs-comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), &quot;gbk&quot;);</span><span class="hljs-comment">//3. 把 InputStreamReader 传入 BufferedReader</span><span class="hljs-comment">//BufferedReader br = new BufferedReader(isr);</span><span class="hljs-comment">//将 2 和 3 合在一起</span><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath), <span class="hljs-string">&quot;gbk&quot;</span>));<span class="hljs-comment">//4. 读取</span><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();System.out.println(<span class="hljs-string">&quot;读取内容=&quot;</span> + s);<span class="hljs-comment">//5. 关闭外层流</span>br.close();&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 1.创建流对象</span><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;d:\\a.txt&quot;</span>), <span class="hljs-string">&quot;gbk&quot;</span>);韩顺平循序渐进学Java 零基础第<span class="hljs-number">858</span>页<span class="hljs-comment">// 2.写入</span>osw.write(<span class="hljs-string">&quot;hello,韩顺平教育~&quot;</span>);<span class="hljs-comment">// 3.关闭</span>osw.close();System.out.println(<span class="hljs-string">&quot;保存成功~&quot;</span>);</code></pre></div><h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/bzh.png" alt="bzh"></p><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dyl.png" alt="dyl"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dyl1.png" alt="dyl1"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.transformation;<span class="hljs-keyword">import</span> java.io.FileWriter;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 演示 PrintWriter 使用方式</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintWriter_</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//PrintWriter printWriter = new PrintWriter(System.out);</span><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;e:\\f2.txt&quot;</span>));     printWriter.print(<span class="hljs-string">&quot;hi, 北京你好~~~~&quot;</span>);        printWriter.close();<span class="hljs-comment">//flush + 关闭流, 才会将数据写入到文件..</span>    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.printstream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintStream;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 演示 PrintStream （字节打印流/输出流）</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStream_</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> System.out;<span class="hljs-comment">//在默认情况下，PrintStream 输出数据的位置是 标准输出，即显示器</span><span class="hljs-comment">/*</span><span class="hljs-comment">public void print(String s) &#123;</span><span class="hljs-comment">if (s == null) &#123;</span><span class="hljs-comment">s = &quot;null&quot;;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">write(s);</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">*/</span>out.print(<span class="hljs-string">&quot;john, hello&quot;</span>);<span class="hljs-comment">//因为 print 底层使用的是 write , 所以我们可以直接调用 write 进行打印/输出</span>out.write(<span class="hljs-string">&quot;韩顺平,你好&quot;</span>.getBytes());out.close();<span class="hljs-comment">//我们可以去修改打印流输出的位置/设备</span><span class="hljs-comment">//1. 输出修改成到 &quot;e:\\f1.txt&quot;</span><span class="hljs-comment">//2. &quot;hello, 韩顺平教育~&quot; 就会输出到 e:\f1.txt</span><span class="hljs-comment">//3. public static void setOut(PrintStream out) &#123;</span><span class="hljs-comment">// checkIO();</span><span class="hljs-comment">// setOut0(out); // native 方法，修改了 out</span><span class="hljs-comment">// &#125;</span>System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;e:\\f1.txt&quot;</span>));System.out.println(<span class="hljs-string">&quot;hello, 韩顺平教育~&quot;</span>);&#125;&#125;printWriter.print(<span class="hljs-string">&quot;hi, 北京你好~~~~&quot;</span>);printWriter.close();<span class="hljs-comment">//flush + 关闭流, 才会将数据写入到文件..</span>&#125;</code></pre></div><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/pro.png" alt="pro"></p><p><strong>一般写法</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.properties_;<span class="hljs-keyword">import</span> java.io.BufferedReader;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">import</span> java.io.FileReader;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties01</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//读取 mysql.properties 文件，并得到 ip, user 和 pwd</span><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//循环读取</span>String[] split = line.split(<span class="hljs-string">&quot;=&quot;</span>);<span class="hljs-comment">//如果我们要求指定的 ip 值</span><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;ip&quot;</span>.equals(split[<span class="hljs-number">0</span>])) &#123;System.out.println(split[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;值是: &quot;</span> + split[<span class="hljs-number">1</span>]);&#125;&#125;br.close();&#125;&#125;</code></pre></div><p><strong>读配置文件</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.properties_;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">import</span> java.io.FileReader;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties02</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//使用 Properties 类来读取 mysql.properties 文件</span><span class="hljs-comment">//1. 创建 Properties 对象</span><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<span class="hljs-comment">//2. 加载指定配置文件</span>properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<span class="hljs-comment">//3. 把 k-v 显示控制台</span>properties.list(System.out);<span class="hljs-comment">//4. 根据 key 获取对应的值</span><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;pwd&quot;</span>);System.out.println(<span class="hljs-string">&quot;用户名=&quot;</span> + user);System.out.println(<span class="hljs-string">&quot;密码是=&quot;</span> + pwd);&#125;&#125;</code></pre></div><p><strong>写配置文件</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.properties_;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties03</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//使用 Properties 类来创建 配置文件, 修改配置文件内容</span><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<span class="hljs-comment">//创建</span><span class="hljs-comment">//1.如果该文件没有 key 就是创建</span><span class="hljs-comment">//2.如果该文件有 key ,就是修改</span><span class="hljs-comment">/*</span><span class="hljs-comment">Properties 父类是 Hashtable ， 底层就是 Hashtable 核心方法</span><span class="hljs-comment">public synchronized V put(K key, V value) &#123;</span><span class="hljs-comment">// Make sure the value is not null</span><span class="hljs-comment">if (value == null) &#123;</span><span class="hljs-comment">throw new NullPointerException();</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">// Makes sure the key is not already in the hashtable. Entry&lt;?,?&gt; tab[] = table;</span><span class="hljs-comment">韩顺平循序渐进学Java 零基础第866页int hash = key.hashCode();</span><span class="hljs-comment">int index = (hash &amp; 0x7FFFFFFF) % tab.length;</span><span class="hljs-comment">@SuppressWarnings(&quot;unchecked&quot;)</span><span class="hljs-comment">Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><span class="hljs-comment">for(; entry != null ; entry = entry.next) &#123;</span><span class="hljs-comment">if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><span class="hljs-comment">V old = entry.value;</span><span class="hljs-comment">entry.value = value;//如果 key 存在，就替换</span><span class="hljs-comment">return old;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">addEntry(hash, key, value, index);//如果是新 k, 就 addEntry</span><span class="hljs-comment">return null;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">*/</span>properties.setProperty(<span class="hljs-string">&quot;charset&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>);properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;汤姆&quot;</span>);<span class="hljs-comment">//注意保存时，是中文的 unicode 码值</span>properties.setProperty(<span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;888888&quot;</span>);<span class="hljs-comment">//将 k-v 存储文件中即可</span>properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src\\mysql2.properties&quot;</span>), <span class="hljs-literal">null</span>);<span class="hljs-comment">//第二个属性是注解</span>System.out.println(<span class="hljs-string">&quot;保存配置文件成功~&quot;</span>);&#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.26学习总结</title>
    <link href="/2023/11/26/2023-11-26%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/26/2023-11-26%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="绑定机制只是针对方法有用"><a href="#绑定机制只是针对方法有用" class="headerlink" title="绑定机制只是针对方法有用"></a>绑定机制只是针对方法有用</h4><ul><li>访问属性是访问的声明类的属性，例如父类子类有相同的属性名，向上转型，访问属性，访问的是父类的属性，而不是子类的，访问同名方法，访问的是子类的而不是父类的，所以说，动态绑定针对方法有用，属性不是！！！！！！</li></ul><p>动态绑定：<a href="https://blog.csdn.net/qq_43900956/article/details/115803111">https://blog.csdn.net/qq_43900956/article/details/115803111</a></p><h4 id="今天实现了坦克的对战功能非常爽"><a href="#今天实现了坦克的对战功能非常爽" class="headerlink" title="今天实现了坦克的对战功能非常爽"></a>今天实现了坦克的对战功能非常爽</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/tank04.png" alt="tank04"></p><h4 id="线程-run方法不会影响runnable-实现类的属性的值，是多少结束后还是多少。"><a href="#线程-run方法不会影响runnable-实现类的属性的值，是多少结束后还是多少。" class="headerlink" title="线程 run方法不会影响runnable 实现类的属性的值，是多少结束后还是多少。"></a>线程 run方法不会影响runnable 实现类的属性的值，是多少结束后还是多少。</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(a).start();        System.out.println(a.s);        System.out.println(a.a1);        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.s.size(); i ++)&#123;            System.out.println(a.s.get(i));    &#125;&#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;    Vector&lt;Integer&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();    <span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;        s.add(<span class="hljs-number">1</span>);        s.add(<span class="hljs-number">2</span>);        s.add(<span class="hljs-number">3</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;        s.add(<span class="hljs-number">4</span>);        s.add(<span class="hljs-number">5</span>);        s.add(<span class="hljs-number">6</span>);        System.out.println(<span class="hljs-literal">false</span>);        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;            <span class="hljs-keyword">if</span>(a1 == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;            a1 --;        &#125;    &#125;&#125;</code></pre></div><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><div class="code-wrapper"><pre><code class="hljs java">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<span class="hljs-number">5</span><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-literal">false</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.25学习总结</title>
    <link href="/2023/11/25/2023-11-25%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/25/2023-11-25%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><h5 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h5><ul><li>interrupt 方法，中断休眠中的线程，相当于唤醒。</li><li>main()做为入口开始运行的。　是一个线程,同时还是一个进程</li><li>yield()进程礼让，不一定成功</li><li>join() 插入，执行完了，在允许别的进程执行。</li><li>setDaemon，设置为守护线程，当用户线程结束后，守护线程结束，垃圾回收机制，是守护线程。</li></ul><h5 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h5><ul><li>this锁推断出，this指向的是runnable接口的实现类。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//如果在静态方法中，实现一个同步代码块.</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">synchronized</span> (SellTicket03.class) &#123;            System.out.println(<span class="hljs-string">&quot;m2&quot;</span>);        &#125;    &#125;<span class="hljs-comment">//所指向的是类的class对象。</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java">/<span class="hljs-number">1.</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;&#125; 就是一个同步方法<span class="hljs-comment">//2. 这时锁在 this对象</span><span class="hljs-comment">//3. 也可以在代码块上写 synchronize ,同步代码块, 互斥锁还是在this对象</span><span class="hljs-keyword">public</span> <span class="hljs-comment">/*synchronized*/</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>&#123;            <span class="hljs-keyword">synchronized</span> (<span class="hljs-comment">/*this*/</span> object) &#123;            <span class="hljs-keyword">if</span> (ticketNum &lt;= <span class="hljs-number">0</span>) &#123;                System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);                loop = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">return</span>;            &#125;        &#125;&#125;<span class="hljs-comment">//也可以在runnable实现类中定义一个object 对象，使object对象成为锁。</span><span class="hljs-comment">//最重要的是锁的唯一性！！！！！！</span></code></pre></div><ul><li><p>代码块加锁的效率更高。</p></li><li><p>代码块执行完，出未处理错误、异常，break、return ，执行 wait方法会释放锁。</p></li><li><p>sleep(),yield()方法不会释放锁。线程被挂起 suspend方法，不会释放锁。</p><ul><li><code>Thread</code>类的<code>suspend()</code>方法使线程无法运行到等待状态。如果要停止线程执行并在发生特定事件时再次启动，则使用此方法。 此方法允许线程暂时停止执行。 可以使用<code>resume()</code>方法恢复挂起的线程。 &#x2F;&#x2F;更多请阅读：<a href="https://www.yiibai.com/java_multithreading/java-thread-suspend-method.html">https://www.yiibai.com/java_multithreading/java-thread-suspend-method.html</a></li></ul></li><li><p>suspend和resume方法不推荐使用，避免使用。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.23学习总结</title>
    <link href="/2023/11/23/2023-11-23%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/23/2023-11-23%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="今天实现了坦克的移动和发射"><a href="#今天实现了坦克的移动和发射" class="headerlink" title="今天实现了坦克的移动和发射"></a>今天实现了坦克的移动和发射</h4><p>熟悉了线程基本用法</p><ul><li><code>thread.start()</code>实际上是启动run方法。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//线程代理类 , 模拟了一个极简的 Thread 类</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<span class="hljs-comment">//你可以把 Proxy 类当做 ThreadProxy</span><span class="hljs-keyword">private</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//属性，类型是 Runnable</span><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">if</span> (target != <span class="hljs-literal">null</span>) &#123;target.run();<span class="hljs-comment">//动态绑定（运行类型 Tiger）</span>&#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadProxy</span><span class="hljs-params">(Runnable target)</span> &#123;<span class="hljs-built_in">this</span>.target = target;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;start0();<span class="hljs-comment">//这个方法时真正实现多线程方法</span>&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span> &#123;run();&#125;&#125;</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/tank1.png" alt="tank1"></p><h4 id="画图形"><a href="#画图形" class="headerlink" title="画图形"></a>画图形</h4><ul><li>JFrame  窗口，放画板 JPanel , 画笔Graphics 在JPanel 画图形</li><li>第一次打开画板会调用 paint()方法，改变窗口大小，最大化，最小化，repaint(),等会重新调用paint()方法。</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.22学习总结</title>
    <link href="/2023/11/22/2023-11-22%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/22/2023-11-22%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><h5 id="链接：-https-www-cnblogs-com-fnlingnzb-learner-p-7265104-html"><a href="#链接：-https-www-cnblogs-com-fnlingnzb-learner-p-7265104-html" class="headerlink" title="链接： https://www.cnblogs.com/fnlingnzb-learner/p/7265104.html"></a>链接： <a href="https://www.cnblogs.com/fnlingnzb-learner/p/7265104.html">https://www.cnblogs.com/fnlingnzb-learner/p/7265104.html</a></h5><ul><li>使用泛型的数组不能初始化。</li><li>静态方法中不能使用泛型。</li><li>泛型可以传入子类</li><li>没有指定类型，默认为Object</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//在jdk8 中，可以在接口中，使用默认方法, 也是可以使用泛型</span><span class="hljs-keyword">default</span> R <span class="hljs-title function_">method</span><span class="hljs-params">(U u)</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;</code></pre></div><ul><li><p>实现接口时，直接指定泛型接口的类型</p></li><li><p>通配符，取出时，就是Object通配符，取出时，就是Object</p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//List&lt;? extends AA&gt; c： 表示 上限，可以接受 AA或者AA子类</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//List&lt;? super AA&gt; c: 支持AA类以及AA类的父类，不限于直接父类</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//泛型没有继承性</span><span class="hljs-comment">//List&lt;Object&gt; list = new ArrayList&lt;String&gt;(); xxxxx</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticGenerator</span>&lt;T&gt; &#123;    ....    ....    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span><span class="hljs-comment">     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span><span class="hljs-comment">     * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span><span class="hljs-comment">          &quot;StaticGenerator cannot be refrenced from static context&quot;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span>&#123;    &#125;&#125;</code></pre></div><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>1：非静态内部类，必须有一个外部类的引用才能创建。</p><p>2：在外部类的非静态方法中，因为有隐含的外部类引用this，所以可以直接创建非静态内部类。</p><p>3：在外部类的静态方法中，因为没有this，所以必须先获得外部类引用，然后创建非静态内部类。</p><p>4：静态内部类，不需要外部类引用就可以直接创建。</p><p>5：同时静态的内部类，也不能直接访问外部类的非静态方法。</p><p>6：由此可以推测，非静态内部类之所以可以直接访问外部类的方法，是因为创建非静态内部类时，有一个隐含的外部类引用被传递进来。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.21学习总结</title>
    <link href="/2023/11/21/2023-11-21%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/21/2023-11-21%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h5 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h5><ul><li>Date</li><li>Calendar</li><li>LocalDateTime</li><li>DateTimeFormatter</li><li>Instant</li></ul><h5 id="编程技巧"><a href="#编程技巧" class="headerlink" title="编程技巧"></a>编程技巧</h5><ul><li>判断数据是否合理<ul><li>写正确的判断条件，取反。</li></ul></li></ul><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><ul><li>未重写equals判断的是对象地址是不是相同。</li></ul><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul><li>ArrayList 线程不安全，效率高。</li><li>vector线程安全</li></ul><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><ul><li>判断是不是相等，首先看hashcode 是不是相同，如果相同，调用equal方法进行比较，如果不相同再进行添加。</li><li>如果自己写的类要重写hashcode 和 equal方法。</li></ul><h4 id="知识点截图"><a href="#知识点截图" class="headerlink" title="知识点截图"></a>知识点截图</h4><h5 id="HashSet和TreeSet去重比较"><a href="#HashSet和TreeSet去重比较" class="headerlink" title="HashSet和TreeSet去重比较"></a>HashSet和TreeSet去重比较</h5><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(1).png"></h4><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(2).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(6).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(9).png"></p><h5 id="HashSet-1"><a href="#HashSet-1" class="headerlink" title="HashSet"></a>HashSet</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(3).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(10).png"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//个人理解remove(p1),需要重新计算hashcode 装换成hash值在转换成索引，到索引去比较，如果改了其中属性值hashcode值也会变。</span></code></pre></div><h5 id="Collections-工具类）"><a href="#Collections-工具类）" class="headerlink" title="Collections(工具类）"></a>Collections(工具类）<img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(4).png"><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(12).png"></h5><h5 id="ProPerties-配置文件使用"><a href="#ProPerties-配置文件使用" class="headerlink" title="ProPerties(配置文件使用)"></a>ProPerties(配置文件使用)</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(7).png"></p><h5 id="Vector和ArrayList比较"><a href="#Vector和ArrayList比较" class="headerlink" title="Vector和ArrayList比较"></a>Vector和ArrayList比较</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(8).png"></p><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(11).png"></p><h5 id="如何选择集合类"><a href="#如何选择集合类" class="headerlink" title="如何选择集合类"></a>如何选择集合类</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(13).png"></p><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(14).png"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//使用不含Comparator接口的构造器，自定义的类需要实现Comparator接口，因为底层会把对象转成Comparable类型</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.20学习总结</title>
    <link href="/2023/11/20/2023-11-20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/20/2023-11-20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h5 id="空间存储"><a href="#空间存储" class="headerlink" title="空间存储"></a>空间存储</h5><ul><li>栈中存储的是基本类型变量，和对象引用。</li><li>堆中存储的是对象</li><li>常量池存储的是字符串常量，基本类型常量。</li></ul><h5 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h5><ul><li><p>string数组中有<code>final char[]</code>数组属性，char数组中的值可以修改，但是char 地址是不可以修改的。</p></li><li><p><code>String s = &quot;aaa&quot; + &quot;bbb&quot;</code> 等价于 <code>String s = &quot;aaabbb&quot;</code>创建了一个对象</p></li><li><p><code>String s = &quot;aaa&quot;</code> 先查看常量池，如果有直接指向，如果没有直接创建，并指向，最终指向的是常量池地址空间。</p></li><li><p><code>String s = new String(&quot;aaa&quot;);</code>先在堆中创建空间，维护value属性，指向常量池，常量池如果有直接通过value属性指向，如果没有创建后指向。最后指向的是堆中的地址空间。</p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;china&quot;</span>;  <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;china&quot;</span>;  <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;china&quot;</span>;  <span class="hljs-type">String</span> <span class="hljs-variable">ss1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;china&quot;</span>);  <span class="hljs-type">String</span> <span class="hljs-variable">ss2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;china&quot;</span>);  <span class="hljs-type">String</span> <span class="hljs-variable">ss3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;china&quot;</span>);</code></pre></div><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/20190130125804477.png" style="zoom: 200%;" /><ul><li>String intern() 方法 首先在常量池中查看是否存在跟当前对象字符串相同的常量，如果有直接返回字符串常量的地址，如果没有直接在常量池中创建一个当前字符串常量（对象）并返回地址。最终返回的是常量池的地址。</li><li><code>&quot;sdf&quot;</code>表示的是常量池中的地址如果比较的话。</li><li>字符创常量池的常量也算对象。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cdf&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s + b;  <span class="hljs-comment">/* 底层:</span><span class="hljs-comment">1. 创建stringBuilder ,StringBuilder是临时缓冲区</span><span class="hljs-comment">2.append方法追加 &quot;cdf&quot; 和 &quot;abc&quot;</span><span class="hljs-comment">3.toString 返回new 一个String 对象 value 指向常量池&quot;abccdf&quot;</span><span class="hljs-comment">*/</span></code></pre></div><ul><li><p>数组默认是放在堆里面的。</p></li><li><p><strong>调方法会产生新栈</strong> ，相当于是值传递。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/zfu1.png"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/zuf.png"></p><h5 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h5><ul><li>线程<strong>不安全</strong>，如果是 <strong>单线程</strong>，最好的选择。</li><li>比StringBuffer快</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.19学习总结</title>
    <link href="/2023/11/19/2023-11-19%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/19/2023-11-19%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java-零碎知识点"><a href="#java-零碎知识点" class="headerlink" title="java 零碎知识点"></a>java 零碎知识点</h4><ul><li>final 类不能被继承。</li><li>通过反射机制获得对象的名称，用当前对象生成class对象，通过class对象调用getName方法获取当前对象名称。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectNameExample</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">// 创建一个对象</span>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();                <span class="hljs-comment">// 获取对象的Class对象</span>        Class&lt;?&gt; clazz = obj.getClass();                <span class="hljs-comment">// 获取类的名称</span>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> clazz.getName();                System.out.println(<span class="hljs-string">&quot;对象的名称: &quot;</span> + className);    &#125;&#125;--------------------------------------------------------<span class="hljs-comment">//对象的名称: java.lang.Object</span></code></pre></div><ul><li>static 修饰的变量通过调用返回值为static 修饰的返回类型的方法，不能调用没有static修饰的返回值的方法。</li><li>静态代码块跟类加载相关，也就是说当类加载的时候执行静态代码块。</li><li>构造器隐藏着super（）和普通代码块的执行和普通属性的初始化。</li><li>final 和 static 一般配合使用效率更高，底层编译器做了优化处理。</li><li>运行时异常如果没有声明如何处理异常，默认是throws。</li><li>只要有基本数据类型，就是值的判断。</li></ul><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><ul><li>枚举隐式继承了 Enum类，枚举类是final类。</li></ul><h4 id="当日知识截图分类"><a href="#当日知识截图分类" class="headerlink" title="当日知识截图分类"></a>当日知识截图分类</h4><h5 id="SuppressWarnings-注解（消除warning）"><a href="#SuppressWarnings-注解（消除warning）" class="headerlink" title="SuppressWarnings 注解（消除warning）"></a>SuppressWarnings 注解（消除warning）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(23).png" alt="1 (23)"></p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(1).png" alt="1 (1)"></h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(4).png" alt="1 (4)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(11).png" alt="1 (11)"></p><h5 id="IDEAmain传参"><a href="#IDEAmain传参" class="headerlink" title="IDEAmain传参"></a>IDEAmain传参</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(2).png" alt="1 (2)"></p><h5 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(12).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(8).png" alt="1 (8)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(3).png" alt="1 (3)"></p><h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(5).png" alt="1 (5)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(6).png" alt="1 (6)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(10).png" alt="1 (10)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(22).png" alt="1 (22)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(35).png" alt="1 (35)"></p><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(17).png" alt="1 (17)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(34).png" alt="1 (34)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(7).png" alt="1 (7)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(15).png" alt="1 (15)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(14).png" alt="1 (14)"></p><h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(13).png" alt="1 (13)"></p><h5 id="IDEA展示实现的接口类"><a href="#IDEA展示实现的接口类" class="headerlink" title="IDEA展示实现的接口类"></a>IDEA展示实现的接口类</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(16).png" alt="1 (16)"></p><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(18).png"></p><h5 id="Override注解（判断子类是否重写方法）"><a href="#Override注解（判断子类是否重写方法）" class="headerlink" title="Override注解（判断子类是否重写方法）"></a>Override注解（判断子类是否重写方法）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(19).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(25).png" alt="1 (25)"></p><h5 id="IDEA图解类关系"><a href="#IDEA图解类关系" class="headerlink" title="IDEA图解类关系"></a>IDEA图解类关系</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(20).png" alt="1 (20)"></p><h5 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(21).png" alt="1 (21)"></p><h5 id="接口引用"><a href="#接口引用" class="headerlink" title="接口引用"></a>接口引用</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(24).png" alt="1 (24)"></p><h5 id="静态方法（类方法）"><a href="#静态方法（类方法）" class="headerlink" title="静态方法（类方法）"></a>静态方法（类方法）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(26).png" alt="1 (26)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(32).png" alt="1 (32)"></p><h5 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(28).png" alt="1 (28)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(29).png" alt="1 (29)"></p><h5 id="Deprecated注解（代表某个类或者方法已过时）"><a href="#Deprecated注解（代表某个类或者方法已过时）" class="headerlink" title="Deprecated注解（代表某个类或者方法已过时）"></a>Deprecated注解（代表某个类或者方法已过时）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(30).png" alt="1 (30)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(31).png" alt="1 (31)"></p><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(33).png" alt="1 (33)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(38).png" alt="1 (38)"></p><h5 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(36).png" alt="1 (36)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(39).png" alt="1 (39)"></p><h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(37).png" alt="1 (37)"></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.18学习总结</title>
    <link href="/2023/11/18/2023-11-18%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/18/2023-11-18%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java-8-新特性"><a href="#java-8-新特性" class="headerlink" title="java 8 新特性"></a>java 8 新特性</h4><h5 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h5><p>个人理解： 用目前存在的方法，构造器替代Lambda表达式的主体，使代码更简洁。</p><h5 id="链接：-https-www-cnblogs-com-xiaoxi-p-7099667-html"><a href="#链接：-https-www-cnblogs-com-xiaoxi-p-7099667-html" class="headerlink" title="链接： https://www.cnblogs.com/xiaoxi/p/7099667.html"></a>链接： <a href="https://www.cnblogs.com/xiaoxi/p/7099667.html">https://www.cnblogs.com/xiaoxi/p/7099667.html</a></h5><h5 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h5><p>个人理解： 为了添加接口方法，而不影响已经实现该接口的类。</p><h5 id="链接：https-segmentfault-com-a-1190000017433982"><a href="#链接：https-segmentfault-com-a-1190000017433982" class="headerlink" title="链接：https://segmentfault.com/a/1190000017433982"></a>链接：<a href="https://segmentfault.com/a/1190000017433982">https://segmentfault.com/a/1190000017433982</a></h5><h5 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h5><p>个人理解： 一个解决空指&gt;针异常的特殊类。</p><h5 id="链接"><a href="#链接" class="headerlink" title="链接 : &lt;https://juejin.cn/post/6844903960050925581"></a>链接 : &lt;<a href="https://juejin.cn/post/6844903960050925581">https://juejin.cn/post/6844903960050925581</a></h5><h5 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h5><p>个人理解： 为了便捷的处理集合元素。</p><h5 id="链接：https-juejin-cn-post-6844903830254010381"><a href="#链接：https-juejin-cn-post-6844903830254010381" class="headerlink" title="链接：https://juejin.cn/post/6844903830254010381"></a>链接：<a href="https://juejin.cn/post/6844903830254010381">https://juejin.cn/post/6844903830254010381</a></h5><h4 id="java零碎知识点"><a href="#java零碎知识点" class="headerlink" title="java零碎知识点"></a>java零碎知识点</h4><ul><li>继承其实是建立了一个查找机制，就近原则。</li><li>属性没有重写之说，看编译类型（引用类型）。</li><li>instanceof 是判断运行类型是否是某个类的类型或子类型。</li><li>当调用对象方法时，该方法会与该对象的运行类型绑定，属性没有动态绑定机制，哪里声明哪里使用。<ul><li>用人话说就是，调用方法时先从运行类型类中查看方法是否存在如果存在，直接调用，不存在从父类中查找，如果从父类中找到了该方法，并且该方法中还调用了另一个方法，此时跟之前一样，先从运行类中寻找方法，属性不是，哪里声明哪里使用。</li></ul></li><li>向上转型只能调用父类的方法，不能使用子类的特有方法，这就是为什么要向下转型。</li></ul><h4 id="IDEA断点调试"><a href="#IDEA断点调试" class="headerlink" title="IDEA断点调试"></a>IDEA断点调试</h4><ul><li><strong>F8</strong>执行下一条语句。</li><li><strong>F7</strong> 跳入方法内</li><li><strong>shift + F8</strong> 跳出方法</li><li><strong>F9</strong> 直接执行到下一个断点（resume）</li></ul><p>感悟： 看视频能get到新的点，多加练习，不要光看。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次完成六公里hh</title>
    <link href="/2023/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%88%90%E5%85%AD%E5%85%AC%E9%87%8Chh/"/>
    <url>/2023/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%88%90%E5%85%AD%E5%85%AC%E9%87%8Chh/</url>
    
    <content type="html"><![CDATA[<p>今天人生第一次完成六公里，跑步太爽了，感觉还不错，就是天气越来越冷了，风吹的牙有点疼hh，现在操场熄灯变早了，但还是有很多人跑步，氛围挺好的,洗个澡睡觉啦hh。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/4A6F42B9858CD44B30CF0A6AB5B639F1.jpg" alt="4A6F42B9858CD44B30CF0A6AB5B639F1"></p><p>跑步过程中，有个人突然从后面跟了上来，我带着他跑了，3公里左右，然后他就不跟了，感觉还是有个伙伴跑着有激情，虽然我们不认识。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/C72ABEA2FA2A120552398E7B01FFE618.jpg" alt="C72ABEA2FA2A120552398E7B01FFE618"></p><p>还有就是今天的月亮好低！！，跟楼肩并肩了。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/FD339069922865F1C7E9C671739A5811.jpg" alt="FD339069922865F1C7E9C671739A5811"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
      <category>运动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活记录</tag>
      
      <tag>运动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.17学习总结</title>
    <link href="/2023/11/16/2023-11-17%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/16/2023-11-17%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="Lambdal"><a href="#Lambdal" class="headerlink" title="Lambdal"></a>Lambdal</h4><h5 id="链接：-https-blog-csdn-net-weixin-40979518-article-details-118546367"><a href="#链接：-https-blog-csdn-net-weixin-40979518-article-details-118546367" class="headerlink" title="链接： https://blog.csdn.net/weixin_40979518/article/details/118546367"></a>链接： <a href="https://blog.csdn.net/weixin_40979518/article/details/118546367">https://blog.csdn.net/weixin_40979518/article/details/118546367</a></h5><h4 id="泛型类，-泛型接口"><a href="#泛型类，-泛型接口" class="headerlink" title="泛型类， 泛型接口"></a>泛型类， 泛型接口</h4><h5 id="链接-：-https-juejin-cn-post-6844903827343147021"><a href="#链接-：-https-juejin-cn-post-6844903827343147021" class="headerlink" title="链接 ： https://juejin.cn/post/6844903827343147021"></a>链接 ： <a href="https://juejin.cn/post/6844903827343147021">https://juejin.cn/post/6844903827343147021</a></h5><ul><li>泛型的类型参数只能是类类型，不能是简单类型。</li><li>不能对确切的泛型类型使用instanceof操作。如下面的操作是非法的，编译时会出错。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(ex_num <span class="hljs-keyword">instanceof</span> Generic&lt;Number&gt;)&#123;   &#125;</code></pre></div><h4 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h4><h5 id="链接-：https-www-runoob-com-java-java-multithreading-html"><a href="#链接-：https-www-runoob-com-java-java-multithreading-html" class="headerlink" title="链接 ：https://www.runoob.com/java/java-multithreading.html"></a>链接 ：<a href="https://www.runoob.com/java/java-multithreading.html">https://www.runoob.com/java/java-multithreading.html</a></h5><h5 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h5><ul><li>有三种方式新建线程<ul><li>类实现Runable 接口，实现run方法，实现Runable接口的类的对象，作为参数传入<code>new Thread()</code> ,启动线程使用<code>start()</code>方法，线程对象调用run方法。</li><li>类继承 Thread ，同实现Runable接口一样，重写run方法，创建一个对象，作为参数传入<code>new Thread()</code>,启动线程使用<code>start()</code>方法，线程对象调用run方法。</li><li>类实现 Callable接口， 实现call方法，call方法作为线程主体，并且有返回值，创建Callable对象，使用FutureTask类进行包装 ,该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。使用 FutureTask 对象作为 Thread 对象的 参数 创建并启动新线程。调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ul></li></ul><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><h5 id="个人理解-1"><a href="#个人理解-1" class="headerlink" title="个人理解"></a>个人理解</h5><ul><li>为了给方法，传入代码块，更灵活，更多变。</li><li>可以理解为，实现了类内接口方法，并实例化了一个对象，传给接口引用。</li><li>配合接口泛型，更加灵活。</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.16学习总结</title>
    <link href="/2023/11/16/2023-11-16%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/16/2023-11-16%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="Stack-笔记"><a href="#Stack-笔记" class="headerlink" title="Stack 笔记"></a>Stack 笔记</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;        Stack&lt;Integer&gt; s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();        Stack&lt;Integer&gt; s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();        s1.push(x);        s2.push(x);        <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> s1.peek();        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> s2.peek();        System.out.println(p1==p2);        System.out.println(s1.peek() == s2.peek());&#125;</code></pre></div><p>如果x在[-128, 127]，那么两次都会输出true；如果不是在这个范围，会输出true和false。</p><p>原因在于autobox，对于某些值，s1.push(x)会转化为s1.push(Integer.valueOf(x))，然后会利用cache的值，导致实例复用。翻译渣，请参考原解释： <a href="https://stackoverflow.com/questions/31156067/java-stack-peek-behavior">https://stackoverflow.com/questions/31156067/java-stack-peek-behavior</a></p><p>我的理解： 在[-128,127] 会缓存，不会直接构造对象，可能不对。</p><h4 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a>集合框架图</h4><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif"></p><h4 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h4><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/java-coll-2020-11-16.png"></p><h4 id="集合细节"><a href="#集合细节" class="headerlink" title="集合细节"></a>集合细节</h4><ul><li>任何对象加入集合类后，自动转变为Object类型，所以在取出的时候，需要进行强制类型转换。</li><li>集合框架的类和接口均在java.util包中。</li></ul><h4 id="ArrayList-和-LinkedList"><a href="#ArrayList-和-LinkedList" class="headerlink" title="ArrayList  和 LinkedList"></a>ArrayList  和 LinkedList</h4><ul><li><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><ul><li>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</li><li>ArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</li></ul></li><li><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><ul><li>LinkedList 继承了 AbstractSequentialList 类。</li><li>LinkedList 实现了 Queue 接口，可作为队列使用。</li><li>LinkedList 实现了 List 接口，可进行列表的相关操作。</li><li>LinkedList 实现了 Deque 接口，可作为队列使用。</li><li>LinkedList 实现了 Cloneable 接口，可实现克隆。</li><li>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</li><li>更多的情况下我们使用 ArrayList 访问列表中的随机元素更加高效，但以下几种情况 LinkedList 提供了更高效的方法。<ul><li>在列表开头添加元素：<code>addFirst</code></li><li>在列表结尾添加元素：<code>addLast</code></li><li>在列表开头移除元素：<code>removeFirst()</code></li><li>在列表结尾移除元素：<code>removeLast()</code></li><li>获取列表开头的元素：<code>getFirst()</code></li><li>获取列表结尾的元素：<code>getLast()</code></li></ul></li></ul></li><li><h5 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h5><ul><li><strong>以下情况使用 ArrayList :</strong><ul><li>频繁访问列表中的某一个元素。</li><li>只需要在列表末尾进行添加和删除元素操作。</li></ul></li><li><strong>以下情况使用 LinkedList :</strong><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul></li></ul></li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul><li>HashMap 是无序的，即不会记录插入的顺序。</li></ul><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><ul><li><p>使用迭代器遍历集合时，如果在遍历过程中对集合进行了修改（例如添加或删除元素），可能会导致 ConcurrentModificationException 异常，为了避免这个问题，可以使用迭代器自身的 <strong>remove()</strong> 方法进行删除操作。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 引入 ArrayList 和 Iterator 类</span><span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunoobTest</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        ArrayList&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();        numbers.add(<span class="hljs-number">12</span>);        numbers.add(<span class="hljs-number">8</span>);        numbers.add(<span class="hljs-number">2</span>);        numbers.add(<span class="hljs-number">23</span>);        Iterator&lt;Integer&gt; it = numbers.iterator();        <span class="hljs-keyword">while</span>(it.hasNext()) &#123;            <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> it.next();            <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">10</span>) &#123;                  it.remove();  <span class="hljs-comment">// 删除小于 10 的元素</span>            &#125;        &#125;        System.out.println(numbers);    &#125;&#125;</code></pre></div></li><li><p>Java 迭代器是一种单向遍历机制，即<strong>只能从前往后遍历</strong>集合中的元素，不能往回遍历。同时，在使用迭代器遍历集合时，<strong>不能直接修改集合中的元素</strong>，而是需要使用迭代器的 remove() 方法来删除当前元素。</p></li></ul><p>​     </p><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><ul><li><p><strong>java 中泛型标记符：</strong></p><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong> - 表示不确定的 java 类型</li></ul></li><li><p>下面的例子演示了如何使用泛型方法打印不同类型的数组元素：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericMethodTest</span>&#123;   <span class="hljs-comment">// 泛型方法 printArray                         </span>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt; E &gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">( E[] inputArray )</span>   &#123;      <span class="hljs-comment">// 输出数组元素            </span>         <span class="hljs-keyword">for</span> ( E element : inputArray )&#123;                    System.out.printf( <span class="hljs-string">&quot;%s &quot;</span>, element );         &#125;         System.out.println();    &#125;      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String args[] )</span>    &#123;        <span class="hljs-comment">// 创建不同类型数组： Integer, Double 和 Character</span>        Integer[] intArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;        Double[] doubleArray = &#123; <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span> &#125;;        Character[] charArray = &#123; <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span> &#125;;             System.out.println( <span class="hljs-string">&quot;整型数组元素为:&quot;</span> );        printArray( intArray  ); <span class="hljs-comment">// 传递一个整型数组</span>             System.out.println( <span class="hljs-string">&quot;\n双精度型数组元素为:&quot;</span> );        printArray( doubleArray ); <span class="hljs-comment">// 传递一个双精度型数组</span>             System.out.println( <span class="hljs-string">&quot;\n字符型数组元素为:&quot;</span> );        printArray( charArray ); <span class="hljs-comment">// 传递一个字符型数组</span>    &#125; &#125;</code></pre></div><ul><li>编译以上代码，运行结果如下所示：</li></ul></li></ul><div class="code-wrapper"><pre><code class="hljs java">整型数组元素为:<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> 双精度型数组元素为:<span class="hljs-number">1.1</span> <span class="hljs-number">2.2</span> <span class="hljs-number">3.3</span> <span class="hljs-number">4.4</span> 字符型数组元素为:H E L L O</code></pre></div><h4 id="泛型类以及通配符（？）"><a href="#泛型类以及通配符（？）" class="headerlink" title="泛型类以及通配符（？）"></a>泛型类以及通配符（？）</h4><h5 id="链接：https-www-runoob-com-java-java-generics-html"><a href="#链接：https-www-runoob-com-java-java-generics-html" class="headerlink" title="链接：https://www.runoob.com/java/java-generics.html"></a>链接：<a href="https://www.runoob.com/java/java-generics.html">https://www.runoob.com/java/java-generics.html</a></h5><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><h5 id="序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。"><a href="#序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。" class="headerlink" title="序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。"></a>序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。</h5><h5 id="链接：https-www-runoob-com-java-java-serialization-html"><a href="#链接：https-www-runoob-com-java-java-serialization-html" class="headerlink" title="链接：https://www.runoob.com/java/java-serialization.html"></a>链接：<a href="https://www.runoob.com/java/java-serialization.html">https://www.runoob.com/java/java-serialization.html</a></h5><h4 id="TCP——Socket"><a href="#TCP——Socket" class="headerlink" title="TCP——Socket"></a>TCP——Socket</h4><ul><li>服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。</li><li>服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。</li><li>服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。</li><li>Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。</li><li>在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 文件名 GreetingClient.java</span> <span class="hljs-comment">// args[0] 是命令行输入传入的第一个参数</span><span class="hljs-keyword">import</span> java.net.*;<span class="hljs-keyword">import</span> java.io.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingClient</span>&#123;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>   &#123;      <span class="hljs-type">String</span> <span class="hljs-variable">serverName</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];      <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">1</span>]);      <span class="hljs-keyword">try</span>      &#123;         System.out.println(<span class="hljs-string">&quot;连接到主机：&quot;</span> + serverName + <span class="hljs-string">&quot; ，端口号：&quot;</span> + port);         <span class="hljs-type">Socket</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(serverName, port);         System.out.println(<span class="hljs-string">&quot;远程主机地址：&quot;</span> + client.getRemoteSocketAddress());         <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outToServer</span> <span class="hljs-operator">=</span> client.getOutputStream();         <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(outToServer);          out.writeUTF(<span class="hljs-string">&quot;Hello from &quot;</span> + client.getLocalSocketAddress());         <span class="hljs-type">InputStream</span> <span class="hljs-variable">inFromServer</span> <span class="hljs-operator">=</span> client.getInputStream();         <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(inFromServer);         System.out.println(<span class="hljs-string">&quot;服务器响应： &quot;</span> + in.readUTF());         client.close();      &#125;<span class="hljs-keyword">catch</span>(IOException e)      &#123;         e.printStackTrace();      &#125;   &#125;&#125;</code></pre></div><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 文件名 GreetingServer.java</span> <span class="hljs-keyword">import</span> java.net.*;<span class="hljs-keyword">import</span> java.io.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingServer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;   <span class="hljs-keyword">private</span> ServerSocket serverSocket;      <span class="hljs-keyword">public</span> <span class="hljs-title function_">GreetingServer</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException   &#123;      serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(port);      serverSocket.setSoTimeout(<span class="hljs-number">10000</span>);   &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>   &#123;      <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)      &#123;         <span class="hljs-keyword">try</span>         &#123;            System.out.println(<span class="hljs-string">&quot;等待远程连接，端口号为：&quot;</span> + serverSocket.getLocalPort() + <span class="hljs-string">&quot;...&quot;</span>);            <span class="hljs-type">Socket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> serverSocket.accept();            System.out.println(<span class="hljs-string">&quot;远程主机地址：&quot;</span> + server.getRemoteSocketAddress());            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(server.getInputStream());            System.out.println(in.readUTF());            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(server.getOutputStream());            out.writeUTF(<span class="hljs-string">&quot;谢谢连接我：&quot;</span> + server.getLocalSocketAddress() + <span class="hljs-string">&quot;\nGoodbye!&quot;</span>);            server.close();         &#125;<span class="hljs-keyword">catch</span>(SocketTimeoutException s)         &#123;            System.out.println(<span class="hljs-string">&quot;Socket timed out!&quot;</span>);            <span class="hljs-keyword">break</span>;         &#125;<span class="hljs-keyword">catch</span>(IOException e)         &#123;            e.printStackTrace();            <span class="hljs-keyword">break</span>;         &#125;      &#125;   &#125;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>   &#123;      <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">0</span>]);      <span class="hljs-keyword">try</span>      &#123;         <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreetingServer</span>(port);         t.run();      &#125;<span class="hljs-keyword">catch</span>(IOException e)      &#123;         e.printStackTrace();      &#125;   &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机英语单词</title>
    <link href="/2023/11/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    <url>/2023/11/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs java">instantiated 实例化      Arithmetic 算数     execute 执行     scope 范围      param 参数</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>计算机英语单词积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机英语单词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.15学习总结--java基础</title>
    <link href="/2023/11/15/2023-11-15%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/15/2023-11-15%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="访问修饰符以及注意事项"><a href="#访问修饰符以及注意事项" class="headerlink" title="访问修饰符以及注意事项"></a>访问修饰符以及注意事项</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/access_modifier.png" alt="access_modifier"></p><h4 id="11-5日笔记——写工程细节"><a href="#11-5日笔记——写工程细节" class="headerlink" title="11.5日笔记——写工程细节"></a>11.5日笔记——写工程细节</h4><ul><li>写工程时 先实现基本功能，先把代码跑通，复杂功能，跑通后实现。</li><li>写接口函数的时候最好定义一个额外的变量，好习惯，很有用，info。</li><li>using namespace std;最好不要加，可能会导致其他人命名空间冲突。</li><li>写工程最好0 warning .size（) 是无符号整数，不会报warning int 会报warning</li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>构造器中可以写get ,set 方法，进行数据合法性判断。</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>在初始化子类的时候，必须先初始化父类，即在子类的构造器中默认调用父类的无参构造方法<ul><li>如果父类中没有默认的无参构造方法，则必须在子类中指定使用父类的哪种构造方法</li><li>必须在子类构造器的第一行代码初始化父类</li></ul></li></ul><h4 id="不懂概念汇总"><a href="#不懂概念汇总" class="headerlink" title="不懂概念汇总"></a>不懂概念汇总</h4><ul><li><p>类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常</p></li><li><p>最常用的继承接口是没有包含任何方法的接口。</p><ul><li><p>标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。</p></li><li><p>标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</p></li><li><div class="code-wrapper"><pre><code class="hljs">package java.util;public interface EventListener&#123;&#125;</code></pre></div></li><li><p>没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：</p><ul><li>建立一个公共的父接口：</li></ul><p>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p><ul><li><p>向一个类添加数据类型：</p><p>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p></li></ul></li></ul></li></ul><h4 id="今日小结"><a href="#今日小结" class="headerlink" title="今日小结"></a>今日小结</h4><p>主要是复习了java一些概念 类，继承，接口，文件，封装，重写，重载等概念。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023_11_14当日笔记及总结——java基础知识</title>
    <link href="/2023/11/14/2023-11-14%E5%BD%93%E6%97%A5%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/14/2023-11-14%E5%BD%93%E6%97%A5%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java文档注释"><a href="#java文档注释" class="headerlink" title="java文档注释"></a>java文档注释</h4><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p>程序的说明文档，以一整套网页文件形式体现</p><h5 id="基本格式："><a href="#基本格式：" class="headerlink" title="基本格式："></a>基本格式：</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * author 小明</span><span class="hljs-comment">   *version 1.0</span><span class="hljs-comment">   * ...</span><span class="hljs-comment">*/</span></code></pre></div><h5 id="生成文档命令："><a href="#生成文档命令：" class="headerlink" title="生成文档命令："></a>生成文档命令：</h5><div class="code-wrapper"><pre><code class="hljs java">javadoc -d d:\\...(要生成文档所要存的目录) -author -version test.java</code></pre></div><p>[1]: <a href="https://c.biancheng.net/view/6262.html">https://c.biancheng.net/view/6262.html</a>“文档注释详解”</p><h4 id="API-中文文档以及其他资料"><a href="#API-中文文档以及其他资料" class="headerlink" title="API 中文文档以及其他资料"></a>API 中文文档以及其他资料</h4><p>[2]: <a href="https://www.matools.com/">https://www.matools.com/</a>“API中文文档”</p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/Operator_priority.png" alt="运算符优先级"></p><h4 id="标识符命名规则与规范"><a href="#标识符命名规则与规范" class="headerlink" title="标识符命名规则与规范"></a>标识符命名规则与规范</h4><ol><li><p>包名包含多个字母时 小写 （aaa.bbb.ccc），com.公司名.项目名.业务模块名。</p><p>1.1 例如（<code>com.sina.crm.user //用户模块</code>)</p></li><li><p>类名，接口名，所有单词首字母大写（AaaBbbCcc)</p></li><li><p>变量名，方法名，第一个单词首字母小写，从第二个开始，首字母大写 （aaaBbbCcc)</p></li><li><p>常量名，所有字母大写，多个单词时 ，用下划线连接（AAA_BBB_CCC)</p></li></ol><h4 id="break-指定跳出的标签层（不到迫不得已不要用）"><a href="#break-指定跳出的标签层（不到迫不得已不要用）" class="headerlink" title="break 指定跳出的标签层（不到迫不得已不要用）"></a>break 指定跳出的标签层（不到迫不得已不要用）</h4><div class="code-wrapper"><pre><code class="hljs c++">lable1:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;lable2:   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++)&#123;   lable3:       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; cnt; k ++)&#123;          <span class="hljs-keyword">break</span> lable1;       &#125;   &#125;&#125;<span class="hljs-comment">//break 跳出指定的循环层;</span><span class="hljs-comment">//continue 与 break 类似</span></code></pre></div><h4 id="java零散知识点"><a href="#java零散知识点" class="headerlink" title="java零散知识点"></a>java零散知识点</h4><ol><li>局部变量不能加修饰符。</li><li>this指向对象本身， this 可以访问，属性，方法， 构造器。</li><li>this 只能在构造器中访问其他的构造器，并且代码必须写在第一行。</li></ol><h4 id="IDEA-快捷键设置"><a href="#IDEA-快捷键设置" class="headerlink" title="IDEA 快捷键设置"></a>IDEA 快捷键设置</h4><ul><li><p>删除当前行， Ctrl + d</p></li><li><p>复制当前行到下一行 ，alt + shift + 向下箭头</p></li><li><p>补全代码， alt + &#x2F;</p></li><li><p>导入该行需要的类&#x2F;抛出异常，alt + enter</p></li><li><p>快速格式化代码，Ctrl + alt + L</p></li><li><p>快速运行程序，alt + R</p></li><li><p>生成构造器，alt + insert</p></li><li><p>查看类的层级关系 ，Ctrl + H</p></li><li><p>查看方法再哪个类中， Ctrl + B</p></li><li><p>自动分配变量名， 在new类的后边加<code>.var //例如：(new Scanner(System.in)).var</code></p></li><li><p>添加if try catch … ctrl + alt + t;</p></li><li><p>回到上次一代码位置，追代码的时候使用，shift + S，向前追是 shift + F</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
