<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2020idea新建javaweb项目</title>
    <link href="/2023/12/28/2020idea%E6%96%B0%E5%BB%BAjavaweb%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/12/28/2020idea%E6%96%B0%E5%BB%BAjavaweb%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="从头开始系列一——idea创建一个JavaWeb项目"><a href="#从头开始系列一——idea创建一个JavaWeb项目" class="headerlink" title="从头开始系列一——idea创建一个JavaWeb项目"></a>从头开始系列一——idea创建一个JavaWeb项目</h1><p><a href="https://juejin.cn/user/2752832844861191/posts">浪里个浪白条</a></p><p>2022-10-11122阅读2分钟</p><p>专栏： </p><p>入门系列</p><blockquote><p>以下内容亲自调试可执行，便于初学者入门java后端开发。如有疑问请评论，我会尽我所能解答。</p></blockquote><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a><strong>前提</strong></h3><p>java环境以及tomcat已安装</p><p>IDEA创建Web项目</p><p>此处以Idea 2020.3举例</p><h2 id="1、新建普通Java项目"><a href="#1、新建普通Java项目" class="headerlink" title="1、新建普通Java项目"></a>1、新建普通Java项目</h2><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/685a48e64f244868a18cfef8a6844698~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="1.png"></p><p><em>注意：Idea2020无法直接新建JavaWeb项目，只能通过新建普通Java项目的方式间接新建JavaWeb项目。</em></p><p>选择项目位置和普通Java项目相同，此处略过。</p><h2 id="2、修改普通Java项目为JavaWeb项目"><a href="#2、修改普通Java项目为JavaWeb项目" class="headerlink" title="2、修改普通Java项目为JavaWeb项目"></a>2、修改普通Java项目为JavaWeb项目</h2><p>项目根目录-&gt;右键-&gt;Add Framework Support</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/4f300e41a5044a1b82ca2eaa242bbb32~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="2.png"></p><p>选择JavaEE版本</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/a1164a868efb4fd794fe464ccb77691f~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="3.png"></p><p>勾选左侧的Web Application</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/ba7721117c8046c0bd5781e2d400d58d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="4.png"></p><p>完成之后，可以看到项目下新建了web目录，并包含如下内容。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/a3dcd3e0d8ed4bd48ec6c14688d481b8~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="5.png"></p><p>添加相关依赖File-&gt;Project Structure</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/95c3a4cd086e412c933e49388a4375b6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="6.png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/e388ee22cc134d86b882a56cbde41741~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="7.png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/a1ba445d2b1240d382d05f32c03b6d58~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="8.png"></p><p>执行上述操作之后，Tomcat相关Jar包就添加到了项目中，不添加后续很多开发无法进行。</p><h2 id="3、项目部署"><a href="#3、项目部署" class="headerlink" title="3、项目部署"></a>3、项目部署</h2><p>此处指的是将Idea中开发的Web项目在Tomcat中部署。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/57f29984399f480282d37ace66c8dc0d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="9.png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/62c804d727104d91aad67cc9e21f0a8e~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="10.png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/cc07576427104ad18f66de59d6f2ad3b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="11.png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/b542590519094ef69affa4568e90bb9b~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="12.png"></p><p>现在已经完成了</p><p>4、项目运行</p><p>单击运行按钮，运行项目，默认会在浏览器中打开index.jsp</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/791b2673902a4ce1b2cf525c1ddfd843~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="13.png"></p><p>在以后的开发中，多数时候都是重复上述步骤进行JavaWeb项目的开发</p><h6 id="以上，就是使用idea创建一个Javaweb项目的步骤。"><a href="#以上，就是使用idea创建一个Javaweb项目的步骤。" class="headerlink" title="以上，就是使用idea创建一个Javaweb项目的步骤。"></a>以上，就是使用idea创建一个Javaweb项目的步骤。</h6><h6 id="以下，是项目操作相关的方法："><a href="#以下，是项目操作相关的方法：" class="headerlink" title="以下，是项目操作相关的方法："></a>以下，是项目操作相关的方法：</h6><h2 id="5、关联第三方Jar包"><a href="#5、关联第三方Jar包" class="headerlink" title="5、关联第三方Jar包"></a>5、关联第三方Jar包</h2><ol><li>在项目WEB-INF目录下新建lib目录；</li><li>将第三方Jar包（例如：MySQL驱动Jar包，druid连接池Jar包）拷贝到lib目录下；</li><li>在lib上右键Add as Library；</li><li>选择Project Library，完成</li></ol><ul><li>Global Library表示所有工程都可以使用</li><li>Project Library表示当前工程中所有模块都可以使用</li><li>Module Library表示当前模块可以使用</li></ul><h2 id="6、导出war包"><a href="#6、导出war包" class="headerlink" title="6、导出war包"></a>6、导出war包</h2><p>项目完成后，有时候需要打成war方便部署。war包可以直接放入Tomcat的webapps目录中，启动Tomcat后自动解压，即可访问。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/c9892618cd9c41b899330088abf60f97~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="14.png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/2a53539f1b3642e2bf3eb738ea7f3355~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="15.png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/b9fbf3ff92e548b0acac5d2bb0c566ca~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="16.png"></p><p>执行上述操作，后在项目根目录下生成out目录，内部包含的war包就是我们需要的war包。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/b7fdd8070260447cb1e8d8f3d9f40ad3~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="17.png"></p><p>将该war包拷贝到tomcat的webapps目录下，双击运行startup.bat，tomcat会自动解压该war包并发布项目，发布之后我们就可以访问。</p>]]></content>
    
    
    <categories>
      
      <category>项目环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构特点题单</title>
    <link href="/2023/12/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9/"/>
    <url>/2023/12/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%89%B9%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="特殊数据结构特点题目列表"><a href="#特殊数据结构特点题目列表" class="headerlink" title="特殊数据结构特点题目列表"></a>特殊数据结构特点题目列表</h4><p><em>二维数组，值，<strong>行递增</strong>，<strong>列递增</strong>，<strong>查找</strong>某个数，应该从<strong>右上角</strong>，或<strong>左下角</strong>开始找。</em></p><p><a href="https://leetcode.cn/problems/search-a-2d-matrix-ii/">https://leetcode.cn/problems/search-a-2d-matrix-ii/</a></p><p>给定一个包含 <code>n + 1</code> 个整数的数组 <code>nums</code> ，其数字都在 <code>[1, n]</code> 范围内（包括 <code>1</code> 和 <code>n</code>），可知至少存在一个重复的整数。</p><p>假设 <code>nums</code> 只有 <strong>一个重复的整数</strong> ，返回 <strong>这个重复的数</strong> 。</p><p>你设计的解决方案必须 <strong>不修改</strong> 数组 <code>nums</code> 且只用常量级 <code>O(1)</code> 的额外空间。</p><p><strong>这种数组结构满足一种二段性</strong>：</p><p><em>我们定义 <strong>cnt[i]</strong> 表示 nums 数组中*<em>小于等于</em></em>  <strong>i</strong> 的数有多少个，假设我们重复的数是 target，那么 <strong>[1,target−1]<strong>里的所有数满足 <strong>cnt[i]≤i</strong>，</strong>[target,n]</strong> 里的所有数满足 <strong>cnt[i]&gt;i</strong>，具有单调性。*</p><p><a href="https://leetcode.cn/problems/find-the-duplicate-number/description/">https://leetcode.cn/problems/find-the-duplicate-number/description/</a></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
      <category>题单</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二分方法总结</title>
    <link href="/2023/12/25/%E4%BA%8C%E5%88%86%E5%86%99%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/25/%E4%BA%8C%E5%88%86%E5%86%99%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h4><ul><li><p>找到从左向右满足条件的第一个答案</p></li><li><p>check为一定不对的条件</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">int</span> l = <span class="hljs-number">0</span> , r = n - <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(l &lt; r)&#123;    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>()) l = mid + <span class="hljs-number">1</span>;    <span class="hljs-keyword">else</span> r = mid;&#125;</code></pre></div></li><li><p>找到从右向左满足条件的第一个答案</p></li><li><p>check为一定不对的条件</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">int</span> l = <span class="hljs-number">0</span> , r = n - <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(l &lt; r)&#123;    <span class="hljs-type">int</span> mid = l + r + <span class="hljs-number">1</span> &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>()) r = mid - <span class="hljs-number">1</span>;    <span class="hljs-keyword">else</span> l = mid;&#125;</code></pre></div><p><strong>上述方法的缺点是边界处理太麻烦，当结果是0的时候，不知道第一个元素是满足条件的还是不满足条件，因为边界是0，n - 1同理，是边界，需要特判</strong></p></li></ul><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><ul><li><p>找到从从左向右满足条件的第一个答案</p></li><li><p>check为一定不对的条件</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">int</span> l = <span class="hljs-number">0</span> , r = n - <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(l &lt;= r)&#123;    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>()) l = mid + <span class="hljs-number">1</span>;    <span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">//与从右向左类似，就是用l来判断边界和答案。</span></code></pre></div></li><li><p>找到从右向左满足条件的第一个答案</p></li><li><p>check为一定不对的条件</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-type">int</span> l = <span class="hljs-number">0</span> , r = n - <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span>(l &lt;= r)&#123;    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">check</span>()) r = mid - <span class="hljs-number">1</span>;    <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">//我们来分析一下边界</span><span class="hljs-comment">//1.首先如果数组中存在满足条件的元素或者在在数组范围之内</span><span class="hljs-comment">//r指向的元素可能是会满足条件的元素，具体是不是要找到的元素要特判，为什么呢，如果l一直满足，l一直加一，直到l不满足了，r就开始减一，直到r &lt; l为止，</span><span class="hljs-comment">//此时r指向的元素是从右向左第一个可能满足条件的元素，因为此时l指向的元素是第一个不满足条件的元素，它的左侧肯定是第一个可能满足条件的元素（从右向左的）</span><span class="hljs-comment">//2.左边界</span><span class="hljs-comment">//如果所有的元素都不满足条件，那么l指针不会动，r会一直减一，直到r = -1为止。</span><span class="hljs-comment">//所以左边界很好判断只要判断r 是否等于 -1 即可，相等 则 找不到满足条件的元素</span><span class="hljs-comment">//3.右边界</span><span class="hljs-comment">//右边界需要特判一下，如果所有的元素都可能是目标元素，那么l就会一直加一，直到l = n结束，此时 r = n -1;</span><span class="hljs-comment">//此时r指针所指向的元素可能是满足条件的也可能是不满足条件的。</span></code></pre></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
      <category>方法总结个人理解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分题目</title>
    <link href="/2023/12/24/%E4%BA%8C%E5%88%86%E9%A2%98%E7%9B%AE/"/>
    <url>/2023/12/24/%E4%BA%8C%E5%88%86%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h4 id="二分题单"><a href="#二分题单" class="headerlink" title="二分题单"></a>二分题单</h4><p>中位数，二分，两个数组第k个数<a href="https://leetcode.cn/problems/median-of-two-sorted-arrays/">https://leetcode.cn/problems/median-of-two-sorted-arrays/</a></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
      <category>题单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分题目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线性DP</title>
    <link href="/2023/12/23/%E7%BA%BF%E6%80%A7DP/"/>
    <url>/2023/12/23/%E7%BA%BF%E6%80%A7DP/</url>
    
    <content type="html"><![CDATA[<h4 id="线性DP"><a href="#线性DP" class="headerlink" title="线性DP"></a>线性DP</h4><p>正则表达式 <a href="https://leetcode.cn/problems/regular-expression-matching/">https://leetcode.cn/problems/regular-expression-matching/</a></p>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
      <category>题单</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>iota函数</title>
    <link href="/2023/12/21/iota%E5%87%BD%E6%95%B0/"/>
    <url>/2023/12/21/iota%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//以一个递增数列给一个容器赋值</span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;numeric&gt;</span></span><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums) &#123;        std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;    &#125;    std::cout &lt;&lt; std::endl;    std::<span class="hljs-built_in">iota</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), <span class="hljs-number">5</span>); <span class="hljs-comment">// fill nums with 5, 6, 7, 8...</span>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums) &#123;        std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;    &#125;    std::cout &lt;&lt; std::endl;    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iota函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组进行降序排序如何获得排序后的下标序列</title>
    <link href="/2023/12/21/%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E9%99%8D%E5%BA%8F%E6%8E%92%E5%BA%8F%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9A%84%E4%B8%8B%E6%A0%87%E5%BA%8F%E5%88%97/"/>
    <url>/2023/12/21/%E6%95%B0%E7%BB%84%E8%BF%9B%E8%A1%8C%E9%99%8D%E5%BA%8F%E6%8E%92%E5%BA%8F%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E6%8E%92%E5%BA%8F%E5%90%8E%E7%9A%84%E4%B8%8B%E6%A0%87%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span>, <span class="hljs-title">b</span><span class="hljs-params">(n)</span>, <span class="hljs-title">c</span><span class="hljs-params">(n)</span></span>;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;        std::cin &gt;&gt; a[i];    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;        std::cin &gt;&gt; b[i];    &#125;    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;        std::cin &gt;&gt; c[i];    &#125;        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pa</span><span class="hljs-params">(n)</span>, <span class="hljs-title">pb</span><span class="hljs-params">(n)</span>, <span class="hljs-title">pc</span><span class="hljs-params">(n)</span></span>;    std::<span class="hljs-built_in">iota</span>(pa.<span class="hljs-built_in">begin</span>(), pa.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);    std::<span class="hljs-built_in">iota</span>(pb.<span class="hljs-built_in">begin</span>(), pb.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);    std::<span class="hljs-built_in">iota</span>(pc.<span class="hljs-built_in">begin</span>(), pc.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);    std::<span class="hljs-built_in">sort</span>(pa.<span class="hljs-built_in">begin</span>(), pa.<span class="hljs-built_in">end</span>(),        [&amp;](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) &#123;            <span class="hljs-keyword">return</span> a[i] &gt; a[j];        &#125;);    std::<span class="hljs-built_in">sort</span>(pb.<span class="hljs-built_in">begin</span>(), pb.<span class="hljs-built_in">end</span>(),        [&amp;](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) &#123;            <span class="hljs-keyword">return</span> b[i] &gt; b[j];        &#125;);    std::<span class="hljs-built_in">sort</span>(pc.<span class="hljs-built_in">begin</span>(), pc.<span class="hljs-built_in">end</span>(),        [&amp;](<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j) &#123;            <span class="hljs-keyword">return</span> c[i] &gt; c[j];        &#125;);<span class="hljs-comment">//pa pb pc 就是排序后的下标序列</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>刷题</category>
      
      <category>做题技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>做题技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sort函数自定义排序匿名函数</title>
    <link href="/2023/12/21/sort%E5%87%BD%E6%95%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/"/>
    <url>/2023/12/21/sort%E5%87%BD%E6%95%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="sort函数的介绍"><a href="#sort函数的介绍" class="headerlink" title="sort函数的介绍"></a>sort函数的介绍</h4><p>sort()函数位于<algorithm>头文件中，大概是最常用的泛型算法之一了。顾名思义，这是用来排序的函数。它的一般形式为sort(iterator first,iterator last)，将[first,last)中的元素按升序排列。由于容器支持的迭代器类型必须为随机访问迭代器，sort() 只支持array、vector、deque 这 3 个容器。</p><p>应该说，大部分情况下，选择sort()函数进行排序是简单且高效的。sort对普通的快速排序进行了优化，并结合了插入排序和堆排序。根据不同的数量级别以及不同情况，能自动选用合适的排序方法。它的时间复杂度是O(N*log2N)。这比随便写一个O(N^2)的冒泡排序好太多了。也避免了手写快排的麻烦。</p><h4 id="自定义排序方法"><a href="#自定义排序方法" class="headerlink" title="自定义排序方法"></a>自定义排序方法</h4><p>sort()默认是升序的，那么，如果我们希望降序排列，或者是按绝对值大小排列，或者是其他各种各样的排序方式，又该怎么办呢？为此，sort()提供了第二个版本sort(iterator first,iterator last,cmp)。很多泛型算法都允许重载它的操作符，而sort()的操作符就是&lt;，或者，更通俗地说，就是排在前面。也就是说，我们可以自定义排在前面的判断方式。具体方法是利用这样一个函数：bool cmp(auto &amp;a,auto &amp;b){…}，如果返回true，就代表a应该排在b前面，否则是b在a前，然后sort就根据我们定义的比较方式进行排列。例如，如果我们希望降序排列，就返回a&gt;b即可。</p><p>举个例子：加入我们希望按照元素的绝对值排序，可以这么写</p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">4</span><span class="hljs-number">5</span><span class="hljs-number">6</span><span class="hljs-number">7</span><span class="hljs-number">8</span><span class="hljs-number">9</span><span class="hljs-number">10</span><span class="hljs-number">11</span><span class="hljs-number">12</span><span class="hljs-number">13</span><span class="hljs-number">14</span><span class="hljs-number">15</span><span class="hljs-number">16</span><span class="hljs-number">17</span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><span class="hljs-comment">//按绝对值升序排列的比较函数</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(a)&lt;<span class="hljs-built_in">abs</span>(b);&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    vector&lt;<span class="hljs-type">int</span>&gt; nums;    <span class="hljs-type">int</span> n;    <span class="hljs-keyword">while</span>(cin&gt;&gt;n) nums.<span class="hljs-built_in">push_back</span>(n);    <span class="hljs-built_in">sort</span>(nums.<span class="hljs-built_in">begin</span>(),nums.<span class="hljs-built_in">end</span>(),cmp);<span class="hljs-comment">//自定义的排序方式</span>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:nums) cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//输入：1 2 3 -4 -7 -3 5 -8 6，输出：1 2 3 -3 -4 5 6 -7 -8</span></code></pre></div><p>这样，每次排序都要在外面定义一个cmp函数，然后在排序时调用它。然而，这是有缺陷的。一来，不直观，我们阅读代码时，只看到一个cmp，还要到外面去找它，如果排序次数很多，这么多函数很容易混淆。不过，更致命的是，这样定义的函数只能接受两个参数，就是比较的双方。试想一下，假如我们要根据b数组中元素的大小，来对a数组进行排序，那该怎么办呢？只好把b变成全局的，不但麻烦，而且可能无法操作。</p><h4 id="使用lambda函数代替cmp"><a href="#使用lambda函数代替cmp" class="headerlink" title="使用lambda函数代替cmp"></a>使用lambda函数代替cmp</h4><p>从这两个方面，可以看出lambda表达式的优越性了。它的结构是这样的：<code>[capture list](parameter list) -&gt;return type &#123;function body&#125;</code>其中，parameter list(参数列表)和function body(函数体)与上面的cmp函数没有什么差异。return type虽说必须尾置，但通常可以省略。而capture list(捕获列表)中可以填写作用域中的参数，使它在lambda表达式内部可见。这就解决了上面的第二个问题。比如说，我们要捕获b数组，就写成[&amp;b]即可(&amp;代表引用捕获)，也就是说捕获列表使lambda表达式可以使用不限量的外部参数，当然，如果不想指定捕获哪些，直接写[&amp;]，就是全部引用捕获。同时，哪里用到，就写在哪里，还不用起名字(所以也叫匿名函数)，使它既直观又方便。</p><p><strong>例如：我们根据flag数组中的元素大小，来对index数组(index对应着flag的下标)进行排序，可以这么写</strong></p><div class="code-wrapper"><pre><code class="hljs c++"><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-number">4</span><span class="hljs-number">5</span><span class="hljs-number">6</span><span class="hljs-number">7</span><span class="hljs-number">8</span><span class="hljs-number">9</span><span class="hljs-number">10</span><span class="hljs-number">11</span><span class="hljs-number">12</span><span class="hljs-number">13</span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span></span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;    vector&lt;<span class="hljs-type">int</span>&gt; flag  = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">6</span>&#125;;    vector&lt;<span class="hljs-type">int</span>&gt; index = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;    <span class="hljs-built_in">sort</span>(index.<span class="hljs-built_in">begin</span>(),index.<span class="hljs-built_in">end</span>(),[&amp;flag](<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;<span class="hljs-keyword">return</span> flag[a]&lt;flag[b];&#125;);    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:index)        cout&lt;&lt;i&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//输出：4 0 1 3 2 8 6 5 7</span></code></pre></div><p>力扣857题的排序，就用到了这种方法。</p><p>最后，再列举几种常见的排序方式和使用它们的题目。</p><p>1.按照string的长度对string序列排序</p><p>sort(vec.begin(),vec.end(),[](auto &amp;s1,auto &amp;s2){return s.size()&lt;s2.size();});</p><p>在648. 单词替换 - 力扣中使用到了。</p><p>2.按照pair的second大小降序排序，如果相同再按first升序排序</p><p>sort(vec.begin(),vec.end(),[](auto &amp;p1,auto &amp;p2){return p1.second&#x3D;&#x3D;p2.second?p1.first<a href="p2.first:p1.second">p2.first:p1.second</a>p2.second;})</p><p>这种排序方法常见于利用哈希表统计词频后的排序过程。</p><p>在1636. 按照频率将数组升序排序和451. 根据字符出现频率排序中使用了类似的排序方法。</p><p>lambda表达式当然不仅仅可以用在排序里，剩下的用法可以慢慢去发掘😂。</p><p>作者: HeRen<br>链接: <a href="https://www.heren1229.top/posts/8454/">https://www.heren1229.top/posts/8454/</a><br>来源: HeRen’s Blog</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sort函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb:Listener和gdbc和数据库连接池和DBUtil工具</title>
    <link href="/2023/12/18/JavaWeb-Listener%E5%92%8Cgdbc%E8%BF%9E%E6%8E%A5%E6%B1%A0-2023-12-18/"/>
    <url>/2023/12/18/JavaWeb-Listener%E5%92%8Cgdbc%E8%BF%9E%E6%8E%A5%E6%B1%A0-2023-12-18/</url>
    
    <content type="html"><![CDATA[<h4 id="Listener监听器"><a href="#Listener监听器" class="headerlink" title="Listener监听器"></a>Listener监听器</h4><ul><li><p>在程序开发中，经常需要对某些事件进行监听，如监听鼠标单击事件、监听键盘按下事件等，此时就需要使用监听器，监听器在监听的过程中会涉及几个重要组成部分，具体如下。</p><p>（1）事件（Event）：用户的一个操作，如单击一个按钮、调用一个方法、创建一个对象等。</p><p>（2）事件源：产生事件的对象。</p><p>（3）事件监听器（Listener）：负责监听发生在事件源上的事件。</p><p>（4）事件处理器：监听器的成员方法，当事件发生的时候会触发对应的处理器（成员方法）。</p></li><li><p>在开发Web应用程序时，也经常会使用监听器，这个监听器也被称为Servlet事件监听器。Servlet事件监听器就是一个实现了特定接口的Java程序，专门用于监听Web应用程序中ServletContext、HttpSession和ServletRequest等域对象的创建和销毁过程，监听这些域对象属性的修改以及感知绑定到HttpSession域中某个对象的状态。</p></li><li></li></ul><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/image-20231218191201669.png" alt="image-20231218191201669"></p><p>上表中列举了全部8种Servlet事件监听器，并对它们分别进行了简单地描述。在描述HttpSessionActivationListener时涉及到了活化和钝化的概念， HttpSession对象从内存中转移至硬盘的过程称为钝化，HttpSession对象从持久化的状态变为运行状态的过程被称为活化。</p><ul><li><p>上述监听器根据监听事件的不同可以将其分为三类，具体如下。</p><p>（1）用于监听域对象创建和销毁的事件监听器（ServletContextListener接口、HttpSessionListener接口、ServletRequestListener接口）。</p><p>（2）用于监听域对象属性增加和删除的事件监听器（ServletContextAttributeListener接口、HttpSessionAttributeListener接口、ServletRequestAttributeListener接口）。</p><p>（3）用于监听绑定到HttpSession域中某个对象状态的事件监听器（HttpSessionBindingListener接口、HttpSessionActivationListener接口）。</p><p>在Servlet规范中，这三类事件监听器都定义了相应的接口，在编写事件监听器程序时只需实现对应的接口就可以。Web服务器会根据监听器所实现的接口，把它注册到被监听的对象上，当触发了某个对象的监听事件时，Web容器将会调用Servlet监听器与之相关的方法对事件进行处理。</p></li></ul><div class="code-wrapper"><pre><code class="hljs java">&lt;h3&gt;这是一个测试对象属性信息监听器的页面&lt;/h3&gt;&lt;%getServletContext().setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;hevttc&quot;</span>);getServletContext().setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;shuxin&quot;</span>);getServletContext().removeAttribute(<span class="hljs-string">&quot;username&quot;</span>);session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;hevttc&quot;</span>);session.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;shuxin&quot;</span>);session.removeAttribute(<span class="hljs-string">&quot;username&quot;</span>);request.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;hevttc&quot;</span>);request.setAttribute(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;shuxin&quot;</span>);request.removeAttribute(<span class="hljs-string">&quot;username&quot;</span>);%&gt;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebListener</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextListener</span>, HttpSessionListener, ServletRequestListener &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionCreated</span><span class="hljs-params">(HttpSessionEvent se)</span>  &#123;         System.out.println(<span class="hljs-string">&quot;HttpSession对象被创建了！&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestDestroyed</span><span class="hljs-params">(ServletRequestEvent sre)</span>  &#123;         System.out.println(<span class="hljs-string">&quot;ServletRequest对象被销毁了！&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">requestInitialized</span><span class="hljs-params">(ServletRequestEvent sre)</span>  &#123;     System.out.println(<span class="hljs-string">&quot;ServletRequest对象被创建了！&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent se)</span>  &#123;     System.out.println(<span class="hljs-string">&quot;HttpSession对象被销毁了！&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextDestroyed</span><span class="hljs-params">(ServletContextEvent sce)</span>  &#123;     System.out.println(<span class="hljs-string">&quot;ServletContext对象被销毁了！&quot;</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">contextInitialized</span><span class="hljs-params">(ServletContextEvent sce)</span>  &#123;     System.out.println(<span class="hljs-string">&quot;ServletContext对象被创建了！&quot;</span>);    &#125;    &#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAttributeListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ServletContextAttributeListener</span>,HttpSessionAttributeListener, ServletRequestAttributeListener &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeAdded</span><span class="hljs-params">(ServletContextAttributeEvent sae)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sae.getName();        System.out.println(<span class="hljs-string">&quot;ServletContext添加属性：&quot;</span> + name + <span class="hljs-string">&quot;=&quot;</span>        + sae.getServletContext().getAttribute(name));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeRemoved</span><span class="hljs-params">(ServletContextAttributeEvent sae)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sae.getName();        System.out.println(<span class="hljs-string">&quot;ServletContext移除属性: &quot;</span> + name);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeReplaced</span><span class="hljs-params">(ServletContextAttributeEvent sae)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sae.getName();        System.out.println(<span class="hljs-string">&quot;ServletContext替换属性：&quot;</span> + name + <span class="hljs-string">&quot;=&quot;</span>        + sae.getServletContext().getAttribute(name));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeAdded</span><span class="hljs-params">(HttpSessionBindingEvent hbe)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> hbe.getName();        System.out.println(<span class="hljs-string">&quot;HttpSession添加属性：&quot;</span> + name + <span class="hljs-string">&quot;=&quot;</span>        + hbe.getSession().getAttribute(name));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeRemoved</span><span class="hljs-params">(HttpSessionBindingEvent hbe)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> hbe.getName();        System.out.println(<span class="hljs-string">&quot;HttpSession移除属性: &quot;</span> + name);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeReplaced</span><span class="hljs-params">(HttpSessionBindingEvent hbe)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> hbe.getName();        System.out.println(<span class="hljs-string">&quot;HttpSession替换属性：&quot;</span> + name + <span class="hljs-string">&quot;=&quot;</span>        + hbe.getSession().getAttribute(name));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeAdded</span><span class="hljs-params">(ServletRequestAttributeEvent sra)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sra.getName();        System.out.println(<span class="hljs-string">&quot;ServletRequest添加属性：&quot;</span> + name + <span class="hljs-string">&quot;=&quot;</span>        + sra.getServletRequest().getAttribute(name));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeRemoved</span><span class="hljs-params">(ServletRequestAttributeEvent sra)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sra.getName();        System.out.println(<span class="hljs-string">&quot;ServletRequest移除属性: &quot;</span> + name);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attributeReplaced</span><span class="hljs-params">(ServletRequestAttributeEvent sra)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sra.getName();        System.out.println(<span class="hljs-string">&quot;ServletRequest替换属性：&quot;</span> + name + <span class="hljs-string">&quot;=&quot;</span>        + sra.getServletRequest().getAttribute(name));    &#125;&#125;</code></pre></div><h4 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h4><ul><li><p>什么是jdbc<br>JDBC的全称是Java数据库连接（Java Database Connectivity），它是一套用于执行SQL语句的Java API。应用程序可通过这套API连接到关系型数据库，并使用SQL语句来完成对数据库中数据的查询、更新、新增和删除的操作。</p><p>不同种类的数据库（如MySQL、Oracle等）在其内部处理数据的方式是不同的，如果直接使用数据库厂商提供的访问接口操作数据库，应用程序的可移植性就会变得很差。例如，用户当前在程序中使用的是MySQL提供的接口操作数据库，如果换成Oracle数据库，则需要重新使用Oracle数据库提供的接口，这样代码的改动量会非常大。有了JDBC后，这种情况就不复存在了，因为它要求各个数据库厂商按照统一的规范来提供数据库驱动，而在程序中是由JDBC和具体的数据库驱动联系，所以用户就不必直接与底层的数据库交互，这使得代码的通用性更强。</p></li><li><p>Driver接口</p><p>Driver接口是所有JDBC驱动程序必须实现的接口，该接口专门提供给数据库厂商使用。需要注意的是，在编写JDBC程序时，必须要把所使用的数据库驱动程序或类库加载到项目的classpath中（这里指MySQL驱动JAR包）。</p></li><li><p>DriverManager类</p><p>DriverManager类用于加载JDBC驱动并且创建与数据库的连接。在DriverManager类中，定义了两个比较重要的静态方法，如下表所示。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/image-20231218192432616.png" alt="image-20231218192432616"></p></li><li><p>Connection接口</p><p>Connection接口代表Java程序和数据库的连接，只有获得该连接对象后才能访问数据库，并操作数据表。在Connection接口中，定义了一系列方法，其常用方法如下表所示。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/image-20231218192551005.png" alt="image-20231218192551005"></p></li><li><p>Statement接口</p><p>Statement接口用于执行静态的SQL语句，并返回一个结果对象，该接口的对象通过Connection实例的createStatement()方法获得。利用该对象把静态的SQL语句发送到数据库编译执行，然后返回数据库的处理结果。在Statement接口中，提供了3个常用的执行SQL语句的方法，具体如下表所示。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/image-20231218192705015.png" alt="image-20231218192705015"></p></li><li><p>PreparedStatement接口</p><p>Statement接口封装了JDBC执行SQL语句的方法，可以完成Java程序执行SQL语句的操作。然而在实际开发过程中往往需要将程序中的变量作为SQL语句的查询条件，而使用Statement接口操作这些SQL语句会过于繁琐，并且存在安全方面的问题。针对这一问题，JDBC API 中提供了扩展的PreparedStatement接口。</p><p>PreparedStatement是Statement的子接口，用于执行预编译的SQL语句。该接口扩展了带有参数SQL语句的执行操作，应用该接口中的SQL语句可以使用占位符“?”来代替其参数，然后通过setXxx()方法为SQL语句的参数赋值。在PreparedStatement接口中，提供了一些常用方法，具体如下表所示。</p><p>需要注意的是，表中的setDate()方法可以设置日期内容，但参数Date的类型是java.sql.Date，而不是java.util.Date。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/image-20231218192916647.png" alt="image-20231218192916647">··</p><p>SQL语句的执行是通过Statement对象实现的。Statement对象每次执行SQL语句时，都会对其进行编译。当相同的SQL语句执行多次时，Statement对象就会使数据库频繁编译相同的SQL语句，从而降低数据库的访问效率。</p><p>为了解决上述问题，Statement提供了一个子类PreparedStatement。PreparedStatement对象可以对SQL语句进行预编译，预编译的信息会存储在PreparedStatement对象中。当相同的SQL语句再次执行时，程序会使用PreparedStatement对象中的数据，而不需要对SQL语句再次编译去查询数据库，这样就大大的提高了数据的访问效率。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example02</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;Connection conn=<span class="hljs-literal">null</span>;PreparedStatement ps=<span class="hljs-literal">null</span>;<span class="hljs-keyword">try</span> &#123;    Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);    String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>;    conn=DriverManager.getConnection(url,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);    String sql=<span class="hljs-string">&quot;insert into users values(null,?,?,?,?)&quot;</span>;    ps=conn.prepareStatement(sql);    ps.setString(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;zhaoliu&quot;</span>);    ps.setString(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;123&quot;</span>);    ps.setString(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;zhaoliu@126.com&quot;</span>);    ps.setString(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;1999-1-2&quot;</span>);    ps.executeUpdate();    ps.close();    conn.close();&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125;&#125;&#125;</code></pre></div></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example01</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;Connection conn=<span class="hljs-literal">null</span>;Statement stmt=<span class="hljs-literal">null</span>;ResultSet rs=<span class="hljs-literal">null</span>;<span class="hljs-keyword">try</span> &#123;    <span class="hljs-comment">//1.加载数据库的驱动类</span>    Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);    <span class="hljs-comment">//2.通过DriverManager获得数据库连接</span>    String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>;    String username=<span class="hljs-string">&quot;root&quot;</span>;    String password=<span class="hljs-string">&quot;root&quot;</span>;    conn=DriverManager.getConnection(url,username,password);    <span class="hljs-comment">//3.通过Connection对象获得Statement对象</span>    stmt=conn.createStatement();    <span class="hljs-comment">//4.使用Statement执行sql语句</span>    String sql=<span class="hljs-string">&quot;select * from users&quot;</span>;    rs=stmt.executeQuery(sql);    <span class="hljs-comment">//5.操作ResultSet结果集</span>    System.out.println(<span class="hljs-string">&quot;id |name |password|email  |birthday&quot;</span>);    <span class="hljs-keyword">while</span>(rs.next()) &#123;        <span class="hljs-type">int</span> id=rs.getInt(<span class="hljs-number">1</span>);        String name=rs.getString(<span class="hljs-number">2</span>);        String pass=rs.getString(<span class="hljs-number">3</span>);        String email=rs.getString(<span class="hljs-number">4</span>);        Date birthday=rs.getDate(<span class="hljs-number">5</span>);        System.out.println(id+<span class="hljs-string">&quot;  |&quot;</span>+name+<span class="hljs-string">&quot;  |&quot;</span>+pass+<span class="hljs-string">&quot;  |&quot;</span>+email+<span class="hljs-string">&quot;  |&quot;</span>+birthday);    &#125;    rs.close();    stmt.close();    conn.close();&#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;<span class="hljs-comment">// TODO Auto-generated catch block</span>e.printStackTrace();&#125;&#125;&#125;</code></pre></div><ul><li><p>ResultSet对象</p><p>ResultSet主要用于存储结果集，可以通过next()方法由前向后逐个获取结果集中的数据</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Example03</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;    Connection conn=<span class="hljs-literal">null</span>;    Statement stmt=<span class="hljs-literal">null</span>;    ResultSet rs=<span class="hljs-literal">null</span>;    <span class="hljs-keyword">try</span> &#123;        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);        String url=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>;        conn=DriverManager.getConnection(url,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);        String sql=<span class="hljs-string">&quot;select * from users&quot;</span>;        stmt=conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);        rs=stmt.executeQuery(sql);        System.out.print(<span class="hljs-string">&quot;第二条数据的name值为：&quot;</span>);        rs.absolute(<span class="hljs-number">2</span>);        System.out.println(rs.getString(<span class="hljs-number">2</span>));        System.out.print(<span class="hljs-string">&quot;第一条数据的name值为：&quot;</span>);        rs.beforeFirst();        rs.next();        System.out.println(rs.getString(<span class="hljs-number">2</span>));        System.out.print(<span class="hljs-string">&quot;最后一条数据的name值为：&quot;</span>);        rs.afterLast();        rs.previous();        System.out.println(rs.getString(<span class="hljs-number">2</span>));        rs.close();        stmt.close();        conn.close();    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;    e.printStackTrace();    &#125; <span class="hljs-keyword">catch</span> (SQLException e) &#123;    e.printStackTrace();&#125;&#125;&#125;</code></pre></div></li></ul><h4 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h4><ul><li><p>作用</p><p>为了避免频繁的创建数据库连接，数据库连接池技术应运而生。数据库连接池负责分配、管理和释放数据库连接，它允许应用程序重复使用现有的数据库连接，而不是重新建立。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/image-20231218194112478.png" alt="image-20231218194112478"></p></li><li><p>DataSource接口</p><p>为了获取数据库连接对象（Connection），JDBC提供了javax.sql.DataSource接口，它负责与数据库建立连接，并定义了返回值为Connection对象的方法，具体如下。</p><p>•Connection getConnection() </p><p>Connection getConnection(String username, String password</p></li><li><p>C3Po数据库连接池</p><p>C3P0是目前最流行的开源数据库连接池之一，它实现了DataSource数据源接口，支持JDBC2和JDBC3的标准规范，易于扩展并且性能优越，著名的开源框架Hibernate和 Spring都支持该数据源。在使用C3P0数据源开发时，需要了解C3P0中DataSource接口的实现类ComboPooledDataSource，它是C3P0的核心类，提供了数据源对象的相关方法，该类的常用方法介绍如下表所示。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/image-20231218194324076.png" alt="image-20231218194324076"></p><ul><li><p>数据源对象（通过数据源对象获取connection对象）</p><p>1.通过ComboPooledDataSource构造方法创建数据源对象</p></li></ul></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hevttc.test;<span class="hljs-keyword">import</span> java.beans.PropertyVetoException;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Testc3p0</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource ds=<span class="hljs-literal">null</span>;<span class="hljs-keyword">static</span> &#123;    ComboPooledDataSource cpds=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();    <span class="hljs-keyword">try</span> &#123;        cpds.setDriverClass(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);        cpds.setJdbcUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost/jdbc&quot;</span>);        cpds.setUser(<span class="hljs-string">&quot;root&quot;</span>);        cpds.setPassword(<span class="hljs-string">&quot;root&quot;</span>);        cpds.setInitialPoolSize(<span class="hljs-number">5</span>);        cpds.setMaxPoolSize(<span class="hljs-number">5</span>);        ds=cpds;        &#125; <span class="hljs-keyword">catch</span> (PropertyVetoException e) &#123;        e.printStackTrace();        &#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;System.out.println(ds.getConnection());&#125;&#125;</code></pre></div><p>2.通过读取配置文件创建数据源对象</p><p>1.将c3p0 jar包放入项目</p><p>2.在src根目录下创建c3p0-config.xml文件</p><div class="code-wrapper"><pre><code class="hljs java">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;c3p0-config&gt;&lt;<span class="hljs-keyword">default</span>-config&gt;    &lt;property name=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;com.mysql.jdbc.Driver&lt;/property&gt;    &lt;property name=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="hljs-comment">//localhost:3306/mydb&lt;/property&gt;</span>    &lt;property name=<span class="hljs-string">&quot;user&quot;</span>&gt;root&lt;/property&gt;    &lt;property name=<span class="hljs-string">&quot;password&quot;</span>&gt;root&lt;/property&gt;&lt;/<span class="hljs-keyword">default</span>-config&gt;     ---------------------------------------------------------------------    <span class="hljs-comment">//以上是默认的配置，还可以编写其他配置，用的时候进行选择</span> &lt;named-config name=<span class="hljs-string">&quot;hevttc&quot;</span>&gt;        <span class="hljs-comment">//驱动方式</span>    &lt;property name=<span class="hljs-string">&quot;driverClass&quot;</span>&gt;com.mysql.jdbc.Driver&lt;/property&gt;        <span class="hljs-comment">//url地址</span>    &lt;property name=<span class="hljs-string">&quot;jdbcUrl&quot;</span>&gt;jdbc:mysql:<span class="hljs-comment">//localhost:3306/mydb&lt;/property&gt;</span>        <span class="hljs-comment">//用户名</span>    &lt;property name=<span class="hljs-string">&quot;user&quot;</span>&gt;root&lt;/property&gt;        <span class="hljs-comment">//密码</span>    &lt;property name=<span class="hljs-string">&quot;password&quot;</span>&gt;rootroot&lt;/property&gt;  &lt;/named-config&gt;&lt;/c3p0-config&gt; </code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//选择使用方式</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>(<span class="hljs-string">&quot;hevttc&quot;</span>);<span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<span class="hljs-comment">//默认</span></code></pre></div><h4 id="DBUtil工具"><a href="#DBUtil工具" class="headerlink" title="DBUtil工具"></a>DBUtil工具</h4><ul><li><p>作用</p><p>为了更加简单地使用JDBC，Apache组织提供了一个DBUtils工具，它是操作数据库的一个组件，实现了对JDBC的简单封装，可以在不影响性能的情况下极大地简化JDBC的编码工作量。</p><p>DBUtils工具的核心是org.apache.commons.dbutils.QueryRunner类和org.apache.commons.dbutils.ResultSetHandler接口。</p></li><li><p>QueryRunner类</p><ul><li><p>作用</p><p>QueryRunner类简化了执行SQL语句的代码，它与ResultSetHandler组合在一起就能完成大部分的数据库操作，大大的减少了编码量。QueryRunner中提供了几个常用的方法：</p><p>（1）查询：query(String sql,ResultSetHandler rsh,Object… params)</p><p>（2）更新：update(String sql,Object… params)  （插入，更新或删除）</p><p>（3）更新：update(String sql) （插入，更新或删除，无需置换参数）</p><p>QueryRunner类提供了带有一个参数的构造方法，该方法以javax.sql.DataSource作为参数传递到QueryRunner的构造方法中来获取Connection对象</p></li></ul></li><li><p>ResultSetHandler接口</p><ul><li><p>作用</p><p> ResultSetHandler接口用于处理ResultSet结果集，它可以将结果集中的数据转为不同的形式。根据结果集中数据类型的不同，ResultSetHandler提供了几种常见的实现类，具体如下：</p><p>BeanHandler：将结果集中的第一行数据封装到一个对应的JavaBean实例中。</p><p>BeanListHandler：将结果集中的每一行数据都封装到一个对应的JavaBean实例中，并存放到List里。</p><p>ScalarHandler：将结果集中某一条记录的其中某一列的数据存储成Object对象。</p></li><li><p>例：ResultSetHandler的使用</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hevttc.test;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;<span class="hljs-keyword">import</span> com.hevttc.bean.User;<span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSetTest01</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource ds=<span class="hljs-literal">null</span>;<span class="hljs-keyword">static</span> &#123;    ComboPooledDataSource cpds=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();    ds=cpds;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;    QueryRunner runner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(ds);    String sql=<span class="hljs-string">&quot;select * from users where id=?&quot;</span>;    User user=(User)runner.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>(User.class),<span class="hljs-number">1</span>);<span class="hljs-comment">//返回的数据存储在User对象中</span>    System.out.println(<span class="hljs-string">&quot;id为1的User对象的name值为：&quot;</span>+user.getName());&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hevttc.test;<span class="hljs-keyword">import</span> java.sql.SQLException;<span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> javax.sql.DataSource;<span class="hljs-keyword">import</span> org.apache.commons.dbutils.QueryRunner;<span class="hljs-keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;<span class="hljs-keyword">import</span> com.hevttc.bean.User;<span class="hljs-keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSetTest02</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> DataSource ds=<span class="hljs-literal">null</span>;<span class="hljs-keyword">static</span> &#123;ds=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;    QueryRunner runner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(ds);    String sql=<span class="hljs-string">&quot;select * from users&quot;</span>;    List&lt;User&gt; userList=(ArrayList&lt;User&gt;)runner.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>(User.class));    <span class="hljs-keyword">for</span>(User user:userList) &#123;    System.out.println(<span class="hljs-string">&quot;id为&quot;</span>+user.getId()+<span class="hljs-string">&quot;的用户，用户名为：&quot;</span>+user.getName());&#125;&#125;&#125;</code></pre></div></li></ul></li><li><p>实现对数据库的增删改查</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDao</span> &#123;    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException&#123;        QueryRunner runner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(C3p0Utils.getDataSource());        String sql=<span class="hljs-string">&quot;select * from users&quot;</span>;        List&lt;User&gt; userList=(ArrayList&lt;User&gt;)runner.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>(User.class));        <span class="hljs-keyword">return</span> userList;    &#125;    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException &#123;        QueryRunner runner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(C3p0Utils.getDataSource());        String sql=<span class="hljs-string">&quot;select * from users where id=?&quot;</span>;        User user=(User)runner.query(sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>(User.class),id);        <span class="hljs-keyword">return</span> user;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> SQLException &#123;        QueryRunner runner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(C3p0Utils.getDataSource());        String sql=<span class="hljs-string">&quot;insert into users values(null,?,?,?,?)&quot;</span>;        <span class="hljs-type">int</span> num=runner.update(sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;user.getName(),user.getPassword(),user.getEmail(),user.getBirthday()&#125;);        <span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;<span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;     <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">update</span><span class="hljs-params">(User user)</span> <span class="hljs-keyword">throws</span> SQLException &#123;        QueryRunner runner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(C3p0Utils.getDataSource());        String sql=<span class="hljs-string">&quot;update users set name=?,password=?,email=?,birthday=? where id=?&quot;</span>;        <span class="hljs-type">int</span> num=runner.update(sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123;user.getName(),user.getPassword(),user.getEmail(),user.getBirthday(),user.getId()&#125;);        <span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;       &#125;<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-keyword">throws</span> SQLException &#123;        QueryRunner runner=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>(C3p0Utils.getDataSource());        String sql=<span class="hljs-string">&quot;delete from users where id=?&quot;</span>;        <span class="hljs-type">int</span> num=runner.update(sql,id);        <span class="hljs-keyword">if</span>(num&gt;<span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;&#125;&#125;</code></pre></div></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>Listener</tag>
      
      <tag>gdbcAPI</tag>
      
      <tag>数据库连接池C3P0</tag>
      
      <tag>DBUtil工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模拟qq通信_2023.12.15</title>
    <link href="/2023/12/15/%E6%A8%A1%E6%8B%9Fqq%E9%80%9A%E4%BF%A1-2023-12-15/"/>
    <url>/2023/12/15/%E6%A8%A1%E6%8B%9Fqq%E9%80%9A%E4%BF%A1-2023-12-15/</url>
    
    <content type="html"><![CDATA[<h3 id="线程相关"><a href="#线程相关" class="headerlink" title="线程相关"></a>线程相关</h3><ul><li><p>在线程的run方法中，client端一直在接收数据，如果server端没有发送数据，线程会被阻塞；</p></li><li><p>ConcurrentHashMap，是线程安全的</p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>IDEA自动生成注释模板配置方法</title>
    <link href="/2023/12/13/2023-12-13%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/13/2023-12-13%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="IDEA自动生成注释模板配置方法"><a href="#IDEA自动生成注释模板配置方法" class="headerlink" title="IDEA自动生成注释模板配置方法"></a>IDEA自动生成注释模板配置方法</h1><h3 id="IDEA自动生成注释模板配置方法-1"><a href="#IDEA自动生成注释模板配置方法-1" class="headerlink" title="IDEA自动生成注释模板配置方法"></a>IDEA自动生成注释模板配置方法</h3><h4 id="Java类信息"><a href="#Java类信息" class="headerlink" title="Java类信息"></a>Java类信息</h4><h5 id="Settings—-File-and-Code-Templates-在Files找到Class-选中后可以看到右侧框内显示内容如下："><a href="#Settings—-File-and-Code-Templates-在Files找到Class-选中后可以看到右侧框内显示内容如下：" class="headerlink" title="Settings—-&gt; File and Code Templates;在Files找到Class,选中后可以看到右侧框内显示内容如下："></a>Settings—-&gt; File and Code Templates;在Files找到Class,选中后可以看到右侧框内显示内容如下：</h5><div class="code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$&#123;PACKAGE_NAME&#125;</span> &amp;&amp; <span class="hljs-variable">$&#123;PACKAGE_NAME&#125;</span> != <span class="hljs-string">&quot;&quot;</span>)package <span class="hljs-variable">$&#123;PACKAGE_NAME&#125;</span>;<span class="hljs-comment">#end</span></span><span class="hljs-meta prompt_">#</span><span class="language-bash">parse(<span class="hljs-string">&quot;File Header.java&quot;</span>)</span>public class $&#123;NAME&#125; &#123;&#125;</code></pre></div><p>说明：</p><ul><li>第一行是新建类的所在包名；</li><li>第二行是引用的文件，此处也是我们增加模板的地方</li></ul><h5 id="选择Includes，点击”File-Header”-黏贴如下模板代码："><a href="#选择Includes，点击”File-Header”-黏贴如下模板代码：" class="headerlink" title="选择Includes，点击”File Header”,黏贴如下模板代码："></a>选择Includes，点击”File Header”,黏贴如下模板代码：</h5><div class="code-wrapper"><pre><code class="hljs perl">/**  * description: add a description   * @author  qsj  * @date $&#123;YEAR&#125;/$&#123;MONTH&#125;/$&#123;DAY&#125; $&#123;HOUR&#125;:$&#123;MINUTE&#125;:$&#123;SECOND&#125;   * @version <span class="hljs-number">1.0</span>.<span class="hljs-number">0</span>   */</code></pre></div><p>简要说明：</p><ul><li>description: add a description [描述信息]</li><li>@author Makavelli [作者]</li><li>@date {YEAR}&#x2F;{MONTH}&#x2F;{DAY} {HOUR}:{MINUTE}:{SECOND} [时间，这里是年&#x2F;月&#x2F;日 时:分:秒的格式]</li><li>@version 1.0.0 [版本信息]</li></ul><p>如下图：</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dc6277ab9b15493c8d129a20cad807bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="1.png"></p><h4 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h4><h5 id="Settings—-Live-Templates-点击右侧加号选择”2-Template-Group…”，如下图："><a href="#Settings—-Live-Templates-点击右侧加号选择”2-Template-Group…”，如下图：" class="headerlink" title="Settings—-&gt;Live Templates;点击右侧加号选择”2. Template Group…”，如下图："></a>Settings—-&gt;Live Templates;点击右侧加号选择”2. Template Group…”，如下图：</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/00ade47bc0ff4562be9db28e23aad1a6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="2.png"></p><h5 id="选择新建的”MethodsTemplate”-再次点击右侧加号，选择”1-Live-Template”-并按如下步骤依次填写如下信息："><a href="#选择新建的”MethodsTemplate”-再次点击右侧加号，选择”1-Live-Template”-并按如下步骤依次填写如下信息：" class="headerlink" title="选择新建的”MethodsTemplate”,再次点击右侧加号，选择”1. Live Template”,并按如下步骤依次填写如下信息："></a>选择新建的”MethodsTemplate”,再次点击右侧加号，选择”1. Live Template”,并按如下步骤依次填写如下信息：</h5><ul><li>快捷操作,这里用的是”*” ；</li><li>Options 默认即可，默认选项是：“Tab”；</li><li>模板内容，如下:</li></ul><div class="code-wrapper"><pre><code class="hljs java">* * description $description$ * <span class="hljs-meta">@author</span> Makavelli * <span class="hljs-meta">@date</span> $date$ $time$ * <span class="hljs-meta">@version</span> <span class="hljs-number">1.0</span><span class="hljs-number">.0</span>$params$ * <span class="hljs-meta">@return</span> $<span class="hljs-keyword">return</span>$ */</code></pre></div><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/a561ee1944bc47bfa1b24a923e31fa70~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="3.png"></p><ul><li>点击”EDIT VARIABLES”,对模板内的参数取值进行设置，本次设置如下图：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/5f0bf0a342294980b8aec44396fe92df~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="4.png"></p><ul><li>填写params内容为：</li></ul><div class="code-wrapper"><pre><code class="hljs html">groovyScript(&quot;def result=&#x27;&#x27;; def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;,&#x27;).toList(); result=&#x27; * @param &#x27; + params[0]; for(i = 1; i &lt; params.size(); i++) &#123;result+=&#x27;\\n     * @param &#x27; + params[i] + ((i+1 &lt; params.size() - 1) ? &#x27;\\n&#x27; : &#x27;&#x27;)&#125;;return result&quot;, methodParameters())</code></pre></div><ul><li>填写return内容为：</li></ul><div class="code-wrapper"><pre><code class="hljs html">groovyScript(&quot;def result=&#x27;&#x27;;  def params=\&quot;$&#123;_1&#125;\&quot;.replaceAll(&#x27;[\\\\[|\\\\]|\\\\s]&#x27;, &#x27;&#x27;).split(&#x27;&lt;&#x27;).toList(); for(i = 0; i &lt; params.size(); i++) &#123;if(i!=0)&#123;result+=&#x27;&lt;&#x27;;&#125;;  def p1=params[i].split(&#x27;,&#x27;).toList();  for(i2 = 0; i2 &lt; p1.size(); i2++)  &#123; def p2=p1[i2].split(&#x27;\\\\.&#x27;).toList();  result+=p2[p2.size()-1]; if(i2!=p1.size()-1)&#123;result+=&#x27;,&#x27;&#125;  &#125; ; &#125;;  return result&quot;, methodReturnType())</code></pre></div><ul><li>Skip if defined一列中”description”处未勾选，是为了键入快捷键生成方法注释的时候可以将鼠标聚焦至改行，方便添加注释方法描述信息；</li><li>点击”OK”，返回上一设置页，选择应用此模板的对象（操作的位置在中下部位），如下图：<ul><li>设置前</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/9e0713751f9044d6be97176584379721~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="5.png"></p><ul><li>设置后（点击”Define”,在弹出框内根据实际需要选择即可）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/604f9398f0684b3e95b1282f15995793~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="6.png"></p><ul><li>点击OK完成设置；</li></ul><h4 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/3f7884017c4c4a3d9a1ba93ba75623e9~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="6bf03e50-46f6-4604-82dd-d800ab4e25ef.gif"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/16e286acc7c04678835690fc617e7af0~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="7.png"></p><p><em>PS：生成注释的时候需要先输入”&#x2F;</em>“,然后按”Tab”键，所以在设置模板的时候第一行的设置为一个※，为了和输入的字符组合起来，以生成完整、规范的注释信息；*</p><p>**此次配置使用的IDEA版本信息如下：</p><p><em>IntelliJ IDEA 2020.3.1 (Ultimate Edition)</em>**</p><p>本文部分内容参考、引用如下文章： <a href="https://link.juejin.cn/?target=https://blog.csdn.net/Inevitable_wl/article/details/109215080">blog.csdn.net&#x2F;Inevitable_…</a> <a href="https://link.juejin.cn/?target=https://blog.csdn.net/richer__/article/details/108234341">blog.csdn.net&#x2F;richer__&#x2F;ar…</a></p>]]></content>
    
    
    <categories>
      
      <category>工具，IDEA</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA模板配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TCP,UDP,InetAddress</title>
    <link href="/2023/12/12/2023-12-12%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/12/2023-12-12%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h4><ul><li><p>传输前需要先建立连接，形成传输数据通道。</p></li><li><p>传输前三次握手方式，是可靠的。</p></li><li><p>可进行大量数据的传输。</p></li><li><p>传输完后需释放，已建立的连接，效率低。</p></li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li>不需要建立连接</li><li>每个数据报大小控制在64k内，不适合大量数据传输。</li><li>不可靠</li><li>发送数据后，无需释放资源，速度快</li><li>举例：发短信</li></ul><h4 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h4><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><ul><li><p><strong>1.获取本机信息，主机名，ip</strong></p></li><li><p><strong>2.通过域名，获取ip</strong></p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.qsj.test;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.UnknownHostException;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Tcp</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> UnknownHostException &#123;               <span class="hljs-comment">//localHost 存的是主机的名称和ip地址 , XXX/192.168.28.2</span>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">localHost</span> <span class="hljs-operator">=</span> InetAddress.getLocalHost();        System.out.println(localHost);        <span class="hljs-comment">//通过主机名称获取对象 存的是主机的名称和ip地址 ,XXX/192.164.38.2</span>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">qi</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;qi&quot;</span>);        System.out.println(qi);        <span class="hljs-comment">//通过域名获取InetAddress对象，对象存的是域名/ip , www.baidui.com/103.39.231.155</span>        <span class="hljs-type">InetAddress</span> <span class="hljs-variable">byName</span> <span class="hljs-operator">=</span> InetAddress.getByName(<span class="hljs-string">&quot;www.baidui.com&quot;</span>);        System.out.println(byName);        <span class="hljs-comment">//通过对象获取IP地址, 192.168.38.2</span>        <span class="hljs-type">String</span> <span class="hljs-variable">hostAddress</span> <span class="hljs-operator">=</span> localHost.getHostAddress();        <span class="hljs-type">String</span> <span class="hljs-variable">hostAddress2</span> <span class="hljs-operator">=</span> byName.getHostAddress();        System.out.println(hostAddress);        System.out.println(hostAddress2);                <span class="hljs-comment">//通过对象获取主机名或域名</span>        <span class="hljs-type">String</span> <span class="hljs-variable">hostName</span> <span class="hljs-operator">=</span> localHost.getHostName();<span class="hljs-comment">//qi</span>        <span class="hljs-type">String</span> <span class="hljs-variable">hostAddress1</span> <span class="hljs-operator">=</span> byName.getHostName();<span class="hljs-comment">//www.baidui.com</span>        System.out.println(hostName);        System.out.println(hostAddress1);    &#125;&#125;</code></pre></div><h4 id="TCP——Socket"><a href="#TCP——Socket" class="headerlink" title="TCP——Socket"></a>TCP——Socket</h4><ul><li><p>服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。</p></li><li><p>服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待(阻塞），直到客户端连接到服务器上给定的端口。</p></li><li><p>服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接，连接成功后返回一个Socket对象。</p></li><li><p>Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。</p></li><li><p>在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。</p></li><li><p>关闭输出流<code>socket.shutdownOutput()</code></p><ul><li>当调用 <code>socket.shutdownOutput()</code> 之后，套接字的输出流将被关闭。这意味着调用 <code>write()</code> 方法向输出流写入数据将会抛出异常（<code>IOException</code>）。</li><li>关闭套接字的输出流不会关闭套接字的输入流。因此，仍然可以通过套接字的输入流接收来自远程主机的数据。</li><li>调用 <code>socket.shutdownOutput()</code> 的主要用途是在通信完成后显式地告知远程主机，不再发送更多的数据。这在某些协议或通信模式中是很有用的，例如在 HTTP 请求&#x2F;响应中，当客户端发送完请求后关闭输出流，告知服务器请求已完成。</li></ul></li><li><p>服务端细节：这个 ServerSocket 可以通过 accept() 返回多个 Socket[多个客户端连接服务器的并发]</p></li><li><p>当调用 <code>bufferedWriter.flush()</code> 方法时，它会强制将缓冲区中的数据立即写入目标输出流，即使缓冲区中的数据未达到缓冲区的大小或缓冲区尚未填满。一般情况下，缓冲流会自动在适当的时机将数据写入目标输出流，例如当缓冲区满或缓冲流关闭时。但有时需要手动调用 <code>flush()</code> 方法，以确保及时地将数据写入目标输出流。</p></li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 文件名 GreetingClient.java</span> <span class="hljs-comment">// args[0] 是命令行输入传入的第一个参数</span><span class="hljs-keyword">import</span> java.net.*;<span class="hljs-keyword">import</span> java.io.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingClient</span>&#123;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>   &#123;      <span class="hljs-type">String</span> <span class="hljs-variable">serverName</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];      <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">1</span>]);      <span class="hljs-keyword">try</span>      &#123;         System.out.println(<span class="hljs-string">&quot;连接到主机：&quot;</span> + serverName + <span class="hljs-string">&quot; ，端口号：&quot;</span> + port);         <span class="hljs-type">Socket</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(serverName, port);         System.out.println(<span class="hljs-string">&quot;远程主机地址：&quot;</span> + client.getRemoteSocketAddress());         <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outToServer</span> <span class="hljs-operator">=</span> client.getOutputStream();         <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(outToServer);          out.writeUTF(<span class="hljs-string">&quot;Hello from &quot;</span> + client.getLocalSocketAddress());         <span class="hljs-type">InputStream</span> <span class="hljs-variable">inFromServer</span> <span class="hljs-operator">=</span> client.getInputStream();         <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(inFromServer);         System.out.println(<span class="hljs-string">&quot;服务器响应： &quot;</span> + in.readUTF());         client.close();      &#125;<span class="hljs-keyword">catch</span>(IOException e)      &#123;         e.printStackTrace();      &#125;   &#125;&#125;</code></pre></div><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 文件名 GreetingServer.java</span> <span class="hljs-keyword">import</span> java.net.*;<span class="hljs-keyword">import</span> java.io.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingServer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;   <span class="hljs-keyword">private</span> ServerSocket serverSocket;      <span class="hljs-keyword">public</span> <span class="hljs-title function_">GreetingServer</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException   &#123;      serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(port);      serverSocket.setSoTimeout(<span class="hljs-number">10000</span>);   &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>   &#123;      <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)      &#123;         <span class="hljs-keyword">try</span>         &#123;            System.out.println(<span class="hljs-string">&quot;等待远程连接，端口号为：&quot;</span> + serverSocket.getLocalPort() + <span class="hljs-string">&quot;...&quot;</span>);            <span class="hljs-type">Socket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> serverSocket.accept();            System.out.println(<span class="hljs-string">&quot;远程主机地址：&quot;</span> + server.getRemoteSocketAddress());            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(server.getInputStream());            System.out.println(in.readUTF());            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(server.getOutputStream());            out.writeUTF(<span class="hljs-string">&quot;谢谢连接我：&quot;</span> + server.getLocalSocketAddress() + <span class="hljs-string">&quot;\nGoodbye!&quot;</span>);            server.close();         &#125;<span class="hljs-keyword">catch</span>(SocketTimeoutException s)         &#123;            System.out.println(<span class="hljs-string">&quot;Socket timed out!&quot;</span>);            <span class="hljs-keyword">break</span>;         &#125;<span class="hljs-keyword">catch</span>(IOException e)         &#123;            e.printStackTrace();            <span class="hljs-keyword">break</span>;         &#125;      &#125;   &#125;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>   &#123;      <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">0</span>]);      <span class="hljs-keyword">try</span>      &#123;         <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreetingServer</span>(port);         t.run();      &#125;<span class="hljs-keyword">catch</span>(IOException e)      &#123;         e.printStackTrace();      &#125;   &#125;&#125;</code></pre></div><h5 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.socket;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.net.ServerSocket;<span class="hljs-keyword">import</span> java.net.Socket;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 服务端, 使用字符流方式读写</span><span class="hljs-comment">*/</span><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP03Server</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//思路</span><span class="hljs-comment">//1. 在本机 的 9999 端口监听, 等待连接</span><span class="hljs-comment">// 细节: 要求在本机没有其它服务在监听 9999</span>韩顺平循序渐进学Java 零基础第<span class="hljs-number">885</span>页<span class="hljs-comment">// 细节：这个 ServerSocket 可以通过 accept() 返回多个 Socket[多个客户端连接服务器的并发]</span><span class="hljs-type">ServerSocket</span> <span class="hljs-variable">serverSocket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(<span class="hljs-number">9999</span>);System.out.println(<span class="hljs-string">&quot;服务端，在 9999 端口监听，等待连接..&quot;</span>);<span class="hljs-comment">//2. 当没有客户端连接 9999 端口时，程序会 阻塞, 等待连接</span><span class="hljs-comment">// 如果有客户端连接，则会返回 Socket 对象，程序继续</span><span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> serverSocket.accept();System.out.println(<span class="hljs-string">&quot;服务端 socket =&quot;</span> + socket.getClass());<span class="hljs-comment">//</span><span class="hljs-comment">//3. 通过 socket.getInputStream() 读取客户端写入到数据通道的数据, 显示</span><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<span class="hljs-comment">//4. IO 读取, 使用字符流, 老师使用 InputStreamReader 将 inputStream 转成字符流BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));</span><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> bufferedReader.readLine();System.out.println(s);<span class="hljs-comment">//输出</span><span class="hljs-comment">//5. 获取 socket 相关联的输出流</span><span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<span class="hljs-comment">// 使用字符输出流的方式回复信息</span><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outputStream));bufferedWriter.write(<span class="hljs-string">&quot;hello client 字符流&quot;</span>);bufferedWriter.newLine();<span class="hljs-comment">// 插入一个换行符，表示回复内容的结束</span>bufferedWriter.flush();<span class="hljs-comment">//注意需要手动的 flush</span>韩顺平循序渐进学Java 零基础第<span class="hljs-number">886</span>页<span class="hljs-comment">//6.关闭流和 socket</span>bufferedWriter.close();bufferedReader.close();socket.close();serverSocket.close();<span class="hljs-comment">//关闭</span>&#125;&#125;<span class="hljs-keyword">package</span> com.h</code></pre></div><h5 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.socket;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.Socket;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 客户端，发送 &quot;hello, server&quot; 给服务端， 使用字符流</span><span class="hljs-comment">*/</span><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SocketTCP03Client</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//思路</span><span class="hljs-comment">//1. 连接服务端 (ip , 端口）</span><span class="hljs-comment">//解读: 连接本机的 9999 端口, 如果连接成功，返回 Socket 对象</span>韩顺平循序渐进学Java 零基础第<span class="hljs-number">887</span>页<span class="hljs-type">Socket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(InetAddress.getLocalHost(), <span class="hljs-number">9999</span>);System.out.println(<span class="hljs-string">&quot;客户端 socket 返回=&quot;</span> + socket.getClass());<span class="hljs-comment">//2. 连接上后，生成 Socket, 通过 socket.getOutputStream()</span><span class="hljs-comment">// 得到 和 socket 对象关联的输出流对象</span><span class="hljs-type">OutputStream</span> <span class="hljs-variable">outputStream</span> <span class="hljs-operator">=</span> socket.getOutputStream();<span class="hljs-comment">//3. 通过输出流，写入数据到 数据通道, 使用字符流</span><span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(outputStream));bufferedWriter.write(<span class="hljs-string">&quot;hello, server 字符流&quot;</span>);bufferedWriter.newLine();<span class="hljs-comment">//插入一个换行符，表示写入的内容结束, 注意，要求对方使用readLine()!!!!</span>bufferedWriter.flush();<span class="hljs-comment">// 如果使用的字符流，需要手动刷新，否则数据不会写入数据通道//4. 获取和 socket 关联的输入流. 读取数据(字符)，并显示</span><span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> socket.getInputStream();<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream));<span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> bufferedReader.readLine();System.out.println(s);<span class="hljs-comment">//5. 关闭流对象和 socket, 必须关闭</span>bufferedReader.close();<span class="hljs-comment">//关闭外层流</span>bufferedWriter.close();socket.close();System.out.println(<span class="hljs-string">&quot;客户端退出.....&quot;</span>);&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamUtils</span> &#123;<span class="hljs-comment">/**</span><span class="hljs-comment">* 功能：将输入流转换成 byte[]</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> is</span><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] streamToByteArray(InputStream is) <span class="hljs-keyword">throws</span> Exception&#123;<span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<span class="hljs-comment">//创建输出流对象</span><span class="hljs-type">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-type">int</span> len;<span class="hljs-keyword">while</span>((len=is.read(b))!=-<span class="hljs-number">1</span>)&#123;bos.write(b, <span class="hljs-number">0</span>, len);&#125;<span class="hljs-type">byte</span>[] array = bos.toByteArray();bos.close();<span class="hljs-keyword">return</span> array;&#125;<span class="hljs-comment">/**</span><span class="hljs-comment">* 功能：将 InputStream 转换成 String</span><span class="hljs-comment">* <span class="hljs-doctag">@param</span> is</span><span class="hljs-comment">* <span class="hljs-doctag">@return</span></span><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">streamToString</span><span class="hljs-params">(InputStream is)</span> <span class="hljs-keyword">throws</span> Exception&#123;<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is));StringBuilder builder= <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();String line;<span class="hljs-keyword">while</span>((line=reader.readLine())!=<span class="hljs-literal">null</span>)&#123; <span class="hljs-comment">//当读取到 null 时，就表示结束</span>builder.append(line+<span class="hljs-string">&quot;\r\n&quot;</span>);&#125;<span class="hljs-keyword">return</span> builder.toString();&#125;&#125;</code></pre></div><h4 id="UDP-1"><a href="#UDP-1" class="headerlink" title="UDP"></a>UDP</h4><ul><li><p>DatagramSocket指定接收端的端口号，并接收和发送，DatagramPacket 对象</p></li><li><p>DatagramPacket 对象实例化时</p><ul><li><p>1.作为发出端，初始化的参数有 data 内容字节数组 , data.length , 主机(IP) , 端口</p><div class="code-wrapper"><pre><code class="hljs java"> <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.12.1&quot;</span>), <span class="hljs-number">9999</span>);socket.send(packet);</code></pre></div></li><li><p>2.作为接收端时，初始化的参数有 字节数组， 字节数组长度</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);</code></pre></div></li></ul></li><li><p>DatagramPacket拆包</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//实际接收到的数据字节长度</span><span class="hljs-type">byte</span>[] data = packet.getData();<span class="hljs-comment">//接收到数据</span><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, length);</code></pre></div></li></ul><p><strong>编写一个接收端A,和一个发送端B</strong></p><p><strong>1.接收端A，在9999端口等待接收数据（ receive）</strong></p><p><strong>2.发送端B向接收端A发送“hello，明天吃火锅”</strong></p><p><strong>3.接收端A收到发送端B，回复“收到，明天见！”然后退出</strong></p><p><strong>4.发送端B接收到接收端A发送的内容后退出</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.udp;韩顺平循序渐进学Java 零基础第<span class="hljs-number">896</span>页<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.net.DatagramPacket;<span class="hljs-keyword">import</span> java.net.DatagramSocket;<span class="hljs-keyword">import</span> java.net.InetAddress;<span class="hljs-keyword">import</span> java.net.SocketException;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* UDP 接收端</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPReceiverA</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//1. 创建一个 DatagramSocket 对象，准备在 9999 接收数据</span><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9999</span>);<span class="hljs-comment">//2. 构建一个 DatagramPacket 对象，准备接收数据</span><span class="hljs-comment">// 在前面讲解 UDP 协议时，老师说过一个数据包最大 64k</span><span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<span class="hljs-comment">//3. 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span><span class="hljs-comment">// 填充到 packet 对象</span><span class="hljs-comment">//老师提示: 当有数据包发送到 本机的 9999 端口时，就会接收到数据</span><span class="hljs-comment">// 如果没有数据包发送到 本机的 9999 端口, 就会阻塞等待. System.out.println(&quot;接收端 A 等待接收数据..&quot;);</span>socket.receive(packet);<span class="hljs-comment">//4. 可以把 packet 进行拆包，取出数据，并显示.</span><span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> packet.getLength();<span class="hljs-comment">//实际接收到的数据字节长度</span><span class="hljs-type">byte</span>[] data = packet.getData();<span class="hljs-comment">//接收到数据</span><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, length);System.out.println(s);<span class="hljs-comment">//===回复信息给 B 端</span><span class="hljs-comment">//将需要发送的数据，封装到 DatagramPacket 对象</span>data = <span class="hljs-string">&quot;好的, 明天见&quot;</span>.getBytes();<span class="hljs-comment">//说明: 封装的 DatagramPacket 对象 data 内容字节数组 , data.length , 主机(IP) , 端口packet =</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.12.1&quot;</span>), <span class="hljs-number">9998</span>);socket.send(packet);<span class="hljs-comment">//发送</span><span class="hljs-comment">//5. 关闭资源</span>socket.close();System.out.println(<span class="hljs-string">&quot;A 端退出...&quot;</span>);&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.udp;韩顺平循序渐进学Java 零基础第<span class="hljs-number">898</span>页<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.net.*;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 发送端 B ====&gt; 也可以接收数据</span><span class="hljs-comment">*/</span><span class="hljs-meta">@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UDPSenderB</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//1.创建 DatagramSocket 对象，准备在 9998 端口 接收数据</span><span class="hljs-type">DatagramSocket</span> <span class="hljs-variable">socket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramSocket</span>(<span class="hljs-number">9998</span>);<span class="hljs-comment">//2. 将需要发送的数据，封装到 DatagramPacket 对象</span><span class="hljs-type">byte</span>[] data = <span class="hljs-string">&quot;hello 明天吃火锅~&quot;</span>.getBytes(); <span class="hljs-comment">//</span><span class="hljs-comment">//说明: 封装的 DatagramPacket 对象 data 内容字节数组 , data.length , 主机(IP) , 端口</span>    <span class="hljs-type">DatagramPacket</span> <span class="hljs-variable">packet</span> <span class="hljs-operator">=</span>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(data, data.length, InetAddress.getByName(<span class="hljs-string">&quot;192.168.12.1&quot;</span>), <span class="hljs-number">9999</span>);socket.send(packet);<span class="hljs-comment">//3.=== 接收从 A 端回复的信息</span><span class="hljs-comment">//(1) 构建一个 DatagramPacket 对象，准备接收数据</span>韩顺平循序渐进学Java 零基础第<span class="hljs-number">899</span>页<span class="hljs-comment">// 在前面讲解 UDP 协议时，老师说过一个数据包最大 64k</span><span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];packet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DatagramPacket</span>(buf, buf.length);<span class="hljs-comment">//(2) 调用 接收方法, 将通过网络传输的 DatagramPacket 对象</span><span class="hljs-comment">// 填充到 packet 对象</span><span class="hljs-comment">//老师提示: 当有数据包发送到 本机的 9998 端口时，就会接收到数据</span><span class="hljs-comment">// 如果没有数据包发送到 本机的 9998 端口, 就会阻塞等待. socket.receive(packet);</span><span class="hljs-comment">//(3) 可以把 packet 进行拆包，取出数据，并显示. int length = packet.getLength();//实际接收到的数据字节长度</span>data = packet.getData();<span class="hljs-comment">//接收到数据</span><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data, <span class="hljs-number">0</span>, length);System.out.println(s);<span class="hljs-comment">//关闭资源</span>socket.close();System.out.println(<span class="hljs-string">&quot;B 端退出&quot;</span>);&#125;&#125;</code></pre></div><h4 id="netstat指令"><a href="#netstat指令" class="headerlink" title="netstat指令"></a>netstat指令</h4><ul><li><code>netstat -an</code> 可以看当前主机网络情况，包括端口，和网络连接情况</li><li><code>netstat -an | more</code>  有的时候信息很多，整个页面显示不完，这个命令会一部分一部分显示，不会一下子全显示出来</li><li><code>netstat - anb |more</code> 查看那个程序在监听某个端口。</li><li><code>netstat -ano | findstr:端口号</code> 查看占用端口号的进程名称</li><li><code>taskkill /f /pid 进程PID</code> 关闭进程</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java网络编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Filter过滤器，转发，重定向细节，cookie用法</title>
    <link href="/2023/12/11/2023-12-11%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/11/2023-12-11%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h4><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p>其基本功能就是对Servlet容器调用Servlet的过程进行拦截，从而在Servlet进行响应处理前后实现一些特殊功能。</p><p>例如统一在响应之前统一处理乱码问题，设置统一编码。</p><h5 id="1-Xml文件配置Filter"><a href="#1-Xml文件配置Filter" class="headerlink" title="1.Xml文件配置Filter"></a>1.Xml文件配置Filter</h5><p>过滤器的配置信息中包含多个元素，这些元素分别具有不同的作用，具体如下：</p><p>（1）<code>&lt;filter&gt;</code>根元素用于注册一个Filter。</p><p>（2）<code>&lt;filter-name&gt;</code>子元素用于设置Filter名称。</p><p>（3）<code>&lt;filter-class&gt;</code>子元素用于设置Filter类的完整名称。</p><p>（4）<code>&lt;filter-mapping&gt;</code>根元素用于设置一个过滤器所拦截的资源。</p><p>（5）<code>&lt;filter-name&gt;</code>子元素必须与<code>&lt;filter&gt;</code>中的<code>&lt;filter-name&gt;</code>子元素相同。</p><p>（6）<code>&lt;url-pattern&gt;</code>子元素用于匹配用户请求的URL，例如“&#x2F;MyServlet”，这个URL还可以使用通配符“<em>”来表示，例如“</em>.do”适用于所有以“.do”结尾的Servlet路径。</p><h5 id="2．使用通配符-拦截用户的所有请求"><a href="#2．使用通配符-拦截用户的所有请求" class="headerlink" title="**2．使用通配符 &#x2F;***拦截用户的所有请求"></a>**2．使用通配符 &#x2F;***<strong>拦截用户的所有请求</strong></h5><p>Filter的<code>&lt;filter-mapping&gt;</code>元素用于配置过滤器拦截的资源信息，如果想让过滤器拦截所有的请求访问，那么需要使用通配符“*”来实现，具体示例如下。</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;filter-mapping&gt;&lt;filter-name&gt;Filter&lt;/filter-name&gt;&lt;url-pattern&gt;<span class="hljs-comment">/*&lt;/url-pattern&gt;</span><span class="hljs-comment"></span><span class="hljs-comment">&lt;/filter-mapping&gt;</span></code></pre></div><h5 id="3．拦截不同方式的访问请求"><a href="#3．拦截不同方式的访问请求" class="headerlink" title="3．拦截不同方式的访问请求"></a>3．拦截不同方式的访问请求</h5><p>在web.xml文件中，一个<code>&lt;filter-mapping&gt;</code>元素用于配置一个Filter所负责拦截的资源。 <code>&lt;filter-mapping&gt;</code>元素中有一个特殊的子元素<code>&lt;dispatcher&gt;</code>，该元素用于指定过滤器所拦截的资源被Servlet容器调用的方式，<code>&lt;dispatcher&gt;</code>元素的值共有4个，具体如下：</p><p>1）REQUEST </p><p>当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器将不会被调用。</p><p>2）INCLUDE</p><p>如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。</p><p>3）FORWARD </p><p>如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。</p><p>4）ERROR </p><p>如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。</p><h5 id="4-在注解中配置Filter"><a href="#4-在注解中配置Filter" class="headerlink" title="4.在注解中配置Filter"></a>4.在注解中配置Filter</h5><div class="code-wrapper"><pre><code class="hljs jsp"><span class="hljs-meta">@WebFilter(/XXXX)</span> <span class="hljs-comment">//在访问/XXXX之前先进行拦截。</span>如果有多个Filter拦截同一个servlet，会以Filter名称的字典序进行排序顺序进行执行，过滤。<span class="hljs-meta">@WebFilter(disptchersTypes = &#123;DisptcherType.FOWARD, ... //可以有多个&#125;，urlPatterns = &#123;&quot;/first.jsp&quot;,...&#125;)</span></code></pre></div><h5 id="5-执行流程"><a href="#5-执行流程" class="headerlink" title="5.执行流程"></a>5.执行流程</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/Filter.png" alt="Filter"></p><h5 id="6-获取Xml配置信息"><a href="#6-获取Xml配置信息" class="headerlink" title="6.获取Xml配置信息"></a>6.获取Xml配置信息</h5><p>为了获取Filter程序在web.xml文件中的配置信息，Servlet API提供了一个FilterConfig接口，该接口封装了Filter程序在web.xml中的所有注册信息，并且提供了一系列获取这些配置信息的方法，具体如表所示。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/peizhi.png" alt="peizhi"></p><p><strong>例如</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(urlPatterns = &#123;&quot;/Hello&quot;&#125;,initParams = &#123;</span><span class="hljs-meta">@webInitParam(name = &quot;ecoding&quot;,value = &quot;GBK&quot;)</span><span class="hljs-meta">&#125;)</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span>&#123;          <span class="hljs-keyword">private</span> String  characterEncoding;     <span class="hljs-keyword">private</span> FilterConfig filterConfig;          <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig config)</span> <span class="hljs-keyword">throws</span> ServletException &#123;       filterConfig = config;    &#125;      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        characterEncoding = filterConfig.getInitParameter(<span class="hljs-string">&quot;ecoding&quot;</span>);        req.getWriter().println(characterEncoding);        chain.doFilter(req, resp);    &#125; &#125;</code></pre></div><h4 id="Cookie使用方法"><a href="#Cookie使用方法" class="headerlink" title="Cookie使用方法"></a>Cookie使用方法</h4><ul><li><p>在HttpServletRequest req 中获取cookie数组</p><p>在Filter中要向下转型一下</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@WebFilter(&quot;/*&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoLoginFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;response.setContentType(<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>);HttpServletRequest req=(HttpServletRequest)request;Cookie cookies[]=req.getCookies();String userInfo=<span class="hljs-literal">null</span>;<span class="hljs-keyword">if</span>(cookies!=<span class="hljs-literal">null</span>) &#123;<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;cookies.length;i++) &#123;<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;userInfo&quot;</span>.equals(cookies[i].getName())) &#123;userInfo=cookies[i].getValue();<span class="hljs-keyword">break</span>;&#125;&#125;&#125;chain.doFilter(request, response);&#125;</code></pre></div></li><li><p>新建cookie对象，以及属性设置</p><div class="code-wrapper"><pre><code class="hljs java">Cookie cookie=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;userInfo&quot;</span>,userName+<span class="hljs-string">&quot;-&quot;</span>+password);cookie.setMaxAge(Integer.parseInt(autoLogin));<span class="hljs-comment">//已秒为单位</span>cookie.setPath(<span class="hljs-string">&quot;/AutoLoginByFilter&quot;</span>);response.addCookie(cookie);</code></pre></div></li><li><p>删除cookie对象</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;userInfo&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);        cookie.setMaxAge(<span class="hljs-number">0</span>);        response.addCookie(cookie);</code></pre></div></li></ul><h4 id="重定向和转发细节"><a href="#重定向和转发细节" class="headerlink" title="重定向和转发细节"></a>重定向和转发细节</h4><ul><li><p>一般使用变量来进行url的设置（防止项目改名，之后的更改）</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//class页面使用url设置</span>response.sendRedirect(request.getContextPath() + <span class="hljs-string">&quot;/index.jsp&quot;</span>); <span class="hljs-comment">//Jsp页面使用url设置</span> &lt;form action=<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/LoginServlet&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;  <span class="hljs-comment">//重定向不能使用变量形式</span> request.getRequestDispatcher(<span class="hljs-string">&quot;login.jsp&quot;</span>).forward(request,response);</code></pre></div><p><strong>重定向不能使用变量定义url形式</strong></p><p><del>request.getRequestDispatcher(request.getContextPath() + “&#x2F;login.jsp”).forward(request,response);</del></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>Filter</tag>
      
      <tag>cookie</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jstl和El表达式</title>
    <link href="/2023/12/09/2023-12-9%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/09/2023-12-9%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="初始化JavaBean"><a href="#初始化JavaBean" class="headerlink" title="初始化JavaBean"></a>初始化JavaBean</h4><ul><li>可以用BeanUtil工具类初始化</li><li>需要寻找jar包再查</li><li>常用方法，<strong>初始化某个属性</strong>setProperty(实体引用，参数名称，参数值)</li><li><strong>获得属性的值</strong>，getProperty(实体引用，参数名称),返回值是String</li><li><strong>一次性给多个属性赋值</strong>,populate(实体引用，Map&lt;String,extends object&gt; properties)</li></ul><h4 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h4><ul><li><p><strong>注意${}只能在域中寻找</strong></p></li><li><p><strong>简化代码</strong></p><div class="code-wrapper"><pre><code class="hljs jsp">在Servlet中：request.setAttribute(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;zhangsan&quot;</span>);request.setAttribute(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;123&quot;</span>);<span class="hljs-number">1</span><span class="hljs-number">2</span>在JSP中使用Java脚本：用户名：&lt;%=request.getAttribute(<span class="hljs-string">&quot;username&quot;</span>)%&gt;&lt;br /&gt;密码：  &lt;%=request.getAttribute(<span class="hljs-string">&quot;password&quot;</span>)%&gt;<span class="hljs-number">1</span><span class="hljs-number">2</span>使用EL表达式用户名：$&#123;username&#125;&lt;br /&gt;密码：  $&#123;password&#125;<span class="hljs-number">1</span><span class="hljs-number">2</span>EL表达式不仅能获取Servlet中存储的数据，也能简化JSP中的代码量，使程序简单易维护，另外，当域对象里面的值不存在时，使用EL表达式获取域对象里面的值返回空字符串；而使用Java脚本方式获取，返回值是<span class="hljs-literal">null</span>，会报空指针异常。EL存取变量数据的方法很简单，例如：$&#123;username&#125;。它的意思是取出某一范围中名称为username的变量。因为我们并没有指定哪一个范围的username，所以它会依序从Page、Request、Session、Application范围查找。假如途中找到username，就直接回传，不再继续找下去，但是假如全部的范围都没有找到时，就回传<span class="hljs-literal">null</span></code></pre></div></li><li><p><strong>El表达式中的运算符</strong></p><ul><li>点运算符<code>&lt;!--  访问user对象的username属性--&gt; $&#123;user.username&#125;</code></li><li>方括号运算符<ul><li><code>&lt;!--不能使用$&#123;user.user_name&#125;--&gt; $&#123;user[&quot;user_name&quot;]&#125;</code></li><li>点运算符和方括号运算符在某种情况下可以互换，如${user.username}等价于${user[“username”]}</li><li>方括号运算符还可以访问List集合或数组中指定索引的某个元素，如表达式${users[0]}用于访问集合或数组中第一个元素。在这种情况下，只能使用方括号运算符，不能使用点运算符。</li><li>方括号运算符和点运算符可以相互结合使用，如${users[0].username}，表示访问集合或者数组中的第一个元素的username属性。</li></ul></li></ul></li><li><p><strong>算数运算符</strong></p><table><thead><tr><th>算数运算符</th><th>说明</th><th>算术表达式</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加</td><td><code>$&#123;1+1&#125;</code></td><td>2</td></tr><tr><td>-</td><td>减</td><td><code>$&#123;1-1&#125;</code></td><td>0</td></tr><tr><td>*</td><td>乘</td><td><code>$&#123;1*1&#125;</code></td><td>1</td></tr><tr><td>&#x2F; (或div)</td><td>除</td><td><code>$&#123;1/1&#125;或$&#123;1 div 1&#125;</code></td><td>1</td></tr><tr><td>% (或mod)</td><td>取余(取模)</td><td><code>$&#123;1%1&#125;或$&#123;1 mod 1&#125;</code></td><td><strong>0</strong></td></tr></tbody></table></li><li><p><strong>比较运算符</strong></p><table><thead><tr><th>比较运算符</th><th>说明</th><th>算术表达式</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;(或eq)</td><td>等于</td><td>${10&#x3D;&#x3D;2}或${10 eq 2}</td><td>false</td></tr><tr><td>!&#x3D;(或ne)</td><td>不等于</td><td>${10!&#x3D;2}或${10 ne 2}</td><td>true</td></tr><tr><td>&lt;(或lt)</td><td>小于</td><td>${10&lt;2}或${10 lt 2}</td><td>false</td></tr><tr><td>(或gt)</td><td>大于</td><td>${10&gt;2}或${10 gt 2}</td><td>true</td></tr><tr><td>&lt;&#x3D;(或le)</td><td>小于等于</td><td>${10&lt;&#x3D;2}或${10 le 2}</td><td>false</td></tr><tr><td>&#x3D;(或ge)</td><td>大于等于</td><td>${10&gt;&#x3D;2}或${10 ge 2}</td><td>true</td></tr></tbody></table></li><li><p><strong>逻辑运算符</strong></p><table><thead><tr><th>逻辑运算符</th><th>说明</th><th>算术表达式</th><th>结果</th></tr></thead><tbody><tr><td><code>&amp;&amp;(and)</code></td><td>逻辑与</td><td><code>$&#123;true&amp;&amp;false&#125;或$&#123;true and false&#125;</code></td><td>false</td></tr><tr><td>&#96;</td><td></td><td>(or)&#96;</td><td>逻辑或</td></tr><tr><td><code>!(not)</code></td><td>逻辑非</td><td><code>$&#123;!=true&#125; 或$&#123;not true&#125;</code></td><td>false</td></tr></tbody></table></li><li><p><strong>empty运算符</strong></p><div class="code-wrapper"><pre><code class="hljs jsp">EL表达式中的empty运算符用于判断某个对象是否为<span class="hljs-literal">null</span>或<span class="hljs-string">&quot;&quot;</span>，结果为布尔类型，其基本的语法格式如下：$&#123;empty <span class="hljs-keyword">var</span>&#125;<span class="hljs-number">1</span><span class="hljs-keyword">var</span>变量不存在(没有定义)，结果返回<span class="hljs-literal">true</span><span class="hljs-keyword">var</span>变量的值为<span class="hljs-literal">null</span>，结果返回<span class="hljs-literal">true</span><span class="hljs-keyword">var</span>变量引用集合(Set、Map、List)类型对象，并且在集合对象中不包含任何元素时，结果返回<span class="hljs-literal">true</span></code></pre></div></li><li><p><strong>条件表达式</strong><br>EL表达式中条件运算符用于执行某种条件判断，类似于Java中的if-else语句，其语法格式如下：</p><p>${A?B:C}<br>1<br>表达式A的计算结果为布尔类型：</p><p>如果表达式A的计算结果为true，就执行表达式B，并返回B的值<br>如果表达式A的计算结果为false，就执行表达式C，并返回C的值</p></li><li><p><strong>“()”运算符</strong><br>EL表达式中的圆括号用于改变其他运算符的优先级。</p></li><li><p><strong>EL隐式对象</strong><br>不需要new就能使用的对象，自带的对象</p><ul><li><p>作用域访问对象(EL隐式对象)：</p><div class="code-wrapper"><pre><code class="hljs jsp">pageScope、requestScope、sessionScope、applicationScope</code></pre></div></li><li><p>参数访问对象</p></li><li><p>JSP隐式对象</p></li></ul><div class="code-wrapper"><pre><code class="hljs jsp">隐含对象名称描述pageContext对应于JSP页面中的pageContext对象pageScope代表page域中用于保存属性的Map对象requestScope代表request域中用于保存属性的Map对象sessionScope代表session域中用于保存属性的Map对象applicationScope代表application域中用于保存属性的Map对象param表示一个保存了所有请求参数的Map对象paramValues表示一个保存了所有请求参数的Map对象，它对于某个请求参数，返回的是String类型数组header表示一个保存了所有HTTP请求头字段的Map对象headerValues表示一个保存了所有HTTP请求头字段的Map对象，返回的是String类型数组cookie用来取得使用者的cookie值，cookie的类型是MapinitParam表示一个保存了所有Web应用初始化参数的Map对象</code></pre></div></li></ul><h4 id="param和requestScope区别"><a href="#param和requestScope区别" class="headerlink" title="param和requestScope区别"></a>param和requestScope区别</h4><ul><li>${param.name} 等价于 request.getParamter(“name”)，这两种方法一般用于服务器从<strong>页面或者客户端</strong>获取的内容。</li><li>${requestScope.name} 等价于 request.getAttribute(“name”)，一般是从<strong>服务器传递结果</strong>到页面，在页面中取出服务器保存的值。</li></ul><h4 id="JSTL"><a href="#JSTL" class="headerlink" title="JSTL"></a>JSTL</h4><ul><li><p>第一步：引入JSTL标签库对应的jar包。</p><p>​      tomcat10之后引入的jar包是（jar包可以去Maven仓库找）：<br>​      jakarta.servlet.jsp.jstl-2.0.0.jar<br>​      jakarta.servlet.jsp.jstl-api-2.0.0.jar</p></li><li><p>在IDEA当中怎么引入？<br>在WEB-INF下新建lib目录，然后将jar包拷贝到lib当中。然后将其“Add Lib…”<br>一定是要和mysql的数据库驱动一样，都是放在WEB-INF&#x2F;lib目录下的。<br>什么时候需要将jar包放到WEB-INF&#x2F;lib目录下？如果这个jar是tomcat服务器没有的。</p></li><li><p>第二步：在JSP中引入要使用标签库。（使用taglib指令引入标签库。）</p></li></ul><p>​       JSTL提供了很多种标签，你要引入哪个标签？？？？重点掌握核心标签库。</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</code></pre></div><p>​这个就是核心标签库。<br>​prefix&#x3D;”这里随便起一个名字就行了，核心标签库，大家默认的叫做c，随意。”</p><ul><li><p>JSTL标签的原理</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%<span class="hljs-meta">@taglib</span> prefix=<span class="hljs-string">&quot;c&quot;</span> uri=<span class="hljs-string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;以上uri后面的路径实际上指向了一个xxx.tld文件。tld文件实际上是一个xml配置文件。在tld文件中描述了“标签”和“java类”之间的关系。以上核心标签库对应的tld文件是：c.tld文件。它在哪里。在jakarta.servlet.jsp.jstl-<span class="hljs-number">2.0</span><span class="hljs-number">.0</span>.jar里面META-INF目录下，有一个c.tld文件。</code></pre></div></li><li><p>源码解析：配置文件tld解析</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;tag&gt;    &lt;description&gt;对该标签的描述&lt;/description&gt;    &lt;name&gt;<span class="hljs-keyword">catch</span>&lt;/name&gt; 标签的名字    &lt;tag-class&gt;org.apache.taglibs.standard.tag.common.core.CatchTag&lt;/tag-class&gt; 标签对应的java类。    &lt;body-content&gt;JSP&lt;/body-content&gt; 标签体当中可以出现的内容，如果是JSP，就表示标签体中可以出现符合JSP所有语法的代码。例如EL表达式。    &lt;attribute&gt; 属性        &lt;description&gt;        对这个属性的描述        &lt;/description&gt;        &lt;name&gt;<span class="hljs-keyword">var</span>&lt;/name&gt; 属性名        &lt;required&gt;<span class="hljs-literal">false</span>&lt;/required&gt; <span class="hljs-literal">false</span>表示该属性不是必须的。<span class="hljs-literal">true</span>表示该属性是必须的。        &lt;rtexprvalue&gt;<span class="hljs-literal">false</span>&lt;/rtexprvalue&gt; 这个描述说明了该属性是否支持EL表达式。<span class="hljs-literal">false</span>表示不支持。<span class="hljs-literal">true</span>表示支持EL表达式。    &lt;/attribute&gt;  &lt;/tag&gt;&lt;c:<span class="hljs-keyword">catch</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;&quot;</span>&gt;JSP....&lt;/c:<span class="hljs-keyword">catch</span>&gt;</code></pre></div></li><li><p><strong>各种标签</strong></p></li><li><p><code>&lt;c:out&gt;</code> 标签</p><ul><li><p>功能向页面输出一段文本 信息</p></li><li><p>使用格式 1</p><div class="code-wrapper"><pre><code class="hljs jsp"> &lt;c:out value=<span class="hljs-string">&quot;value&quot;</span> [escapeXml=<span class="hljs-string">&quot;&#123;true|false&#125;&quot;</span>]&gt;  defaultValue  &lt;/c:out&gt;    如果value的值为<span class="hljs-literal">null</span>，输出默认值  在&lt;c:out&gt;标签中有一个escapeXml属性,其默认值为<span class="hljs-literal">true</span>,意思是是否过滤为xml文档。如果为escapeXml=<span class="hljs-string">&quot;false&quot;</span>，则将其中的html、xml解析出来。如value=<span class="hljs-string">&quot;&lt;font size=16&gt;java&lt;/font&gt;&quot;</span>,会显示为大小为<span class="hljs-number">16</span>的”java“如果为escapeXml=<span class="hljs-string">&quot;true&quot;</span>，则显示&lt;font size=<span class="hljs-number">16</span>&gt;java&lt;/font&gt;       value可以使用El表达式 例如：value=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span></code></pre></div></li><li><p>使用格式 2</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;c:out value=<span class="hljs-string">&quot;value&quot;</span> [<span class="hljs-keyword">default</span>=<span class="hljs-string">&quot;defaultValue&quot;</span>] [escapeXml=<span class="hljs-string">&quot;&#123;true|false&#125;&quot;</span>]/&gt;</code></pre></div></li></ul></li><li><p><code>&lt;c:if&gt;</code>标签</p><ul><li><p>条件判断</p></li><li><p><code>&lt;c:if test=“boolean类型，支持EL表达式”&gt;&lt;/c: if&gt;</code></p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%--核心标签库中的<span class="hljs-keyword">if</span>标签--%&gt;&lt;%--test属性是必须的,支持EL表达式，test属性值必须是<span class="hljs-type">boolean</span>类型--%&gt;&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;empty param.username&#125;&quot;</span>&gt;    &lt;h1&gt;用户名不能为空&lt;/h1&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;&lt;%--没有<span class="hljs-keyword">else</span>标签--%&gt;&lt;%--<span class="hljs-keyword">if</span>标签还有<span class="hljs-keyword">var</span>属性，不是必须的--%&gt;&lt;%--<span class="hljs-keyword">if</span>标签还有scope属性，用来指定<span class="hljs-keyword">var</span>的存储域，不是必须的--%&gt;&lt;%--scope有四个值:page(pageContext域)、request、session、application--%&gt;&lt;%--将<span class="hljs-keyword">var</span>中的值存储到request域中--%&gt;&lt;c:<span class="hljs-keyword">if</span> test=<span class="hljs-string">&quot;$&#123;not empty param.username&#125;&quot;</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;v&quot;</span> scope=<span class="hljs-string">&quot;request&quot;</span>&gt;    &lt;h1&gt;欢迎$&#123;param.username&#125;&lt;/h1&gt;&lt;/c:<span class="hljs-keyword">if</span>&gt;&lt;%--从request域中取v--%&gt;&lt;%--v变量中存储的是test属性的值--%&gt;$&#123;v&#125;&lt;%--<span class="hljs-literal">true</span>或者<span class="hljs-literal">false</span>--%&gt;</code></pre></div></li></ul></li><li><p><code>&lt;c:choose&gt;</code>标签</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;%--注意：这个嵌套结构不能随便改，只能这样写--%&gt;&lt;c:choose&gt;    &lt;c:when test=<span class="hljs-string">&quot;$&#123;param.age &lt; 18&#125;&quot;</span>&gt;        青少年    &lt;/c:when&gt;    &lt;c:when test=<span class="hljs-string">&quot;$&#123;param.age &lt; 35&#125;&quot;</span>&gt;        青年    &lt;/c:when&gt;    &lt;c:when test=<span class="hljs-string">&quot;$&#123;param.age &lt; 55&#125;&quot;</span>&gt;        中年    &lt;/c:when&gt;    &lt;c:otherwise&gt;        老年    &lt;/c:otherwise&gt;&lt;/c:choose&gt;&lt;%--&lt;c:otherwise&gt;标签只能在最后--%&gt;</code></pre></div></li><li><p><code>&lt;c:forEach&gt;</code> 标签</p><ul><li><p>循环遍历</p></li><li><p>格式</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;c:forEach [<span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;varName&quot;</span>] items=<span class="hljs-string">&quot;collection&quot;</span> [varStatus=<span class="hljs-string">&quot;varStatusName&quot;</span>][begin=<span class="hljs-string">&quot;begin&quot;</span>] [end=<span class="hljs-string">&quot;end&quot;</span>] [step=<span class="hljs-string">&quot;step&quot;</span>]&gt;body content&lt;/c:forEach&gt;&lt;%--<span class="hljs-keyword">var</span>属性 将当前元素保存到page域中的名称--%&gt;&lt;%--varStatus属性包含了从集合中取出的元素的状态信息--%&gt;例如： count 元素在集合中的序列号      index 索引      first 是不是第一个元素      last 是不是最后一个元素</code></pre></div></li></ul></li><li><p><code>&lt;c:param&gt;</code>标签</p><ul><li><p>和<code>&lt;c:url&gt;</code>标签配合使用，为url添加参数</p></li><li><p>格式</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;c:param name=<span class="hljs-string">&quot;name&quot;</span> value=<span class="hljs-string">&quot;value&quot;</span>&gt;</code></pre></div></li></ul></li><li><p><code>&lt;c:url&gt;</code>标签</p><ul><li><p>格式</p><div class="code-wrapper"><pre><code class="hljs jsp">&lt;c:url value=<span class="hljs-string">&quot;value&quot;</span> [<span class="hljs-keyword">var</span>=<span class="hljs-string">&quot;varName&quot;</span>] [context=<span class="hljs-string">&quot;context&quot;</span>] [scope=<span class="hljs-string">&quot;&#123;page|request|session|application&#125;&quot;</span>]&gt;&lt;c:param&gt;标签&lt;/c:url&gt;scope 默认是page</code></pre></div></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaWeb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaWeb</tag>
      
      <tag>Jstl</tag>
      
      <tag>El表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>File，io流，</title>
    <link href="/2023/11/27/2023-11-27%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/27/2023-11-27%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="创建文件方式"><a href="#创建文件方式" class="headerlink" title="创建文件方式"></a>创建文件方式</h4><ul><li>根据路径创建文件File(String)</li><li>根据父文件目录+子路径创建文件File(File,String)</li><li>根据父目录+子路径创建文件File(String,String)</li></ul><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><ul><li>new FileOutputStream(filePath) 覆盖文件原来内容</li><li>new FileOutputStream(filePath,true) 追加内容</li></ul><h4 id="FileWriter"><a href="#FileWriter" class="headerlink" title="FileWriter"></a>FileWriter</h4><ul><li>对应FileWriter , 一定要关闭流，或者flush才能真正的把数据写入到文件</li></ul><h4 id="BufferedReader-BufferedWriter"><a href="#BufferedReader-BufferedWriter" class="headerlink" title="BufferedReader&#x2F;BufferedWriter"></a>BufferedReader&#x2F;BufferedWriter</h4><ul><li><p>是处理流，里面封装了一个属性为Reader ,可以对不同的数据源进行操作，更加灵活。节点流只能对特定的数据源进行操作，其实就是封装了节点流。可以传入不同的节点流对象，实现不同数据源的操作。</p></li><li><p>BufferWriter同理</p></li><li><p>这两者都属于字符流，关闭处理流时，只需要关闭外层流，内层流底层会自动关闭即可。</p></li><li><p>readLine() 按行读取，效率更高。</p></li><li><p>bufferedWriter.newLine();&#x2F;&#x2F;插入一个和系统相关的换行</p></li><li><p>BufferedReader 和 BufferedWriter 是字符操作 </p></li><li><p>不要去操作 二进制文件[声音，视频，doc, pdf ], 可能造成文件损坏</p></li><li><p>增加缓冲的方式来提高输入输出的效率</p></li></ul><h4 id="BufferedInputStream-BufferedOutputStream"><a href="#BufferedInputStream-BufferedOutputStream" class="headerlink" title="BufferedInputStream&#x2F;BufferedOutputStream"></a>BufferedInputStream&#x2F;BufferedOutputStream</h4><ul><li>与字符流处理流类似，区别就是这是操作字节的。</li></ul><h4 id="对象流ObjectInputStream-ObjectOutputStream"><a href="#对象流ObjectInputStream-ObjectOutputStream" class="headerlink" title="对象流ObjectInputStream&#x2F;ObjectOutputStream"></a>对象流ObjectInputStream&#x2F;ObjectOutputStream</h4><ul><li>&#x2F;&#x2F;序列化后，保存的文件格式，不是存文本，而是按照他的格式来保存 String filePath &#x3D; “e:\data.dat”;</li></ul><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dxl1.png" alt="dxl1"  /><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dxl2.png" alt="dxl2"></p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dxl3.png" alt="dxl3"  /><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">SerialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<span class="hljs-comment">//提高版本兼容性</span><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath));<span class="hljs-comment">//序列化数据到 e:\data.dat</span>oos.writeInt(<span class="hljs-number">100</span>);<span class="hljs-comment">// int -&gt; Integer (实现了 Serializable)</span>oos.writeBoolean(<span class="hljs-literal">true</span>);<span class="hljs-comment">// boolean -&gt; Boolean (实现了 Serializable)</span>oos.writeChar(<span class="hljs-string">&#x27;a&#x27;</span>);<span class="hljs-comment">// char -&gt; Character (实现了 Serializable)</span>oos.writeDouble(<span class="hljs-number">9.5</span>);<span class="hljs-comment">// double -&gt; Double (实现了 Serializable)</span>oos.writeUTF(<span class="hljs-string">&quot;韩顺平教育&quot;</span>);<span class="hljs-comment">//String</span><span class="hljs-comment">//保存一个 dog 对象</span>oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;旺财&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-string">&quot;日本&quot;</span>, <span class="hljs-string">&quot;白色&quot;</span>));oos.close();</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\data.dat&quot;</span>));<span class="hljs-comment">// 2.读取， 注意顺序</span>System.out.println(ois.readInt());System.out.println(ois.readBoolean());System.out.println(ois.readChar());System.out.println(ois.readDouble());System.out.println(ois.readUTF());System.out.println(ois.readObject());System.out.println(ois.readObject());System.out.println(ois.readObject());<span class="hljs-comment">// 3.关闭</span>ois.close();System.out.println(<span class="hljs-string">&quot;以反序列化的方式读取(恢复)ok~&quot;</span>);</code></pre></div><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/zhl.png" alt="zhl"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 看一个中文乱码问题</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CodeQuestion</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//读取 e:\\a.txt 文件到程序</span><span class="hljs-comment">//a.txt 不是utf-8,会出现乱码</span><span class="hljs-comment">//思路</span><span class="hljs-comment">//1. 创建字符输入流 BufferedReader [处理流]</span><span class="hljs-comment">//2. 使用 BufferedReader 对象读取 a.txt</span><span class="hljs-comment">//3. 默认情况下，读取文件是按照 utf-8 编码</span><span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.txt&quot;</span>;<span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();System.out.println(<span class="hljs-string">&quot;读取到的内容: &quot;</span> + s);br.close();<span class="hljs-comment">//InputStreamReader</span><span class="hljs-comment">//OutputStreamWriter</span>&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.transformation;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 演示使用 InputStreamReader 转换流解决中文乱码问题</span><span class="hljs-comment">* 将字节流 FileInputStream 转成字符流 InputStreamReader, 指定编码 gbk/utf-8</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamReader_</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;e:\\a.txt&quot;</span>;<span class="hljs-comment">//解读</span><span class="hljs-comment">//1. 把 FileInputStream 转成 InputStreamReader</span><span class="hljs-comment">//2. 指定编码 gbk</span><span class="hljs-comment">//InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath), &quot;gbk&quot;);</span><span class="hljs-comment">//3. 把 InputStreamReader 传入 BufferedReader</span><span class="hljs-comment">//BufferedReader br = new BufferedReader(isr);</span><span class="hljs-comment">//将 2 和 3 合在一起</span><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath), <span class="hljs-string">&quot;gbk&quot;</span>));<span class="hljs-comment">//4. 读取</span><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();System.out.println(<span class="hljs-string">&quot;读取内容=&quot;</span> + s);<span class="hljs-comment">//5. 关闭外层流</span>br.close();&#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 1.创建流对象</span><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;d:\\a.txt&quot;</span>), <span class="hljs-string">&quot;gbk&quot;</span>);韩顺平循序渐进学Java 零基础第<span class="hljs-number">858</span>页<span class="hljs-comment">// 2.写入</span>osw.write(<span class="hljs-string">&quot;hello,韩顺平教育~&quot;</span>);<span class="hljs-comment">// 3.关闭</span>osw.close();System.out.println(<span class="hljs-string">&quot;保存成功~&quot;</span>);</code></pre></div><h4 id="标准输入输出流"><a href="#标准输入输出流" class="headerlink" title="标准输入输出流"></a>标准输入输出流</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/bzh.png" alt="bzh"></p><h4 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dyl.png" alt="dyl"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/dyl1.png" alt="dyl1"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.transformation;<span class="hljs-keyword">import</span> java.io.FileWriter;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintWriter;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 演示 PrintWriter 使用方式</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintWriter_</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//PrintWriter printWriter = new PrintWriter(System.out);</span><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">printWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(<span class="hljs-string">&quot;e:\\f2.txt&quot;</span>));     printWriter.print(<span class="hljs-string">&quot;hi, 北京你好~~~~&quot;</span>);        printWriter.close();<span class="hljs-comment">//flush + 关闭流, 才会将数据写入到文件..</span>    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.printstream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.io.PrintStream;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">* 演示 PrintStream （字节打印流/输出流）</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStream_</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-type">PrintStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> System.out;<span class="hljs-comment">//在默认情况下，PrintStream 输出数据的位置是 标准输出，即显示器</span><span class="hljs-comment">/*</span><span class="hljs-comment">public void print(String s) &#123;</span><span class="hljs-comment">if (s == null) &#123;</span><span class="hljs-comment">s = &quot;null&quot;;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">write(s);</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">*/</span>out.print(<span class="hljs-string">&quot;john, hello&quot;</span>);<span class="hljs-comment">//因为 print 底层使用的是 write , 所以我们可以直接调用 write 进行打印/输出</span>out.write(<span class="hljs-string">&quot;韩顺平,你好&quot;</span>.getBytes());out.close();<span class="hljs-comment">//我们可以去修改打印流输出的位置/设备</span><span class="hljs-comment">//1. 输出修改成到 &quot;e:\\f1.txt&quot;</span><span class="hljs-comment">//2. &quot;hello, 韩顺平教育~&quot; 就会输出到 e:\f1.txt</span><span class="hljs-comment">//3. public static void setOut(PrintStream out) &#123;</span><span class="hljs-comment">// checkIO();</span><span class="hljs-comment">// setOut0(out); // native 方法，修改了 out</span><span class="hljs-comment">// &#125;</span>System.setOut(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(<span class="hljs-string">&quot;e:\\f1.txt&quot;</span>));System.out.println(<span class="hljs-string">&quot;hello, 韩顺平教育~&quot;</span>);&#125;&#125;printWriter.print(<span class="hljs-string">&quot;hi, 北京你好~~~~&quot;</span>);printWriter.close();<span class="hljs-comment">//flush + 关闭流, 才会将数据写入到文件..</span>&#125;</code></pre></div><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/pro.png" alt="pro"></p><p><strong>一般写法</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.properties_;<span class="hljs-keyword">import</span> java.io.BufferedReader;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">import</span> java.io.FileReader;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties01</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//读取 mysql.properties 文件，并得到 ip, user 和 pwd</span><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">//循环读取</span>String[] split = line.split(<span class="hljs-string">&quot;=&quot;</span>);<span class="hljs-comment">//如果我们要求指定的 ip 值</span><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;ip&quot;</span>.equals(split[<span class="hljs-number">0</span>])) &#123;System.out.println(split[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;值是: &quot;</span> + split[<span class="hljs-number">1</span>]);&#125;&#125;br.close();&#125;&#125;</code></pre></div><p><strong>读配置文件</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.properties_;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">import</span> java.io.FileReader;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties02</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//使用 Properties 类来读取 mysql.properties 文件</span><span class="hljs-comment">//1. 创建 Properties 对象</span><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<span class="hljs-comment">//2. 加载指定配置文件</span>properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<span class="hljs-comment">//3. 把 k-v 显示控制台</span>properties.list(System.out);<span class="hljs-comment">//4. 根据 key 获取对应的值</span><span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;pwd&quot;</span>);System.out.println(<span class="hljs-string">&quot;用户名=&quot;</span> + user);System.out.println(<span class="hljs-string">&quot;密码是=&quot;</span> + pwd);&#125;&#125;</code></pre></div><p><strong>写配置文件</strong></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.hspedu.properties_;<span class="hljs-keyword">import</span> java.io.FileNotFoundException;<span class="hljs-keyword">import</span> java.io.FileOutputStream;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment">* <span class="hljs-doctag">@author</span> 韩顺平</span><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment">*/</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Properties03</span> &#123;<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<span class="hljs-comment">//使用 Properties 类来创建 配置文件, 修改配置文件内容</span><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<span class="hljs-comment">//创建</span><span class="hljs-comment">//1.如果该文件没有 key 就是创建</span><span class="hljs-comment">//2.如果该文件有 key ,就是修改</span><span class="hljs-comment">/*</span><span class="hljs-comment">Properties 父类是 Hashtable ， 底层就是 Hashtable 核心方法</span><span class="hljs-comment">public synchronized V put(K key, V value) &#123;</span><span class="hljs-comment">// Make sure the value is not null</span><span class="hljs-comment">if (value == null) &#123;</span><span class="hljs-comment">throw new NullPointerException();</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">// Makes sure the key is not already in the hashtable. Entry&lt;?,?&gt; tab[] = table;</span><span class="hljs-comment">韩顺平循序渐进学Java 零基础第866页int hash = key.hashCode();</span><span class="hljs-comment">int index = (hash &amp; 0x7FFFFFFF) % tab.length;</span><span class="hljs-comment">@SuppressWarnings(&quot;unchecked&quot;)</span><span class="hljs-comment">Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><span class="hljs-comment">for(; entry != null ; entry = entry.next) &#123;</span><span class="hljs-comment">if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><span class="hljs-comment">V old = entry.value;</span><span class="hljs-comment">entry.value = value;//如果 key 存在，就替换</span><span class="hljs-comment">return old;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">addEntry(hash, key, value, index);//如果是新 k, 就 addEntry</span><span class="hljs-comment">return null;</span><span class="hljs-comment">&#125;</span><span class="hljs-comment">*/</span>properties.setProperty(<span class="hljs-string">&quot;charset&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>);properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;汤姆&quot;</span>);<span class="hljs-comment">//注意保存时，是中文的 unicode 码值</span>properties.setProperty(<span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;888888&quot;</span>);<span class="hljs-comment">//将 k-v 存储文件中即可</span>properties.store(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;src\\mysql2.properties&quot;</span>), <span class="hljs-literal">null</span>);<span class="hljs-comment">//第二个属性是注解</span>System.out.println(<span class="hljs-string">&quot;保存配置文件成功~&quot;</span>);&#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绑定机制只是针对方法有用，run方法不会影响runnable 实现类的属性的值</title>
    <link href="/2023/11/26/2023-11-26%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/26/2023-11-26%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="绑定机制只是针对方法有用"><a href="#绑定机制只是针对方法有用" class="headerlink" title="绑定机制只是针对方法有用"></a>绑定机制只是针对方法有用</h4><ul><li>访问属性是访问的声明类的属性，例如父类子类有相同的属性名，向上转型，访问属性，访问的是父类的属性，而不是子类的，访问同名方法，访问的是子类的而不是父类的，所以说，动态绑定针对方法有用，属性不是！！！！！！</li></ul><p>动态绑定：<a href="https://blog.csdn.net/qq_43900956/article/details/115803111">https://blog.csdn.net/qq_43900956/article/details/115803111</a></p><h4 id="今天实现了坦克的对战功能非常爽"><a href="#今天实现了坦克的对战功能非常爽" class="headerlink" title="今天实现了坦克的对战功能非常爽"></a>今天实现了坦克的对战功能非常爽</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/tank04.png" alt="tank04"></p><h4 id="线程-run方法不会影响runnable-实现类的属性的值，是多少结束后还是多少。"><a href="#线程-run方法不会影响runnable-实现类的属性的值，是多少结束后还是多少。" class="headerlink" title="线程 run方法不会影响runnable 实现类的属性的值，是多少结束后还是多少。"></a>线程 run方法不会影响runnable 实现类的属性的值，是多少结束后还是多少。</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(a).start();        System.out.println(a.s);        System.out.println(a.a1);        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.s.size(); i ++)&#123;            System.out.println(a.s.get(i));    &#125;&#125;&#125;<span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;    Vector&lt;Integer&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vector</span>&lt;&gt;();    <span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;        s.add(<span class="hljs-number">1</span>);        s.add(<span class="hljs-number">2</span>);        s.add(<span class="hljs-number">3</span>);    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;        s.add(<span class="hljs-number">4</span>);        s.add(<span class="hljs-number">5</span>);        s.add(<span class="hljs-number">6</span>);        System.out.println(<span class="hljs-literal">false</span>);        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;            <span class="hljs-keyword">if</span>(a1 == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;            a1 --;        &#125;    &#125;&#125;</code></pre></div><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><div class="code-wrapper"><pre><code class="hljs java">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<span class="hljs-number">5</span><span class="hljs-number">1</span><span class="hljs-number">2</span><span class="hljs-number">3</span><span class="hljs-literal">false</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线程</title>
    <link href="/2023/11/25/2023-11-25%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/25/2023-11-25%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><h5 id="线程方法"><a href="#线程方法" class="headerlink" title="线程方法"></a>线程方法</h5><ul><li>interrupt 方法，中断休眠中的线程，相当于唤醒。</li><li>main()做为入口开始运行的。　是一个线程,同时还是一个进程</li><li>yield()进程礼让，不一定成功</li><li>join() 插入，执行完了，在允许别的进程执行。</li><li>setDaemon，设置为守护线程，当用户线程结束后，守护线程结束，垃圾回收机制，是守护线程。</li></ul><h5 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h5><ul><li>this锁推断出，this指向的是runnable接口的实现类。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//如果在静态方法中，实现一个同步代码块.</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">synchronized</span> (SellTicket03.class) &#123;            System.out.println(<span class="hljs-string">&quot;m2&quot;</span>);        &#125;    &#125;<span class="hljs-comment">//所指向的是类的class对象。</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java">/<span class="hljs-number">1.</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;&#125; 就是一个同步方法<span class="hljs-comment">//2. 这时锁在 this对象</span><span class="hljs-comment">//3. 也可以在代码块上写 synchronize ,同步代码块, 互斥锁还是在this对象</span><span class="hljs-keyword">public</span> <span class="hljs-comment">/*synchronized*/</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span>&#123;            <span class="hljs-keyword">synchronized</span> (<span class="hljs-comment">/*this*/</span> object) &#123;            <span class="hljs-keyword">if</span> (ticketNum &lt;= <span class="hljs-number">0</span>) &#123;                System.out.println(<span class="hljs-string">&quot;售票结束...&quot;</span>);                loop = <span class="hljs-literal">false</span>;                <span class="hljs-keyword">return</span>;            &#125;        &#125;&#125;<span class="hljs-comment">//也可以在runnable实现类中定义一个object 对象，使object对象成为锁。</span><span class="hljs-comment">//最重要的是锁的唯一性！！！！！！</span></code></pre></div><ul><li><p>代码块加锁的效率更高。</p></li><li><p>代码块执行完，出未处理错误、异常，break、return ，执行 wait方法会释放锁。</p></li><li><p>sleep(),yield()方法不会释放锁。线程被挂起 suspend方法，不会释放锁。</p><ul><li><code>Thread</code>类的<code>suspend()</code>方法使线程无法运行到等待状态。如果要停止线程执行并在发生特定事件时再次启动，则使用此方法。 此方法允许线程暂时停止执行。 可以使用<code>resume()</code>方法恢复挂起的线程。 &#x2F;&#x2F;更多请阅读：<a href="https://www.yiibai.com/java_multithreading/java-thread-suspend-method.html">https://www.yiibai.com/java_multithreading/java-thread-suspend-method.html</a></li></ul></li><li><p>suspend和resume方法不推荐使用，避免使用。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>画图形</title>
    <link href="/2023/11/23/2023-11-23%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/23/2023-11-23%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="今天实现了坦克的移动和发射"><a href="#今天实现了坦克的移动和发射" class="headerlink" title="今天实现了坦克的移动和发射"></a>今天实现了坦克的移动和发射</h4><p>熟悉了线程基本用法</p><ul><li><code>thread.start()</code>实际上是启动run方法。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//线程代理类 , 模拟了一个极简的 Thread 类</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<span class="hljs-comment">//你可以把 Proxy 类当做 ThreadProxy</span><span class="hljs-keyword">private</span> <span class="hljs-type">Runnable</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//属性，类型是 Runnable</span><span class="hljs-meta">@Override</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">if</span> (target != <span class="hljs-literal">null</span>) &#123;target.run();<span class="hljs-comment">//动态绑定（运行类型 Tiger）</span>&#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadProxy</span><span class="hljs-params">(Runnable target)</span> &#123;<span class="hljs-built_in">this</span>.target = target;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;start0();<span class="hljs-comment">//这个方法时真正实现多线程方法</span>&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start0</span><span class="hljs-params">()</span> &#123;run();&#125;&#125;</code></pre></div><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/tank1.png" alt="tank1"></p><h4 id="画图形"><a href="#画图形" class="headerlink" title="画图形"></a>画图形</h4><ul><li>JFrame  窗口，放画板 JPanel , 画笔Graphics 在JPanel 画图形</li><li>第一次打开画板会调用 paint()方法，改变窗口大小，最大化，最小化，repaint(),等会重新调用paint()方法。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>泛型，内部类</title>
    <link href="/2023/11/22/2023-11-22%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/22/2023-11-22%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><h5 id="链接：-https-www-cnblogs-com-fnlingnzb-learner-p-7265104-html"><a href="#链接：-https-www-cnblogs-com-fnlingnzb-learner-p-7265104-html" class="headerlink" title="链接： https://www.cnblogs.com/fnlingnzb-learner/p/7265104.html"></a>链接： <a href="https://www.cnblogs.com/fnlingnzb-learner/p/7265104.html">https://www.cnblogs.com/fnlingnzb-learner/p/7265104.html</a></h5><ul><li>使用泛型的数组不能初始化。</li><li>静态方法中不能使用泛型。</li><li>泛型可以传入子类</li><li>没有指定类型，默认为Object</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//在jdk8 中，可以在接口中，使用默认方法, 也是可以使用泛型</span><span class="hljs-keyword">default</span> R <span class="hljs-title function_">method</span><span class="hljs-params">(U u)</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;</code></pre></div><ul><li><p>实现接口时，直接指定泛型接口的类型</p></li><li><p>通配符，取出时，就是Object通配符，取出时，就是Object</p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//List&lt;? extends AA&gt; c： 表示 上限，可以接受 AA或者AA子类</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//List&lt;? super AA&gt; c: 支持AA类以及AA类的父类，不限于直接父类</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//泛型没有继承性</span><span class="hljs-comment">//List&lt;Object&gt; list = new ArrayList&lt;String&gt;(); xxxxx</span></code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticGenerator</span>&lt;T&gt; &#123;    ....    ....    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 如果在类中定义使用泛型的静态方法，需要添加额外的泛型声明（将这个方法定义成泛型方法）</span><span class="hljs-comment">     * 即使静态方法要使用泛型类中已经声明过的泛型也不可以。</span><span class="hljs-comment">     * 如：public static void show(T t)&#123;..&#125;,此时编译器会提示错误信息：</span><span class="hljs-comment">          &quot;StaticGenerator cannot be refrenced from static context&quot;</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(T t)</span>&#123;    &#125;&#125;</code></pre></div><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>1：非静态内部类，必须有一个外部类的引用才能创建。</p><p>2：在外部类的非静态方法中，因为有隐含的外部类引用this，所以可以直接创建非静态内部类。</p><p>3：在外部类的静态方法中，因为没有this，所以必须先获得外部类引用，然后创建非静态内部类。</p><p>4：静态内部类，不需要外部类引用就可以直接创建。</p><p>5：同时静态的内部类，也不能直接访问外部类的非静态方法。</p><p>6：由此可以推测，非静态内部类之所以可以直接访问外部类的方法，是因为创建非静态内部类时，有一个隐含的外部类引用被传递进来。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日期，HashSet，treeSet,Map,集合</title>
    <link href="/2023/11/21/2023-11-21%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/21/2023-11-21%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h5 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h5><ul><li>Date</li><li>Calendar</li><li>LocalDateTime</li><li>DateTimeFormatter</li><li>Instant</li></ul><h5 id="编程技巧"><a href="#编程技巧" class="headerlink" title="编程技巧"></a>编程技巧</h5><ul><li>判断数据是否合理<ul><li>写正确的判断条件，取反。</li></ul></li></ul><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><ul><li>未重写equals判断的是对象地址是不是相同。</li></ul><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><ul><li>ArrayList 线程不安全，效率高。</li><li>vector线程安全</li></ul><h5 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h5><ul><li>判断是不是相等，首先看hashcode 是不是相同，如果相同，调用equal方法进行比较，如果不相同再进行添加。</li><li>如果自己写的类要重写hashcode 和 equal方法。</li></ul><h4 id="知识点截图"><a href="#知识点截图" class="headerlink" title="知识点截图"></a>知识点截图</h4><h5 id="HashSet和TreeSet去重比较"><a href="#HashSet和TreeSet去重比较" class="headerlink" title="HashSet和TreeSet去重比较"></a>HashSet和TreeSet去重比较</h5><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(1).png"></h4><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(2).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(6).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(9).png"></p><h5 id="HashSet-1"><a href="#HashSet-1" class="headerlink" title="HashSet"></a>HashSet</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(3).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(10).png"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//个人理解remove(p1),需要重新计算hashcode 装换成hash值在转换成索引，到索引去比较，如果改了其中属性值hashcode值也会变。</span></code></pre></div><h5 id="Collections-工具类）"><a href="#Collections-工具类）" class="headerlink" title="Collections(工具类）"></a>Collections(工具类）<img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(4).png"><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(12).png"></h5><h5 id="ProPerties-配置文件使用"><a href="#ProPerties-配置文件使用" class="headerlink" title="ProPerties(配置文件使用)"></a>ProPerties(配置文件使用)</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(7).png"></p><h5 id="Vector和ArrayList比较"><a href="#Vector和ArrayList比较" class="headerlink" title="Vector和ArrayList比较"></a>Vector和ArrayList比较</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(8).png"></p><h5 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(11).png"></p><h5 id="如何选择集合类"><a href="#如何选择集合类" class="headerlink" title="如何选择集合类"></a>如何选择集合类</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(13).png"></p><h5 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/11%20(14).png"></p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//使用不含Comparator接口的构造器，自定义的类需要实现Comparator接口，因为底层会把对象转成Comparable类型</span></code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>空间存储，String字符串</title>
    <link href="/2023/11/20/2023-11-20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/20/2023-11-20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h5 id="空间存储"><a href="#空间存储" class="headerlink" title="空间存储"></a>空间存储</h5><ul><li>栈中存储的是基本类型变量，和对象引用。</li><li>堆中存储的是对象</li><li>常量池存储的是字符串常量，基本类型常量。</li></ul><h5 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h5><ul><li><p>string数组中有<code>final char[]</code>数组属性，char数组中的值可以修改，但是char 地址是不可以修改的。</p></li><li><p><code>String s = &quot;aaa&quot; + &quot;bbb&quot;</code> 等价于 <code>String s = &quot;aaabbb&quot;</code>创建了一个对象</p></li><li><p><code>String s = &quot;aaa&quot;</code> 先查看常量池，如果有直接指向，如果没有直接创建，并指向，最终指向的是常量池地址空间。</p></li><li><p><code>String s = new String(&quot;aaa&quot;);</code>先在堆中创建空间，维护value属性，指向常量池，常量池如果有直接通过value属性指向，如果没有创建后指向。最后指向的是堆中的地址空间。</p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;china&quot;</span>;  <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;china&quot;</span>;  <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;china&quot;</span>;  <span class="hljs-type">String</span> <span class="hljs-variable">ss1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;china&quot;</span>);  <span class="hljs-type">String</span> <span class="hljs-variable">ss2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;china&quot;</span>);  <span class="hljs-type">String</span> <span class="hljs-variable">ss3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;china&quot;</span>);</code></pre></div><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/20190130125804477.png" style="zoom: 200%;" /><ul><li>String intern() 方法 首先在常量池中查看是否存在跟当前对象字符串相同的常量，如果有直接返回字符串常量的地址，如果没有直接在常量池中创建一个当前字符串常量（对象）并返回地址。最终返回的是常量池的地址。</li><li><code>&quot;sdf&quot;</code>表示的是常量池中的地址如果比较的话。</li><li>字符创常量池的常量也算对象。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cdf&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s + b;  <span class="hljs-comment">/* 底层:</span><span class="hljs-comment">1. 创建stringBuilder ,StringBuilder是临时缓冲区</span><span class="hljs-comment">2.append方法追加 &quot;cdf&quot; 和 &quot;abc&quot;</span><span class="hljs-comment">3.toString 返回new 一个String 对象 value 指向常量池&quot;abccdf&quot;</span><span class="hljs-comment">*/</span></code></pre></div><ul><li><p>数组默认是放在堆里面的。</p></li><li><p><strong>调方法会产生新栈</strong> ，相当于是值传递。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/zfu1.png"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/zuf.png"></p><h5 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h5><ul><li>线程<strong>不安全</strong>，如果是 <strong>单线程</strong>，最好的选择。</li><li>比StringBuffer快</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>final,static零碎知识点,枚举,注解,IDEAmain传参,代码块,设计模式</title>
    <link href="/2023/11/19/2023-11-19%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/19/2023-11-19%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java-零碎知识点"><a href="#java-零碎知识点" class="headerlink" title="java 零碎知识点"></a>java 零碎知识点</h4><h4 id="final-static零碎知识点"><a href="#final-static零碎知识点" class="headerlink" title="final,static零碎知识点"></a>final,static零碎知识点</h4><ul><li>final 类不能被继承。</li><li>通过反射机制获得对象的名称，用当前对象生成class对象，通过class对象调用getName方法获取当前对象名称。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectNameExample</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">// 创建一个对象</span>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();                <span class="hljs-comment">// 获取对象的Class对象</span>        Class&lt;?&gt; clazz = obj.getClass();                <span class="hljs-comment">// 获取类的名称</span>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> clazz.getName();                System.out.println(<span class="hljs-string">&quot;对象的名称: &quot;</span> + className);    &#125;&#125;--------------------------------------------------------<span class="hljs-comment">//对象的名称: java.lang.Object</span></code></pre></div><ul><li>static 修饰的变量通过调用返回值为static 修饰的返回类型的方法，不能调用没有static修饰的返回值的方法。</li><li>静态代码块跟类加载相关，也就是说当类加载的时候执行静态代码块。</li><li>构造器隐藏着super（）和普通代码块的执行和普通属性的初始化。</li><li>final 和 static 一般配合使用效率更高，底层编译器做了优化处理。</li><li>运行时异常如果没有声明如何处理异常，默认是throws。</li><li>只要有基本数据类型，就是值的判断。</li></ul><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><ul><li>枚举隐式继承了 Enum类，枚举类是final类。</li></ul><h4 id="当日知识截图分类"><a href="#当日知识截图分类" class="headerlink" title="当日知识截图分类"></a>当日知识截图分类</h4><h5 id="SuppressWarnings-注解（消除warning）"><a href="#SuppressWarnings-注解（消除warning）" class="headerlink" title="SuppressWarnings 注解（消除warning）"></a>SuppressWarnings 注解（消除warning）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(23).png" alt="1 (23)"></p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(1).png" alt="1 (1)"></h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(4).png" alt="1 (4)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(11).png" alt="1 (11)"></p><h5 id="IDEAmain传参"><a href="#IDEAmain传参" class="headerlink" title="IDEAmain传参"></a>IDEAmain传参</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(2).png" alt="1 (2)"></p><h5 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(12).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(8).png" alt="1 (8)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(3).png" alt="1 (3)"></p><h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(5).png" alt="1 (5)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(6).png" alt="1 (6)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(10).png" alt="1 (10)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(22).png" alt="1 (22)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(35).png" alt="1 (35)"></p><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(17).png" alt="1 (17)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(34).png" alt="1 (34)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(7).png" alt="1 (7)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(15).png" alt="1 (15)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(14).png" alt="1 (14)"></p><h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(13).png" alt="1 (13)"></p><h5 id="IDEA展示实现的接口类"><a href="#IDEA展示实现的接口类" class="headerlink" title="IDEA展示实现的接口类"></a>IDEA展示实现的接口类</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(16).png" alt="1 (16)"></p><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(18).png"></p><h5 id="Override注解（判断子类是否重写方法）"><a href="#Override注解（判断子类是否重写方法）" class="headerlink" title="Override注解（判断子类是否重写方法）"></a>Override注解（判断子类是否重写方法）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(19).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(25).png" alt="1 (25)"></p><h5 id="IDEA图解类关系"><a href="#IDEA图解类关系" class="headerlink" title="IDEA图解类关系"></a>IDEA图解类关系</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(20).png" alt="1 (20)"></p><h5 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(21).png" alt="1 (21)"></p><h5 id="接口引用"><a href="#接口引用" class="headerlink" title="接口引用"></a>接口引用</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(24).png" alt="1 (24)"></p><h5 id="静态方法（类方法）"><a href="#静态方法（类方法）" class="headerlink" title="静态方法（类方法）"></a>静态方法（类方法）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(26).png" alt="1 (26)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(32).png" alt="1 (32)"></p><h5 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(28).png" alt="1 (28)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(29).png" alt="1 (29)"></p><h5 id="Deprecated注解（代表某个类或者方法已过时）"><a href="#Deprecated注解（代表某个类或者方法已过时）" class="headerlink" title="Deprecated注解（代表某个类或者方法已过时）"></a>Deprecated注解（代表某个类或者方法已过时）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(30).png" alt="1 (30)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(31).png" alt="1 (31)"></p><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(33).png" alt="1 (33)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(38).png" alt="1 (38)"></p><h5 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(36).png" alt="1 (36)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(39).png" alt="1 (39)"></p><h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(37).png" alt="1 (37)"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java 8 新特性，java零碎知识点，IDEA断点调试</title>
    <link href="/2023/11/18/2023-11-18%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/18/2023-11-18%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java-8-新特性"><a href="#java-8-新特性" class="headerlink" title="java 8 新特性"></a>java 8 新特性</h4><h5 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h5><p>个人理解： 用目前存在的方法，构造器替代Lambda表达式的主体，使代码更简洁。</p><h5 id="链接：-https-www-cnblogs-com-xiaoxi-p-7099667-html"><a href="#链接：-https-www-cnblogs-com-xiaoxi-p-7099667-html" class="headerlink" title="链接： https://www.cnblogs.com/xiaoxi/p/7099667.html"></a>链接： <a href="https://www.cnblogs.com/xiaoxi/p/7099667.html">https://www.cnblogs.com/xiaoxi/p/7099667.html</a></h5><h5 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h5><p>个人理解： 为了添加接口方法，而不影响已经实现该接口的类。</p><h5 id="链接：https-segmentfault-com-a-1190000017433982"><a href="#链接：https-segmentfault-com-a-1190000017433982" class="headerlink" title="链接：https://segmentfault.com/a/1190000017433982"></a>链接：<a href="https://segmentfault.com/a/1190000017433982">https://segmentfault.com/a/1190000017433982</a></h5><h5 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h5><p>个人理解： 一个解决空指&gt;针异常的特殊类。</p><h5 id="链接"><a href="#链接" class="headerlink" title="链接 : &lt;https://juejin.cn/post/6844903960050925581"></a>链接 : &lt;<a href="https://juejin.cn/post/6844903960050925581">https://juejin.cn/post/6844903960050925581</a></h5><h5 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h5><p>个人理解： 为了便捷的处理集合元素。</p><h5 id="链接：https-juejin-cn-post-6844903830254010381"><a href="#链接：https-juejin-cn-post-6844903830254010381" class="headerlink" title="链接：https://juejin.cn/post/6844903830254010381"></a>链接：<a href="https://juejin.cn/post/6844903830254010381">https://juejin.cn/post/6844903830254010381</a></h5><h4 id="java零碎知识点"><a href="#java零碎知识点" class="headerlink" title="java零碎知识点"></a>java零碎知识点</h4><ul><li>继承其实是建立了一个查找机制，就近原则。</li><li>属性没有重写之说，看编译类型（引用类型）。</li><li>instanceof 是判断运行类型是否是某个类的类型或子类型。</li><li>当调用对象方法时，该方法会与该对象的运行类型绑定，属性没有动态绑定机制，哪里声明哪里使用。<ul><li>用人话说就是，调用方法时先从运行类型类中查看方法是否存在如果存在，直接调用，不存在从父类中查找，如果从父类中找到了该方法，并且该方法中还调用了另一个方法，此时跟之前一样，先从运行类中寻找方法，属性不是，哪里声明哪里使用。</li></ul></li><li>向上转型只能调用父类的方法，不能使用子类的特有方法，这就是为什么要向下转型。</li></ul><h4 id="IDEA断点调试"><a href="#IDEA断点调试" class="headerlink" title="IDEA断点调试"></a>IDEA断点调试</h4><ul><li><strong>F8</strong>执行下一条语句。</li><li><strong>F7</strong> 跳入方法内</li><li><strong>shift + F8</strong> 跳出方法</li><li><strong>F9</strong> 直接执行到下一个断点（resume）</li></ul><p>感悟： 看视频能get到新的点，多加练习，不要光看。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次完成六公里hh</title>
    <link href="/2023/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%88%90%E5%85%AD%E5%85%AC%E9%87%8Chh/"/>
    <url>/2023/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%88%90%E5%85%AD%E5%85%AC%E9%87%8Chh/</url>
    
    <content type="html"><![CDATA[<p>今天人生第一次完成六公里，跑步太爽了，感觉还不错，就是天气越来越冷了，风吹的牙有点疼hh，现在操场熄灯变早了，但还是有很多人跑步，氛围挺好的,洗个澡睡觉啦hh。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/4A6F42B9858CD44B30CF0A6AB5B639F1.jpg" alt="4A6F42B9858CD44B30CF0A6AB5B639F1"></p><p>跑步过程中，有个人突然从后面跟了上来，我带着他跑了，3公里左右，然后他就不跟了，感觉还是有个伙伴跑着有激情，虽然我们不认识。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/C72ABEA2FA2A120552398E7B01FFE618.jpg" alt="C72ABEA2FA2A120552398E7B01FFE618"></p><p>还有就是今天的月亮好低！！，跟楼肩并肩了。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/FD339069922865F1C7E9C671739A5811.jpg" alt="FD339069922865F1C7E9C671739A5811"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
      <category>运动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活记录</tag>
      
      <tag>运动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lambdal，泛型类， 泛型接口，多线程编程</title>
    <link href="/2023/11/16/2023-11-17%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/16/2023-11-17%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="Lambdal"><a href="#Lambdal" class="headerlink" title="Lambdal"></a>Lambdal</h4><h5 id="链接：-https-blog-csdn-net-weixin-40979518-article-details-118546367"><a href="#链接：-https-blog-csdn-net-weixin-40979518-article-details-118546367" class="headerlink" title="链接： https://blog.csdn.net/weixin_40979518/article/details/118546367"></a>链接： <a href="https://blog.csdn.net/weixin_40979518/article/details/118546367">https://blog.csdn.net/weixin_40979518/article/details/118546367</a></h5><h4 id="泛型类，-泛型接口"><a href="#泛型类，-泛型接口" class="headerlink" title="泛型类， 泛型接口"></a>泛型类， 泛型接口</h4><h5 id="链接-：-https-juejin-cn-post-6844903827343147021"><a href="#链接-：-https-juejin-cn-post-6844903827343147021" class="headerlink" title="链接 ： https://juejin.cn/post/6844903827343147021"></a>链接 ： <a href="https://juejin.cn/post/6844903827343147021">https://juejin.cn/post/6844903827343147021</a></h5><ul><li>泛型的类型参数只能是类类型，不能是简单类型。</li><li>不能对确切的泛型类型使用instanceof操作。如下面的操作是非法的，编译时会出错。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(ex_num <span class="hljs-keyword">instanceof</span> Generic&lt;Number&gt;)&#123;   &#125;</code></pre></div><h4 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h4><h5 id="链接-：https-www-runoob-com-java-java-multithreading-html"><a href="#链接-：https-www-runoob-com-java-java-multithreading-html" class="headerlink" title="链接 ：https://www.runoob.com/java/java-multithreading.html"></a>链接 ：<a href="https://www.runoob.com/java/java-multithreading.html">https://www.runoob.com/java/java-multithreading.html</a></h5><h5 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h5><ul><li>有三种方式新建线程<ul><li>类实现Runable 接口，实现run方法，实现Runable接口的类的对象，作为参数传入<code>new Thread()</code> ,启动线程使用<code>start()</code>方法，线程对象调用run方法。</li><li>类继承 Thread ，同实现Runable接口一样，重写run方法，创建一个对象，作为参数传入<code>new Thread()</code>,启动线程使用<code>start()</code>方法，线程对象调用run方法。</li><li>类实现 Callable接口， 实现call方法，call方法作为线程主体，并且有返回值，创建Callable对象，使用FutureTask类进行包装 ,该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。使用 FutureTask 对象作为 Thread 对象的 参数 创建并启动新线程。调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ul></li></ul><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><h5 id="个人理解-1"><a href="#个人理解-1" class="headerlink" title="个人理解"></a>个人理解</h5><ul><li>为了给方法，传入代码块，更灵活，更多变。</li><li>可以理解为，实现了类内接口方法，并实例化了一个对象，传给接口引用。</li><li>配合接口泛型，更加灵活。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>集合框架图，集合细节，泛型，序列化</title>
    <link href="/2023/11/16/2023-11-16%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/16/2023-11-16%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="Stack-笔记"><a href="#Stack-笔记" class="headerlink" title="Stack 笔记"></a>Stack 笔记</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;        Stack&lt;Integer&gt; s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();        Stack&lt;Integer&gt; s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();        s1.push(x);        s2.push(x);        <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> s1.peek();        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> s2.peek();        System.out.println(p1==p2);        System.out.println(s1.peek() == s2.peek());&#125;</code></pre></div><p>如果x在[-128, 127]，那么两次都会输出true；如果不是在这个范围，会输出true和false。</p><p>原因在于autobox，对于某些值，s1.push(x)会转化为s1.push(Integer.valueOf(x))，然后会利用cache的值，导致实例复用。翻译渣，请参考原解释： <a href="https://stackoverflow.com/questions/31156067/java-stack-peek-behavior">https://stackoverflow.com/questions/31156067/java-stack-peek-behavior</a></p><p>我的理解： 在[-128,127] 会缓存，不会直接构造对象，可能不对。</p><h4 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a>集合框架图</h4><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif"></p><h4 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h4><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/java-coll-2020-11-16.png"></p><h4 id="集合细节"><a href="#集合细节" class="headerlink" title="集合细节"></a>集合细节</h4><ul><li>任何对象加入集合类后，自动转变为Object类型，所以在取出的时候，需要进行强制类型转换。</li><li>集合框架的类和接口均在java.util包中。</li></ul><h4 id="ArrayList-和-LinkedList"><a href="#ArrayList-和-LinkedList" class="headerlink" title="ArrayList  和 LinkedList"></a>ArrayList  和 LinkedList</h4><ul><li><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><ul><li>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</li><li>ArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</li></ul></li><li><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><ul><li>LinkedList 继承了 AbstractSequentialList 类。</li><li>LinkedList 实现了 Queue 接口，可作为队列使用。</li><li>LinkedList 实现了 List 接口，可进行列表的相关操作。</li><li>LinkedList 实现了 Deque 接口，可作为队列使用。</li><li>LinkedList 实现了 Cloneable 接口，可实现克隆。</li><li>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</li><li>更多的情况下我们使用 ArrayList 访问列表中的随机元素更加高效，但以下几种情况 LinkedList 提供了更高效的方法。<ul><li>在列表开头添加元素：<code>addFirst</code></li><li>在列表结尾添加元素：<code>addLast</code></li><li>在列表开头移除元素：<code>removeFirst()</code></li><li>在列表结尾移除元素：<code>removeLast()</code></li><li>获取列表开头的元素：<code>getFirst()</code></li><li>获取列表结尾的元素：<code>getLast()</code></li></ul></li></ul></li><li><h5 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h5><ul><li><strong>以下情况使用 ArrayList :</strong><ul><li>频繁访问列表中的某一个元素。</li><li>只需要在列表末尾进行添加和删除元素操作。</li></ul></li><li><strong>以下情况使用 LinkedList :</strong><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul></li></ul></li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul><li>HashMap 是无序的，即不会记录插入的顺序。</li></ul><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><ul><li><p>使用迭代器遍历集合时，如果在遍历过程中对集合进行了修改（例如添加或删除元素），可能会导致 ConcurrentModificationException 异常，为了避免这个问题，可以使用迭代器自身的 <strong>remove()</strong> 方法进行删除操作。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 引入 ArrayList 和 Iterator 类</span><span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunoobTest</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        ArrayList&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();        numbers.add(<span class="hljs-number">12</span>);        numbers.add(<span class="hljs-number">8</span>);        numbers.add(<span class="hljs-number">2</span>);        numbers.add(<span class="hljs-number">23</span>);        Iterator&lt;Integer&gt; it = numbers.iterator();        <span class="hljs-keyword">while</span>(it.hasNext()) &#123;            <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> it.next();            <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">10</span>) &#123;                  it.remove();  <span class="hljs-comment">// 删除小于 10 的元素</span>            &#125;        &#125;        System.out.println(numbers);    &#125;&#125;</code></pre></div></li><li><p>Java 迭代器是一种单向遍历机制，即<strong>只能从前往后遍历</strong>集合中的元素，不能往回遍历。同时，在使用迭代器遍历集合时，<strong>不能直接修改集合中的元素</strong>，而是需要使用迭代器的 remove() 方法来删除当前元素。</p></li></ul><p>​     </p><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><ul><li><p><strong>java 中泛型标记符：</strong></p><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong> - 表示不确定的 java 类型</li></ul></li><li><p>下面的例子演示了如何使用泛型方法打印不同类型的数组元素：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericMethodTest</span>&#123;   <span class="hljs-comment">// 泛型方法 printArray                         </span>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt; E &gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">( E[] inputArray )</span>   &#123;      <span class="hljs-comment">// 输出数组元素            </span>         <span class="hljs-keyword">for</span> ( E element : inputArray )&#123;                    System.out.printf( <span class="hljs-string">&quot;%s &quot;</span>, element );         &#125;         System.out.println();    &#125;      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String args[] )</span>    &#123;        <span class="hljs-comment">// 创建不同类型数组： Integer, Double 和 Character</span>        Integer[] intArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;        Double[] doubleArray = &#123; <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span> &#125;;        Character[] charArray = &#123; <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span> &#125;;             System.out.println( <span class="hljs-string">&quot;整型数组元素为:&quot;</span> );        printArray( intArray  ); <span class="hljs-comment">// 传递一个整型数组</span>             System.out.println( <span class="hljs-string">&quot;\n双精度型数组元素为:&quot;</span> );        printArray( doubleArray ); <span class="hljs-comment">// 传递一个双精度型数组</span>             System.out.println( <span class="hljs-string">&quot;\n字符型数组元素为:&quot;</span> );        printArray( charArray ); <span class="hljs-comment">// 传递一个字符型数组</span>    &#125; &#125;</code></pre></div><ul><li>编译以上代码，运行结果如下所示：</li></ul></li></ul><div class="code-wrapper"><pre><code class="hljs java">整型数组元素为:<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> 双精度型数组元素为:<span class="hljs-number">1.1</span> <span class="hljs-number">2.2</span> <span class="hljs-number">3.3</span> <span class="hljs-number">4.4</span> 字符型数组元素为:H E L L O</code></pre></div><h4 id="泛型类以及通配符（？）"><a href="#泛型类以及通配符（？）" class="headerlink" title="泛型类以及通配符（？）"></a>泛型类以及通配符（？）</h4><h5 id="链接：https-www-runoob-com-java-java-generics-html"><a href="#链接：https-www-runoob-com-java-java-generics-html" class="headerlink" title="链接：https://www.runoob.com/java/java-generics.html"></a>链接：<a href="https://www.runoob.com/java/java-generics.html">https://www.runoob.com/java/java-generics.html</a></h5><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><h5 id="序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。"><a href="#序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。" class="headerlink" title="序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。"></a>序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。</h5><h5 id="链接：https-www-runoob-com-java-java-serialization-html"><a href="#链接：https-www-runoob-com-java-java-serialization-html" class="headerlink" title="链接：https://www.runoob.com/java/java-serialization.html"></a>链接：<a href="https://www.runoob.com/java/java-serialization.html">https://www.runoob.com/java/java-serialization.html</a></h5>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机英语单词</title>
    <link href="/2023/11/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    <url>/2023/11/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs java">instantiated 实例化      Arithmetic 算数     execute 执行     scope 范围      param 参数</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>计算机英语单词积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机英语单词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>访问修饰符以及注意事项，写工程细节，不懂概念汇总</title>
    <link href="/2023/11/15/2023-11-15%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/15/2023-11-15%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="访问修饰符以及注意事项"><a href="#访问修饰符以及注意事项" class="headerlink" title="访问修饰符以及注意事项"></a>访问修饰符以及注意事项</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/access_modifier.png" alt="access_modifier"></p><h4 id="11-5日笔记——写工程细节"><a href="#11-5日笔记——写工程细节" class="headerlink" title="11.5日笔记——写工程细节"></a>11.5日笔记——写工程细节</h4><ul><li>写工程时 先实现基本功能，先把代码跑通，复杂功能，跑通后实现。</li><li>写接口函数的时候最好定义一个额外的变量，好习惯，很有用，info。</li><li>using namespace std;最好不要加，可能会导致其他人命名空间冲突。</li><li>写工程最好0 warning .size（) 是无符号整数，不会报warning int 会报warning</li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>构造器中可以写get ,set 方法，进行数据合法性判断。</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>在初始化子类的时候，必须先初始化父类，即在子类的构造器中默认调用父类的无参构造方法<ul><li>如果父类中没有默认的无参构造方法，则必须在子类中指定使用父类的哪种构造方法</li><li>必须在子类构造器的第一行代码初始化父类</li></ul></li></ul><h4 id="不懂概念汇总"><a href="#不懂概念汇总" class="headerlink" title="不懂概念汇总"></a>不懂概念汇总</h4><ul><li><p>类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常</p></li><li><p>最常用的继承接口是没有包含任何方法的接口。</p><ul><li><p>标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。</p></li><li><p>标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</p></li><li><div class="code-wrapper"><pre><code class="hljs">package java.util;public interface EventListener&#123;&#125;</code></pre></div></li><li><p>没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：</p><ul><li>建立一个公共的父接口：</li></ul><p>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p><ul><li><p>向一个类添加数据类型：</p><p>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p></li></ul></li></ul></li></ul><h4 id="今日小结"><a href="#今日小结" class="headerlink" title="今日小结"></a>今日小结</h4><p>主要是复习了java一些概念 类，继承，接口，文件，封装，重写，重载等概念。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java文档注释，标识符命名规则与规范，IDEA 快捷键设置</title>
    <link href="/2023/11/14/2023-11-14%E5%BD%93%E6%97%A5%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/14/2023-11-14%E5%BD%93%E6%97%A5%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java文档注释"><a href="#java文档注释" class="headerlink" title="java文档注释"></a>java文档注释</h4><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p>程序的说明文档，以一整套网页文件形式体现</p><h5 id="基本格式："><a href="#基本格式：" class="headerlink" title="基本格式："></a>基本格式：</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * author 小明</span><span class="hljs-comment">   *version 1.0</span><span class="hljs-comment">   * ...</span><span class="hljs-comment">*/</span></code></pre></div><h5 id="生成文档命令："><a href="#生成文档命令：" class="headerlink" title="生成文档命令："></a>生成文档命令：</h5><div class="code-wrapper"><pre><code class="hljs java">javadoc -d d:\\...(要生成文档所要存的目录) -author -version test.java</code></pre></div><p>[1]: <a href="https://c.biancheng.net/view/6262.html">https://c.biancheng.net/view/6262.html</a>“文档注释详解”</p><h4 id="API-中文文档以及其他资料"><a href="#API-中文文档以及其他资料" class="headerlink" title="API 中文文档以及其他资料"></a>API 中文文档以及其他资料</h4><p>[2]: <a href="https://www.matools.com/">https://www.matools.com/</a>“API中文文档”</p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/Operator_priority.png" alt="运算符优先级"></p><h4 id="标识符命名规则与规范"><a href="#标识符命名规则与规范" class="headerlink" title="标识符命名规则与规范"></a>标识符命名规则与规范</h4><ol><li><p>包名包含多个字母时 小写 （aaa.bbb.ccc），com.公司名.项目名.业务模块名。</p><p>1.1 例如（<code>com.sina.crm.user //用户模块</code>)</p></li><li><p>类名，接口名，所有单词首字母大写（AaaBbbCcc)</p></li><li><p>变量名，方法名，第一个单词首字母小写，从第二个开始，首字母大写 （aaaBbbCcc)</p></li><li><p>常量名，所有字母大写，多个单词时 ，用下划线连接（AAA_BBB_CCC)</p></li></ol><h4 id="break-指定跳出的标签层（不到迫不得已不要用）"><a href="#break-指定跳出的标签层（不到迫不得已不要用）" class="headerlink" title="break 指定跳出的标签层（不到迫不得已不要用）"></a>break 指定跳出的标签层（不到迫不得已不要用）</h4><div class="code-wrapper"><pre><code class="hljs c++">lable1:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;lable2:   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++)&#123;   lable3:       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; cnt; k ++)&#123;          <span class="hljs-keyword">break</span> lable1;       &#125;   &#125;&#125;<span class="hljs-comment">//break 跳出指定的循环层;</span><span class="hljs-comment">//continue 与 break 类似</span></code></pre></div><h4 id="java零散知识点"><a href="#java零散知识点" class="headerlink" title="java零散知识点"></a>java零散知识点</h4><ol><li>局部变量不能加修饰符。</li><li>this指向对象本身， this 可以访问，属性，方法， 构造器。</li><li>this 只能在构造器中访问其他的构造器，并且代码必须写在第一行。</li></ol><h4 id="IDEA-快捷键设置"><a href="#IDEA-快捷键设置" class="headerlink" title="IDEA 快捷键设置"></a>IDEA 快捷键设置</h4><ul><li><p>删除当前行， Ctrl + d</p></li><li><p>复制当前行到下一行 ，alt + shift + 向下箭头</p></li><li><p>补全代码， alt + &#x2F;</p></li><li><p>导入该行需要的类&#x2F;抛出异常，alt + enter</p></li><li><p>快速格式化代码，Ctrl + alt + L</p></li><li><p>快速运行程序，alt + R</p></li><li><p>生成构造器，alt + insert</p></li><li><p>查看类的层级关系 ，Ctrl + H</p></li><li><p>查看方法再哪个类中， Ctrl + B</p></li><li><p>自动分配变量名， 在new类的后边加<code>.var //例如：(new Scanner(System.in)).var</code></p></li><li><p>添加if try catch … ctrl + alt + t;</p></li><li><p>回到上次一代码位置，追代码的时候使用，Fn+J，向前追是 Fn+L</p></li><li><p>代码左移shift+Tab ,右移Tab</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
