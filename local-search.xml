<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2023.11.20学习总结</title>
    <link href="/2023/11/20/2023-11-20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/20/2023-11-20%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h5 id="空间存储"><a href="#空间存储" class="headerlink" title="空间存储"></a>空间存储</h5><ul><li>栈中存储的是基本类型变量，和对象引用。</li><li>堆中存储的是对象</li><li>常量池存储的是字符串常量，基本类型常量。</li></ul><h5 id="String字符串"><a href="#String字符串" class="headerlink" title="String字符串"></a>String字符串</h5><ul><li><p>string数组中有<code>final char[]</code>数组属性，char数组中的值可以修改，但是char 地址是不可以修改的。</p></li><li><p><code>String s = &quot;aaa&quot; + &quot;bbb&quot;</code> 等价于 <code>String s = &quot;aaabbb&quot;</code>创建了一个对象</p></li><li><p><code>String s = &quot;aaa&quot;</code> 先查看常量池，如果有直接指向，如果没有直接创建，并指向，最终指向的是常量池地址空间。</p></li><li><p><code>String s = new String(&quot;aaa&quot;);</code>先在堆中创建空间，维护value属性，指向常量池，常量池如果有直接通过value属性指向，如果没有创建后指向。最后指向的是堆中的地址空间。</p></li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;china&quot;</span>;  <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;china&quot;</span>;  <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;china&quot;</span>;  <span class="hljs-type">String</span> <span class="hljs-variable">ss1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;china&quot;</span>);  <span class="hljs-type">String</span> <span class="hljs-variable">ss2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;china&quot;</span>);  <span class="hljs-type">String</span> <span class="hljs-variable">ss3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;china&quot;</span>);</code></pre></div><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/20190130125804477.png" style="zoom: 200%;" /><ul><li>String intern() 方法 首先在常量池中查看是否存在跟当前对象字符串相同的常量，如果有直接返回字符串常量的地址，如果没有直接在常量池中创建一个当前字符串常量（对象）并返回地址。最终返回的是常量池的地址。</li><li><code>&quot;sdf&quot;</code>表示的是常量池中的地址如果比较的话。</li><li>字符创常量池的常量也算对象。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cdf&quot;</span>;<span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s + b;  <span class="hljs-comment">/* 底层:</span><span class="hljs-comment">1. 创建stringBuilder ,StringBuilder是临时缓冲区</span><span class="hljs-comment">2.append方法追加 &quot;cdf&quot; 和 &quot;abc&quot;</span><span class="hljs-comment">3.toString 返回new 一个String 对象 value 指向常量池&quot;abccdf&quot;</span><span class="hljs-comment">*/</span></code></pre></div><ul><li><p>数组默认是放在堆里面的。</p></li><li><p><strong>调方法会产生新栈</strong> ，相当于是值传递。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/zfu1.png"></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/zuf.png"></p><h5 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h5><ul><li>线程<strong>不安全</strong>，如果是 <strong>单线程</strong>，最好的选择。</li><li>比StringBuffer快</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>未来规划</title>
    <link href="/2023/11/19/%E6%9C%AA%E6%9D%A5%E8%A7%84%E5%88%92/"/>
    <url>/2023/11/19/%E6%9C%AA%E6%9D%A5%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<p>时间： 2023.12 ~ 2024.9  10个月。</p><p>任务： 技术学习，项目，算法+ 八股 ，实习。</p><p>技术学习+ 项目 4 个月，最多５ 个月也就是  期现： 2024 年3月底</p><h4 id="最近的目标"><a href="#最近的目标" class="headerlink" title="最近的目标"></a>最近的目标</h4><ul><li><p>学习技术</p></li><li><p>项目</p></li><li><p>八股</p></li><li><p>算法</p><hr><p>截止到 2024年3月底搞完技术项目，找到一份暑假实习，最好是一万人左右的。</p></li></ul><h4 id="技术学习＋项目"><a href="#技术学习＋项目" class="headerlink" title="技术学习＋项目"></a>技术学习＋项目</h4><p>　<strong>时间</strong>： 4 ~ 5 个月，最多6 个月也就是  期现： 2024 年 4 月</p><h5 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h5><ul><li>java基础学习　＋　练手项目   期限 10 天2023.11.29</li><li>java 8    + 项目 期限 4 天 2023.12.3</li><li>mysql数据库  期限 9 天 2023.12.12</li><li>javaweb 期限 10天</li><li>spring 期限 5 天</li><li>spring MVC 5 天</li><li>MyBatis 4 天</li><li>MyBatis Plus 2天</li><li>spring boot  15天</li><li>Linux 5天</li><li>Redis 14天</li><li>消息队列</li><li>Nginx</li><li>微服务</li><li>容器</li><li>并发编程</li><li>JVM</li><li>java高级知识</li></ul><h4 id="算法-八股"><a href="#算法-八股" class="headerlink" title="算法 + 八股"></a>算法 + 八股</h4><h4 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h4><h4 id="实习以及校招"><a href="#实习以及校招" class="headerlink" title="实习以及校招"></a>实习以及校招</h4><p><strong>校招</strong>（直接入职）</p><ul><li>秋招： 8月底到11月份，笔试面试</li><li>提前批 7 月中旬 到 8 月份，不用笔试</li></ul><hr><p><strong>实习</strong></p><ul><li>日常实习</li><li>暑假实习<ul><li>2月底开始 到 4，5 月份，offer -&gt; 5月6 月实习 有转正机会 概率比较大</li></ul></li></ul><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>b站 博主：</p><p>javaSE -&gt; javaWeb -&gt;  mysql -&gt; ssM -&gt; springboot -&gt; spring cloud -&gt; redis -&gt; ES -&gt; 消息队列MQ</p><p>鼓励商城 改名字</p><p>2022.3 - 2022.8技术学习+ 项目   -》 2022.9 - 2022.11 算法 +八股　－》　2022.12 - 2023.3 日常实习 -》 暑期实习 -》秋招大厂</p><p>八股： 分类整理大厂面经，分类整理。</p><p>面试：自我介绍－》　介绍项目－》　回答问题　－》　手撕算法　－》　</p>]]></content>
    
    
    <categories>
      
      <category>计划</category>
      
      <category>未来规划</category>
      
    </categories>
    
    
    <tags>
      
      <tag>未来规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.19学习总结</title>
    <link href="/2023/11/19/2023-11-19%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/19/2023-11-19%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java-零碎知识点"><a href="#java-零碎知识点" class="headerlink" title="java 零碎知识点"></a>java 零碎知识点</h4><ul><li>final 类不能被继承。</li><li>通过反射机制获得对象的名称，用当前对象生成class对象，通过class对象调用getName方法获取当前对象名称。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectNameExample</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        <span class="hljs-comment">// 创建一个对象</span>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();                <span class="hljs-comment">// 获取对象的Class对象</span>        Class&lt;?&gt; clazz = obj.getClass();                <span class="hljs-comment">// 获取类的名称</span>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> clazz.getName();                System.out.println(<span class="hljs-string">&quot;对象的名称: &quot;</span> + className);    &#125;&#125;--------------------------------------------------------<span class="hljs-comment">//对象的名称: java.lang.Object</span></code></pre></div><ul><li>static 修饰的变量通过调用返回值为static 修饰的返回类型的方法，不能调用没有static修饰的返回值的方法。</li><li>静态代码块跟类加载相关，也就是说当类加载的时候执行静态代码块。</li><li>构造器隐藏着super（）和普通代码块的执行和普通属性的初始化。</li><li>final 和 static 一般配合使用效率更高，底层编译器做了优化处理。</li><li>运行时异常如果没有声明如何处理异常，默认是throws。</li><li>只要有基本数据类型，就是值的判断。</li></ul><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><ul><li>枚举隐式继承了 Enum类，枚举类是final类。</li></ul><h4 id="当日知识截图分类"><a href="#当日知识截图分类" class="headerlink" title="当日知识截图分类"></a>当日知识截图分类</h4><h5 id="SuppressWarnings-注解（消除warning）"><a href="#SuppressWarnings-注解（消除warning）" class="headerlink" title="SuppressWarnings 注解（消除warning）"></a>SuppressWarnings 注解（消除warning）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(23).png" alt="1 (23)"></p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(1).png" alt="1 (1)"></h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(4).png" alt="1 (4)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(11).png" alt="1 (11)"></p><h5 id="IDEAmain传参"><a href="#IDEAmain传参" class="headerlink" title="IDEAmain传参"></a>IDEAmain传参</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(2).png" alt="1 (2)"></p><h5 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(12).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(8).png" alt="1 (8)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(3).png" alt="1 (3)"></p><h5 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(5).png" alt="1 (5)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(6).png" alt="1 (6)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(10).png" alt="1 (10)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(22).png" alt="1 (22)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(35).png" alt="1 (35)"></p><h5 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(17).png" alt="1 (17)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(34).png" alt="1 (34)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(7).png" alt="1 (7)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(15).png" alt="1 (15)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(14).png" alt="1 (14)"></p><h5 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(13).png" alt="1 (13)"></p><h5 id="IDEA展示实现的接口类"><a href="#IDEA展示实现的接口类" class="headerlink" title="IDEA展示实现的接口类"></a>IDEA展示实现的接口类</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(16).png" alt="1 (16)"></p><h5 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(18).png"></p><h5 id="Override注解（判断子类是否重写方法）"><a href="#Override注解（判断子类是否重写方法）" class="headerlink" title="Override注解（判断子类是否重写方法）"></a>Override注解（判断子类是否重写方法）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(19).png"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(25).png" alt="1 (25)"></p><h5 id="IDEA图解类关系"><a href="#IDEA图解类关系" class="headerlink" title="IDEA图解类关系"></a>IDEA图解类关系</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(20).png" alt="1 (20)"></p><h5 id="枚举-1"><a href="#枚举-1" class="headerlink" title="枚举"></a>枚举</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(21).png" alt="1 (21)"></p><h5 id="接口引用"><a href="#接口引用" class="headerlink" title="接口引用"></a>接口引用</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(24).png" alt="1 (24)"></p><h5 id="静态方法（类方法）"><a href="#静态方法（类方法）" class="headerlink" title="静态方法（类方法）"></a>静态方法（类方法）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(26).png" alt="1 (26)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(32).png" alt="1 (32)"></p><h5 id="运行时异常"><a href="#运行时异常" class="headerlink" title="运行时异常"></a>运行时异常</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(28).png" alt="1 (28)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(29).png" alt="1 (29)"></p><h5 id="Deprecated注解（代表某个类或者方法已过时）"><a href="#Deprecated注解（代表某个类或者方法已过时）" class="headerlink" title="Deprecated注解（代表某个类或者方法已过时）"></a>Deprecated注解（代表某个类或者方法已过时）</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(30).png" alt="1 (30)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(31).png" alt="1 (31)"></p><h5 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(33).png" alt="1 (33)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(38).png" alt="1 (38)"></p><h5 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(36).png" alt="1 (36)"></p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(39).png" alt="1 (39)"></p><h5 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h5><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/1%20(37).png" alt="1 (37)"></p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.18学习总结</title>
    <link href="/2023/11/18/2023-11-18%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/18/2023-11-18%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java-8-新特性"><a href="#java-8-新特性" class="headerlink" title="java 8 新特性"></a>java 8 新特性</h4><h5 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h5><p>个人理解： 用目前存在的方法，构造器替代Lambda表达式的主体，使代码更简洁。</p><h5 id="链接：-https-www-cnblogs-com-xiaoxi-p-7099667-html"><a href="#链接：-https-www-cnblogs-com-xiaoxi-p-7099667-html" class="headerlink" title="链接： https://www.cnblogs.com/xiaoxi/p/7099667.html"></a>链接： <a href="https://www.cnblogs.com/xiaoxi/p/7099667.html">https://www.cnblogs.com/xiaoxi/p/7099667.html</a></h5><h5 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h5><p>个人理解： 为了添加接口方法，而不影响已经实现该接口的类。</p><h5 id="链接：https-segmentfault-com-a-1190000017433982"><a href="#链接：https-segmentfault-com-a-1190000017433982" class="headerlink" title="链接：https://segmentfault.com/a/1190000017433982"></a>链接：<a href="https://segmentfault.com/a/1190000017433982">https://segmentfault.com/a/1190000017433982</a></h5><h5 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h5><p>个人理解： 一个解决空指&gt;针异常的特殊类。</p><h5 id="链接"><a href="#链接" class="headerlink" title="链接 : &lt;https://juejin.cn/post/6844903960050925581"></a>链接 : &lt;<a href="https://juejin.cn/post/6844903960050925581">https://juejin.cn/post/6844903960050925581</a></h5><h5 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h5><p>个人理解： 为了便捷的处理集合元素。</p><h5 id="链接：https-juejin-cn-post-6844903830254010381"><a href="#链接：https-juejin-cn-post-6844903830254010381" class="headerlink" title="链接：https://juejin.cn/post/6844903830254010381"></a>链接：<a href="https://juejin.cn/post/6844903830254010381">https://juejin.cn/post/6844903830254010381</a></h5><h4 id="java零碎知识点"><a href="#java零碎知识点" class="headerlink" title="java零碎知识点"></a>java零碎知识点</h4><ul><li>继承其实是建立了一个查找机制，就近原则。</li><li>属性没有重写之说，看编译类型（引用类型）。</li><li>instanceof 是判断运行类型是否是某个类的类型或子类型。</li><li>当调用对象方法时，该方法会与该对象的运行类型绑定，属性没有动态绑定机制，哪里声明哪里使用。<ul><li>用人话说就是，调用方法时先从运行类型类中查看方法是否存在如果存在，直接调用，不存在从父类中查找，如果从父类中找到了该方法，并且该方法中还调用了另一个方法，此时跟之前一样，先从运行类中寻找方法，属性不是，哪里声明哪里使用。</li></ul></li><li>向上转型只能调用父类的方法，不能使用子类的特有方法，这就是为什么要向下转型。</li></ul><h4 id="IDEA断点调试"><a href="#IDEA断点调试" class="headerlink" title="IDEA断点调试"></a>IDEA断点调试</h4><ul><li><strong>F8</strong>执行下一条语句。</li><li><strong>F7</strong> 跳入方法内</li><li><strong>shift + F8</strong> 跳出方法</li><li><strong>F9</strong> 直接执行到下一个断点（resume）</li></ul><p>感悟： 看视频能get到新的点，多加练习，不要光看。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次完成六公里hh</title>
    <link href="/2023/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%88%90%E5%85%AD%E5%85%AC%E9%87%8Chh/"/>
    <url>/2023/11/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%8C%E6%88%90%E5%85%AD%E5%85%AC%E9%87%8Chh/</url>
    
    <content type="html"><![CDATA[<p>今天人生第一次完成六公里，跑步太爽了，感觉还不错，就是天气越来越冷了，风吹的牙有点疼hh，现在操场熄灯变早了，但还是有很多人跑步，氛围挺好的,洗个澡睡觉啦hh。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/4A6F42B9858CD44B30CF0A6AB5B639F1.jpg" alt="4A6F42B9858CD44B30CF0A6AB5B639F1"></p><p>跑步过程中，有个人突然从后面跟了上来，我带着他跑了，3公里左右，然后他就不跟了，感觉还是有个伙伴跑着有激情，虽然我们不认识。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/C72ABEA2FA2A120552398E7B01FFE618.jpg" alt="C72ABEA2FA2A120552398E7B01FFE618"></p><p>还有就是今天的月亮好低！！，跟楼肩并肩了。</p><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/FD339069922865F1C7E9C671739A5811.jpg" alt="FD339069922865F1C7E9C671739A5811"></p>]]></content>
    
    
    <categories>
      
      <category>生活记录</category>
      
      <category>运动</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活记录</tag>
      
      <tag>运动</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.17学习总结</title>
    <link href="/2023/11/16/2023-11-17%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/16/2023-11-17%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="Lambdal"><a href="#Lambdal" class="headerlink" title="Lambdal"></a>Lambdal</h4><h5 id="链接：-https-blog-csdn-net-weixin-40979518-article-details-118546367"><a href="#链接：-https-blog-csdn-net-weixin-40979518-article-details-118546367" class="headerlink" title="链接： https://blog.csdn.net/weixin_40979518/article/details/118546367"></a>链接： <a href="https://blog.csdn.net/weixin_40979518/article/details/118546367">https://blog.csdn.net/weixin_40979518/article/details/118546367</a></h5><h4 id="泛型类，-泛型接口"><a href="#泛型类，-泛型接口" class="headerlink" title="泛型类， 泛型接口"></a>泛型类， 泛型接口</h4><h5 id="链接-：-https-juejin-cn-post-6844903827343147021"><a href="#链接-：-https-juejin-cn-post-6844903827343147021" class="headerlink" title="链接 ： https://juejin.cn/post/6844903827343147021"></a>链接 ： <a href="https://juejin.cn/post/6844903827343147021">https://juejin.cn/post/6844903827343147021</a></h5><ul><li>泛型的类型参数只能是类类型，不能是简单类型。</li><li>不能对确切的泛型类型使用instanceof操作。如下面的操作是非法的，编译时会出错。</li></ul><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(ex_num <span class="hljs-keyword">instanceof</span> Generic&lt;Number&gt;)&#123;   &#125;</code></pre></div><h4 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h4><h5 id="链接-：https-www-runoob-com-java-java-multithreading-html"><a href="#链接-：https-www-runoob-com-java-java-multithreading-html" class="headerlink" title="链接 ：https://www.runoob.com/java/java-multithreading.html"></a>链接 ：<a href="https://www.runoob.com/java/java-multithreading.html">https://www.runoob.com/java/java-multithreading.html</a></h5><h5 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h5><ul><li>有三种方式新建线程<ul><li>类实现Runable 接口，实现run方法，实现Runable接口的类的对象，作为参数传入<code>new Thread()</code> ,启动线程使用<code>start()</code>方法，线程对象调用run方法。</li><li>类继承 Thread ，同实现Runable接口一样，重写run方法，创建一个对象，作为参数传入<code>new Thread()</code>,启动线程使用<code>start()</code>方法，线程对象调用run方法。</li><li>类实现 Callable接口， 实现call方法，call方法作为线程主体，并且有返回值，创建Callable对象，使用FutureTask类进行包装 ,该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。使用 FutureTask 对象作为 Thread 对象的 参数 创建并启动新线程。调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li></ul></li></ul><h4 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h4><h5 id="个人理解-1"><a href="#个人理解-1" class="headerlink" title="个人理解"></a>个人理解</h5><ul><li>为了给方法，传入代码块，更灵活，更多变。</li><li>可以理解为，实现了类内接口方法，并实例化了一个对象，传给接口引用。</li><li>配合接口泛型，更加灵活。</li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.16学习总结</title>
    <link href="/2023/11/16/2023-11-16%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/16/2023-11-16%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="Stack-笔记"><a href="#Stack-笔记" class="headerlink" title="Stack 笔记"></a>Stack 笔记</h4><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;        Stack&lt;Integer&gt; s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();        Stack&lt;Integer&gt; s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;Integer&gt;();        s1.push(x);        s2.push(x);        <span class="hljs-type">int</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> s1.peek();        <span class="hljs-type">int</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> s2.peek();        System.out.println(p1==p2);        System.out.println(s1.peek() == s2.peek());&#125;</code></pre></div><p>如果x在[-128, 127]，那么两次都会输出true；如果不是在这个范围，会输出true和false。</p><p>原因在于autobox，对于某些值，s1.push(x)会转化为s1.push(Integer.valueOf(x))，然后会利用cache的值，导致实例复用。翻译渣，请参考原解释： <a href="https://stackoverflow.com/questions/31156067/java-stack-peek-behavior">https://stackoverflow.com/questions/31156067/java-stack-peek-behavior</a></p><p>我的理解： 在[-128,127] 会缓存，不会直接构造对象，可能不对。</p><h4 id="集合框架图"><a href="#集合框架图" class="headerlink" title="集合框架图"></a>集合框架图</h4><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif"></p><h4 id="集合框架体系"><a href="#集合框架体系" class="headerlink" title="集合框架体系"></a>集合框架体系</h4><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/java-coll-2020-11-16.png"></p><h4 id="集合细节"><a href="#集合细节" class="headerlink" title="集合细节"></a>集合细节</h4><ul><li>任何对象加入集合类后，自动转变为Object类型，所以在取出的时候，需要进行强制类型转换。</li><li>集合框架的类和接口均在java.util包中。</li></ul><h4 id="ArrayList-和-LinkedList"><a href="#ArrayList-和-LinkedList" class="headerlink" title="ArrayList  和 LinkedList"></a>ArrayList  和 LinkedList</h4><ul><li><h5 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h5><ul><li>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</li><li>ArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</li></ul></li><li><h5 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h5><ul><li>LinkedList 继承了 AbstractSequentialList 类。</li><li>LinkedList 实现了 Queue 接口，可作为队列使用。</li><li>LinkedList 实现了 List 接口，可进行列表的相关操作。</li><li>LinkedList 实现了 Deque 接口，可作为队列使用。</li><li>LinkedList 实现了 Cloneable 接口，可实现克隆。</li><li>LinkedList 实现了 java.io.Serializable 接口，即可支持序列化，能通过序列化去传输。</li><li>更多的情况下我们使用 ArrayList 访问列表中的随机元素更加高效，但以下几种情况 LinkedList 提供了更高效的方法。<ul><li>在列表开头添加元素：<code>addFirst</code></li><li>在列表结尾添加元素：<code>addLast</code></li><li>在列表开头移除元素：<code>removeFirst()</code></li><li>在列表结尾移除元素：<code>removeLast()</code></li><li>获取列表开头的元素：<code>getFirst()</code></li><li>获取列表结尾的元素：<code>getLast()</code></li></ul></li></ul></li><li><h5 id="使用情况"><a href="#使用情况" class="headerlink" title="使用情况"></a>使用情况</h5><ul><li><strong>以下情况使用 ArrayList :</strong><ul><li>频繁访问列表中的某一个元素。</li><li>只需要在列表末尾进行添加和删除元素操作。</li></ul></li><li><strong>以下情况使用 LinkedList :</strong><ul><li>你需要通过循环迭代来访问列表中的某些元素。</li><li>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作。</li></ul></li></ul></li></ul><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><ul><li>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</li></ul><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><ul><li>HashMap 是无序的，即不会记录插入的顺序。</li></ul><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><ul><li><p>使用迭代器遍历集合时，如果在遍历过程中对集合进行了修改（例如添加或删除元素），可能会导致 ConcurrentModificationException 异常，为了避免这个问题，可以使用迭代器自身的 <strong>remove()</strong> 方法进行删除操作。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 引入 ArrayList 和 Iterator 类</span><span class="hljs-keyword">import</span> java.util.ArrayList;<span class="hljs-keyword">import</span> java.util.Iterator;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunoobTest</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        ArrayList&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();        numbers.add(<span class="hljs-number">12</span>);        numbers.add(<span class="hljs-number">8</span>);        numbers.add(<span class="hljs-number">2</span>);        numbers.add(<span class="hljs-number">23</span>);        Iterator&lt;Integer&gt; it = numbers.iterator();        <span class="hljs-keyword">while</span>(it.hasNext()) &#123;            <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> it.next();            <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">10</span>) &#123;                  it.remove();  <span class="hljs-comment">// 删除小于 10 的元素</span>            &#125;        &#125;        System.out.println(numbers);    &#125;&#125;</code></pre></div></li><li><p>Java 迭代器是一种单向遍历机制，即<strong>只能从前往后遍历</strong>集合中的元素，不能往回遍历。同时，在使用迭代器遍历集合时，<strong>不能直接修改集合中的元素</strong>，而是需要使用迭代器的 remove() 方法来删除当前元素。</p></li></ul><p>​     </p><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><ul><li><p><strong>java 中泛型标记符：</strong></p><ul><li><strong>E</strong> - Element (在集合中使用，因为集合中存放的是元素)</li><li><strong>T</strong> - Type（Java 类）</li><li><strong>K</strong> - Key（键）</li><li><strong>V</strong> - Value（值）</li><li><strong>N</strong> - Number（数值类型）</li><li><strong>？</strong> - 表示不确定的 java 类型</li></ul></li><li><p>下面的例子演示了如何使用泛型方法打印不同类型的数组元素：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenericMethodTest</span>&#123;   <span class="hljs-comment">// 泛型方法 printArray                         </span>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt; E &gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">( E[] inputArray )</span>   &#123;      <span class="hljs-comment">// 输出数组元素            </span>         <span class="hljs-keyword">for</span> ( E element : inputArray )&#123;                    System.out.printf( <span class="hljs-string">&quot;%s &quot;</span>, element );         &#125;         System.out.println();    &#125;      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">( String args[] )</span>    &#123;        <span class="hljs-comment">// 创建不同类型数组： Integer, Double 和 Character</span>        Integer[] intArray = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;        Double[] doubleArray = &#123; <span class="hljs-number">1.1</span>, <span class="hljs-number">2.2</span>, <span class="hljs-number">3.3</span>, <span class="hljs-number">4.4</span> &#125;;        Character[] charArray = &#123; <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span> &#125;;             System.out.println( <span class="hljs-string">&quot;整型数组元素为:&quot;</span> );        printArray( intArray  ); <span class="hljs-comment">// 传递一个整型数组</span>             System.out.println( <span class="hljs-string">&quot;\n双精度型数组元素为:&quot;</span> );        printArray( doubleArray ); <span class="hljs-comment">// 传递一个双精度型数组</span>             System.out.println( <span class="hljs-string">&quot;\n字符型数组元素为:&quot;</span> );        printArray( charArray ); <span class="hljs-comment">// 传递一个字符型数组</span>    &#125; &#125;</code></pre></div><ul><li>编译以上代码，运行结果如下所示：</li></ul></li></ul><div class="code-wrapper"><pre><code class="hljs java">整型数组元素为:<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> 双精度型数组元素为:<span class="hljs-number">1.1</span> <span class="hljs-number">2.2</span> <span class="hljs-number">3.3</span> <span class="hljs-number">4.4</span> 字符型数组元素为:H E L L O</code></pre></div><h4 id="泛型类以及通配符（？）"><a href="#泛型类以及通配符（？）" class="headerlink" title="泛型类以及通配符（？）"></a>泛型类以及通配符（？）</h4><h5 id="链接：https-www-runoob-com-java-java-generics-html"><a href="#链接：https-www-runoob-com-java-java-generics-html" class="headerlink" title="链接：https://www.runoob.com/java/java-generics.html"></a>链接：<a href="https://www.runoob.com/java/java-generics.html">https://www.runoob.com/java/java-generics.html</a></h5><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><h5 id="序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。"><a href="#序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。" class="headerlink" title="序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。"></a>序列化是一种用于保存、传输和还原对象的方法，它使得对象可以在不同的计算机之间移动和共享，这对于分布式系统、数据存储和跨平台通信非常有用。</h5><h5 id="链接：https-www-runoob-com-java-java-serialization-html"><a href="#链接：https-www-runoob-com-java-java-serialization-html" class="headerlink" title="链接：https://www.runoob.com/java/java-serialization.html"></a>链接：<a href="https://www.runoob.com/java/java-serialization.html">https://www.runoob.com/java/java-serialization.html</a></h5><h4 id="TCP——Socket"><a href="#TCP——Socket" class="headerlink" title="TCP——Socket"></a>TCP——Socket</h4><ul><li>服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。</li><li>服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。</li><li>服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。</li><li>Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。</li><li>在服务器端，accept() 方法返回服务器上一个新的 socket 引用，该 socket 连接到客户端的 socket。</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 文件名 GreetingClient.java</span> <span class="hljs-comment">// args[0] 是命令行输入传入的第一个参数</span><span class="hljs-keyword">import</span> java.net.*;<span class="hljs-keyword">import</span> java.io.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingClient</span>&#123;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>   &#123;      <span class="hljs-type">String</span> <span class="hljs-variable">serverName</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">0</span>];      <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">1</span>]);      <span class="hljs-keyword">try</span>      &#123;         System.out.println(<span class="hljs-string">&quot;连接到主机：&quot;</span> + serverName + <span class="hljs-string">&quot; ，端口号：&quot;</span> + port);         <span class="hljs-type">Socket</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Socket</span>(serverName, port);         System.out.println(<span class="hljs-string">&quot;远程主机地址：&quot;</span> + client.getRemoteSocketAddress());         <span class="hljs-type">OutputStream</span> <span class="hljs-variable">outToServer</span> <span class="hljs-operator">=</span> client.getOutputStream();         <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(outToServer);          out.writeUTF(<span class="hljs-string">&quot;Hello from &quot;</span> + client.getLocalSocketAddress());         <span class="hljs-type">InputStream</span> <span class="hljs-variable">inFromServer</span> <span class="hljs-operator">=</span> client.getInputStream();         <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(inFromServer);         System.out.println(<span class="hljs-string">&quot;服务器响应： &quot;</span> + in.readUTF());         client.close();      &#125;<span class="hljs-keyword">catch</span>(IOException e)      &#123;         e.printStackTrace();      &#125;   &#125;&#125;</code></pre></div><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 文件名 GreetingServer.java</span> <span class="hljs-keyword">import</span> java.net.*;<span class="hljs-keyword">import</span> java.io.*; <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GreetingServer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;   <span class="hljs-keyword">private</span> ServerSocket serverSocket;      <span class="hljs-keyword">public</span> <span class="hljs-title function_">GreetingServer</span><span class="hljs-params">(<span class="hljs-type">int</span> port)</span> <span class="hljs-keyword">throws</span> IOException   &#123;      serverSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerSocket</span>(port);      serverSocket.setSoTimeout(<span class="hljs-number">10000</span>);   &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>   &#123;      <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)      &#123;         <span class="hljs-keyword">try</span>         &#123;            System.out.println(<span class="hljs-string">&quot;等待远程连接，端口号为：&quot;</span> + serverSocket.getLocalPort() + <span class="hljs-string">&quot;...&quot;</span>);            <span class="hljs-type">Socket</span> <span class="hljs-variable">server</span> <span class="hljs-operator">=</span> serverSocket.accept();            System.out.println(<span class="hljs-string">&quot;远程主机地址：&quot;</span> + server.getRemoteSocketAddress());            <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(server.getInputStream());            System.out.println(in.readUTF());            <span class="hljs-type">DataOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataOutputStream</span>(server.getOutputStream());            out.writeUTF(<span class="hljs-string">&quot;谢谢连接我：&quot;</span> + server.getLocalSocketAddress() + <span class="hljs-string">&quot;\nGoodbye!&quot;</span>);            server.close();         &#125;<span class="hljs-keyword">catch</span>(SocketTimeoutException s)         &#123;            System.out.println(<span class="hljs-string">&quot;Socket timed out!&quot;</span>);            <span class="hljs-keyword">break</span>;         &#125;<span class="hljs-keyword">catch</span>(IOException e)         &#123;            e.printStackTrace();            <span class="hljs-keyword">break</span>;         &#125;      &#125;   &#125;   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>   &#123;      <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> Integer.parseInt(args[<span class="hljs-number">0</span>]);      <span class="hljs-keyword">try</span>      &#123;         <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GreetingServer</span>(port);         t.run();      &#125;<span class="hljs-keyword">catch</span>(IOException e)      &#123;         e.printStackTrace();      &#125;   &#125;&#125;</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机英语单词</title>
    <link href="/2023/11/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    <url>/2023/11/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</url>
    
    <content type="html"><![CDATA[<div class="code-wrapper"><pre><code class="hljs java">instantiated 实例化      Arithmetic 算数     execute 执行</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>计算机英语单词积累</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机英语单词</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11.15学习总结--java基础</title>
    <link href="/2023/11/15/2023-11-15%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/15/2023-11-15%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="访问修饰符以及注意事项"><a href="#访问修饰符以及注意事项" class="headerlink" title="访问修饰符以及注意事项"></a>访问修饰符以及注意事项</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/access_modifier.png" alt="access_modifier"></p><h4 id="11-5日笔记——写工程细节"><a href="#11-5日笔记——写工程细节" class="headerlink" title="11.5日笔记——写工程细节"></a>11.5日笔记——写工程细节</h4><ul><li>写工程时 先实现基本功能，先把代码跑通，复杂功能，跑通后实现。</li><li>写接口函数的时候最好定义一个额外的变量，好习惯，很有用，info。</li><li>using namespace std;最好不要加，可能会导致其他人命名空间冲突。</li><li>写工程最好0 warning .size（) 是无符号整数，不会报warning int 会报warning</li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><ul><li>构造器中可以写get ,set 方法，进行数据合法性判断。</li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li>在初始化子类的时候，必须先初始化父类，即在子类的构造器中默认调用父类的无参构造方法<ul><li>如果父类中没有默认的无参构造方法，则必须在子类中指定使用父类的哪种构造方法</li><li>必须在子类构造器的第一行代码初始化父类</li></ul></li></ul><h4 id="不懂概念汇总"><a href="#不懂概念汇总" class="headerlink" title="不懂概念汇总"></a>不懂概念汇总</h4><ul><li><p>类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常</p></li><li><p>最常用的继承接口是没有包含任何方法的接口。</p><ul><li><p>标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。</p></li><li><p>标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</p></li><li><div class="code-wrapper"><pre><code class="hljs">package java.util;public interface EventListener&#123;&#125;</code></pre></div></li><li><p>没有任何方法的接口被称为标记接口。标记接口主要用于以下两种目的：</p><ul><li>建立一个公共的父接口：</li></ul><p>正如EventListener接口，这是由几十个其他接口扩展的Java API，你可以使用一个标记接口来建立一组接口的父接口。例如：当一个接口继承了EventListener接口，Java虚拟机(JVM)就知道该接口将要被用于一个事件的代理方案。</p><ul><li><p>向一个类添加数据类型：</p><p>这种情况是标记接口最初的目的，实现标记接口的类不需要定义任何接口方法(因为标记接口根本就没有方法)，但是该类通过多态性变成一个接口类型。</p></li></ul></li></ul></li></ul><h4 id="今日小结"><a href="#今日小结" class="headerlink" title="今日小结"></a>今日小结</h4><p>主要是复习了java一些概念 类，继承，接口，文件，封装，重写，重载等概念。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023_11_14当日笔记及总结——java基础知识</title>
    <link href="/2023/11/14/2023-11-14%E5%BD%93%E6%97%A5%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/14/2023-11-14%E5%BD%93%E6%97%A5%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h4 id="java文档注释"><a href="#java文档注释" class="headerlink" title="java文档注释"></a>java文档注释</h4><h5 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h5><p>程序的说明文档，以一整套网页文件形式体现</p><h5 id="基本格式："><a href="#基本格式：" class="headerlink" title="基本格式："></a>基本格式：</h5><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * author 小明</span><span class="hljs-comment">   *version 1.0</span><span class="hljs-comment">   * ...</span><span class="hljs-comment">*/</span></code></pre></div><h5 id="生成文档命令："><a href="#生成文档命令：" class="headerlink" title="生成文档命令："></a>生成文档命令：</h5><div class="code-wrapper"><pre><code class="hljs java">javadoc -d d:\\...(要生成文档所要存的目录) -author -version test.java</code></pre></div><p>[1]: <a href="https://c.biancheng.net/view/6262.html">https://c.biancheng.net/view/6262.html</a>“文档注释详解”</p><h4 id="API-中文文档以及其他资料"><a href="#API-中文文档以及其他资料" class="headerlink" title="API 中文文档以及其他资料"></a>API 中文文档以及其他资料</h4><p>[2]: <a href="https://www.matools.com/">https://www.matools.com/</a>“API中文文档”</p><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><p><img src="https://cdn.jsdelivr.net/gh/qsjzxcpyy/my_img@master/Operator_priority.png" alt="运算符优先级"></p><h4 id="标识符命名规则与规范"><a href="#标识符命名规则与规范" class="headerlink" title="标识符命名规则与规范"></a>标识符命名规则与规范</h4><ol><li><p>包名包含多个字母时 小写 （aaa.bbb.ccc），com.公司名.项目名.业务模块名。</p><p>1.1 例如（<code>com.sina.crm.user //用户模块</code>)</p></li><li><p>类名，接口名，所有单词首字母大写（AaaBbbCcc)</p></li><li><p>变量名，方法名，第一个单词首字母小写，从第二个开始，首字母大写 （aaaBbbCcc)</p></li><li><p>常量名，所有字母大写，多个单词时 ，用下划线连接（AAA_BBB_CCC)</p></li></ol><h4 id="break-指定跳出的标签层（不到迫不得已不要用）"><a href="#break-指定跳出的标签层（不到迫不得已不要用）" class="headerlink" title="break 指定跳出的标签层（不到迫不得已不要用）"></a>break 指定跳出的标签层（不到迫不得已不要用）</h4><div class="code-wrapper"><pre><code class="hljs c++">lable1:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++)&#123;lable2:   <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++)&#123;   lable3:       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; cnt; k ++)&#123;          <span class="hljs-keyword">break</span> lable1;       &#125;   &#125;&#125;<span class="hljs-comment">//break 跳出指定的循环层;</span><span class="hljs-comment">//continue 与 break 类似</span></code></pre></div><h4 id="java零散知识点"><a href="#java零散知识点" class="headerlink" title="java零散知识点"></a>java零散知识点</h4><ol><li>局部变量不能加修饰符。</li><li>this指向对象本身， this 可以访问，属性，方法， 构造器。</li><li>this 只能在构造器中访问其他的构造器，并且代码必须写在第一行。</li></ol><h4 id="IDEA-快捷键设置"><a href="#IDEA-快捷键设置" class="headerlink" title="IDEA 快捷键设置"></a>IDEA 快捷键设置</h4><ul><li><p>删除当前行， Ctrl + d</p></li><li><p>复制当前行到下一行 ，alt + shift + 向下箭头</p></li><li><p>补全代码， alt + &#x2F;</p></li><li><p>导入该行需要的类，alt + enter</p></li><li><p>快速格式化代码，Ctrl + alt + L</p></li><li><p>快速运行程序，alt + R</p></li><li><p>生成构造器，alt + insert</p></li><li><p>查看类的层级关系 ，Ctrl + H</p></li><li><p>查看方法再哪个类中， Ctrl + B</p></li><li><p>自动分配变量名， 在new类的后边加<code>.var //例如：(new Scanner(System.in)).var</code></p></li><li><p>添加if try catch … ctrl + alt + t;</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
